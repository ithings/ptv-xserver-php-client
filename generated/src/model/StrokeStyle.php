<?php
/**
 * StrokeStyle
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * StrokeStyle Class Doc Comment
 *
 * @category Class
 * @description Defines how to render the stroke of a feature. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.renderingprofile.StrokeStyle
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StrokeStyle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StrokeStyle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'arrows' => '\ithings\ptvxserver\model\ArrowsStyle',
'perpendicular_offset' => '\ithings\ptvxserver\model\RenderingSize',
'visible' => 'bool',
'width' => '\ithings\ptvxserver\model\RenderingSize',
'color' => '\ithings\ptvxserver\model\Color',
'opacity' => '\ithings\ptvxserver\model\Percent'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'arrows' => null,
'perpendicular_offset' => null,
'visible' => null,
'width' => null,
'color' => null,
'opacity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'arrows' => 'arrows',
'perpendicular_offset' => 'perpendicularOffset',
'visible' => 'visible',
'width' => 'width',
'color' => 'color',
'opacity' => 'opacity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'arrows' => 'setArrows',
'perpendicular_offset' => 'setPerpendicularOffset',
'visible' => 'setVisible',
'width' => 'setWidth',
'color' => 'setColor',
'opacity' => 'setOpacity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'arrows' => 'getArrows',
'perpendicular_offset' => 'getPerpendicularOffset',
'visible' => 'getVisible',
'width' => 'getWidth',
'color' => 'getColor',
'opacity' => 'getOpacity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['arrows'] = isset($data['arrows']) ? $data['arrows'] : null;
        $this->container['perpendicular_offset'] = isset($data['perpendicular_offset']) ? $data['perpendicular_offset'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['opacity'] = isset($data['opacity']) ? $data['opacity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets arrows
     *
     * @return \ithings\ptvxserver\model\ArrowsStyle
     */
    public function getArrows()
    {
        return $this->container['arrows'];
    }

    /**
     * Sets arrows
     *
     * @param \ithings\ptvxserver\model\ArrowsStyle $arrows arrows
     *
     * @return $this
     */
    public function setArrows($arrows)
    {
        $this->container['arrows'] = $arrows;

        return $this;
    }

    /**
     * Gets perpendicular_offset
     *
     * @return \ithings\ptvxserver\model\RenderingSize
     */
    public function getPerpendicularOffset()
    {
        return $this->container['perpendicular_offset'];
    }

    /**
     * Sets perpendicular_offset
     *
     * @param \ithings\ptvxserver\model\RenderingSize $perpendicular_offset perpendicular_offset
     *
     * @return $this
     */
    public function setPerpendicularOffset($perpendicular_offset)
    {
        $this->container['perpendicular_offset'] = $perpendicular_offset;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return bool
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param bool $visible Controls the visibility of the stroke.
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets width
     *
     * @return \ithings\ptvxserver\model\RenderingSize
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param \ithings\ptvxserver\model\RenderingSize $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets color
     *
     * @return \ithings\ptvxserver\model\Color
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param \ithings\ptvxserver\model\Color $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets opacity
     *
     * @return \ithings\ptvxserver\model\Percent
     */
    public function getOpacity()
    {
        return $this->container['opacity'];
    }

    /**
     * Sets opacity
     *
     * @param \ithings\ptvxserver\model\Percent $opacity opacity
     *
     * @return $this
     */
    public function setOpacity($opacity)
    {
        $this->container['opacity'] = $opacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
