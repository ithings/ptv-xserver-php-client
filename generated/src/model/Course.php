<?php
/**
 * Course
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Course Class Doc Comment
 *
 * @category Class
 * @description Defines the parameters of the routing algorithm that control the course of the route. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.routingprofile.Course
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Course implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Course';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'violations' => '\ithings\ptvxserver\model\Violations',
'network' => '\ithings\ptvxserver\model\Network',
'toll' => '\ithings\ptvxserver\model\Toll',
'special_areas' => '\ithings\ptvxserver\model\SpecialAreas',
'combined_transport' => '\ithings\ptvxserver\model\CombinedTransport',
'maneuver' => '\ithings\ptvxserver\model\Maneuver',
'distance_time_weighting' => '\ithings\ptvxserver\model\Percent'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'violations' => null,
'network' => null,
'toll' => null,
'special_areas' => null,
'combined_transport' => null,
'maneuver' => null,
'distance_time_weighting' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'violations' => 'violations',
'network' => 'network',
'toll' => 'toll',
'special_areas' => 'specialAreas',
'combined_transport' => 'combinedTransport',
'maneuver' => 'maneuver',
'distance_time_weighting' => 'distanceTimeWeighting'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'violations' => 'setViolations',
'network' => 'setNetwork',
'toll' => 'setToll',
'special_areas' => 'setSpecialAreas',
'combined_transport' => 'setCombinedTransport',
'maneuver' => 'setManeuver',
'distance_time_weighting' => 'setDistanceTimeWeighting'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'violations' => 'getViolations',
'network' => 'getNetwork',
'toll' => 'getToll',
'special_areas' => 'getSpecialAreas',
'combined_transport' => 'getCombinedTransport',
'maneuver' => 'getManeuver',
'distance_time_weighting' => 'getDistanceTimeWeighting'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['violations'] = isset($data['violations']) ? $data['violations'] : null;
        $this->container['network'] = isset($data['network']) ? $data['network'] : null;
        $this->container['toll'] = isset($data['toll']) ? $data['toll'] : null;
        $this->container['special_areas'] = isset($data['special_areas']) ? $data['special_areas'] : null;
        $this->container['combined_transport'] = isset($data['combined_transport']) ? $data['combined_transport'] : null;
        $this->container['maneuver'] = isset($data['maneuver']) ? $data['maneuver'] : null;
        $this->container['distance_time_weighting'] = isset($data['distance_time_weighting']) ? $data['distance_time_weighting'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets violations
     *
     * @return \ithings\ptvxserver\model\Violations
     */
    public function getViolations()
    {
        return $this->container['violations'];
    }

    /**
     * Sets violations
     *
     * @param \ithings\ptvxserver\model\Violations $violations violations
     *
     * @return $this
     */
    public function setViolations($violations)
    {
        $this->container['violations'] = $violations;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \ithings\ptvxserver\model\Network
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \ithings\ptvxserver\model\Network $network network
     *
     * @return $this
     */
    public function setNetwork($network)
    {
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets toll
     *
     * @return \ithings\ptvxserver\model\Toll
     */
    public function getToll()
    {
        return $this->container['toll'];
    }

    /**
     * Sets toll
     *
     * @param \ithings\ptvxserver\model\Toll $toll toll
     *
     * @return $this
     */
    public function setToll($toll)
    {
        $this->container['toll'] = $toll;

        return $this;
    }

    /**
     * Gets special_areas
     *
     * @return \ithings\ptvxserver\model\SpecialAreas
     */
    public function getSpecialAreas()
    {
        return $this->container['special_areas'];
    }

    /**
     * Sets special_areas
     *
     * @param \ithings\ptvxserver\model\SpecialAreas $special_areas special_areas
     *
     * @return $this
     */
    public function setSpecialAreas($special_areas)
    {
        $this->container['special_areas'] = $special_areas;

        return $this;
    }

    /**
     * Gets combined_transport
     *
     * @return \ithings\ptvxserver\model\CombinedTransport
     */
    public function getCombinedTransport()
    {
        return $this->container['combined_transport'];
    }

    /**
     * Sets combined_transport
     *
     * @param \ithings\ptvxserver\model\CombinedTransport $combined_transport combined_transport
     *
     * @return $this
     */
    public function setCombinedTransport($combined_transport)
    {
        $this->container['combined_transport'] = $combined_transport;

        return $this;
    }

    /**
     * Gets maneuver
     *
     * @return \ithings\ptvxserver\model\Maneuver
     */
    public function getManeuver()
    {
        return $this->container['maneuver'];
    }

    /**
     * Sets maneuver
     *
     * @param \ithings\ptvxserver\model\Maneuver $maneuver maneuver
     *
     * @return $this
     */
    public function setManeuver($maneuver)
    {
        $this->container['maneuver'] = $maneuver;

        return $this;
    }

    /**
     * Gets distance_time_weighting
     *
     * @return \ithings\ptvxserver\model\Percent
     */
    public function getDistanceTimeWeighting()
    {
        return $this->container['distance_time_weighting'];
    }

    /**
     * Sets distance_time_weighting
     *
     * @param \ithings\ptvxserver\model\Percent $distance_time_weighting distance_time_weighting
     *
     * @return $this
     */
    public function setDistanceTimeWeighting($distance_time_weighting)
    {
        $this->container['distance_time_weighting'] = $distance_time_weighting;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
