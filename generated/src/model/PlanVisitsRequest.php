<?php
/**
 * PlanVisitsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * PlanVisitsRequest Class Doc Comment
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanVisitsRequest extends RequestBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanVisitsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field_worker' => '\ithings\ptvxserver\model\FieldWorker',
'locations' => '\ithings\ptvxserver\model\ClusterPlanningLocation[]',
'orders' => '\ithings\ptvxserver\model\VisitPlanningOrder[]',
'plan_visits_options' => '\ithings\ptvxserver\model\PlanVisitsOptions',
'distance_mode' => '\ithings\ptvxserver\model\DistanceMode',
'hotels' => '\ithings\ptvxserver\model\Hotel[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field_worker' => null,
'locations' => null,
'orders' => null,
'plan_visits_options' => null,
'distance_mode' => null,
'hotels' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_worker' => 'fieldWorker',
'locations' => 'locations',
'orders' => 'orders',
'plan_visits_options' => 'planVisitsOptions',
'distance_mode' => 'distanceMode',
'hotels' => 'hotels'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_worker' => 'setFieldWorker',
'locations' => 'setLocations',
'orders' => 'setOrders',
'plan_visits_options' => 'setPlanVisitsOptions',
'distance_mode' => 'setDistanceMode',
'hotels' => 'setHotels'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_worker' => 'getFieldWorker',
'locations' => 'getLocations',
'orders' => 'getOrders',
'plan_visits_options' => 'getPlanVisitsOptions',
'distance_mode' => 'getDistanceMode',
'hotels' => 'getHotels'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['field_worker'] = isset($data['field_worker']) ? $data['field_worker'] : null;
        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['plan_visits_options'] = isset($data['plan_visits_options']) ? $data['plan_visits_options'] : null;
        $this->container['distance_mode'] = isset($data['distance_mode']) ? $data['distance_mode'] : null;
        $this->container['hotels'] = isset($data['hotels']) ? $data['hotels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['field_worker'] === null) {
            $invalidProperties[] = "'field_worker' can't be null";
        }
        if ($this->container['plan_visits_options'] === null) {
            $invalidProperties[] = "'plan_visits_options' can't be null";
        }
        if ($this->container['distance_mode'] === null) {
            $invalidProperties[] = "'distance_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_worker
     *
     * @return \ithings\ptvxserver\model\FieldWorker
     */
    public function getFieldWorker()
    {
        return $this->container['field_worker'];
    }

    /**
     * Sets field_worker
     *
     * @param \ithings\ptvxserver\model\FieldWorker $field_worker field_worker
     *
     * @return $this
     */
    public function setFieldWorker($field_worker)
    {
        $this->container['field_worker'] = $field_worker;

        return $this;
    }

    /**
     * Gets locations
     *
     * @return \ithings\ptvxserver\model\ClusterPlanningLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \ithings\ptvxserver\model\ClusterPlanningLocation[] $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \ithings\ptvxserver\model\VisitPlanningOrder[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \ithings\ptvxserver\model\VisitPlanningOrder[] $orders orders
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets plan_visits_options
     *
     * @return \ithings\ptvxserver\model\PlanVisitsOptions
     */
    public function getPlanVisitsOptions()
    {
        return $this->container['plan_visits_options'];
    }

    /**
     * Sets plan_visits_options
     *
     * @param \ithings\ptvxserver\model\PlanVisitsOptions $plan_visits_options plan_visits_options
     *
     * @return $this
     */
    public function setPlanVisitsOptions($plan_visits_options)
    {
        $this->container['plan_visits_options'] = $plan_visits_options;

        return $this;
    }

    /**
     * Gets distance_mode
     *
     * @return \ithings\ptvxserver\model\DistanceMode
     */
    public function getDistanceMode()
    {
        return $this->container['distance_mode'];
    }

    /**
     * Sets distance_mode
     *
     * @param \ithings\ptvxserver\model\DistanceMode $distance_mode distance_mode
     *
     * @return $this
     */
    public function setDistanceMode($distance_mode)
    {
        $this->container['distance_mode'] = $distance_mode;

        return $this;
    }

    /**
     * Gets hotels
     *
     * @return \ithings\ptvxserver\model\Hotel[]
     */
    public function getHotels()
    {
        return $this->container['hotels'];
    }

    /**
     * Sets hotels
     *
     * @param \ithings\ptvxserver\model\Hotel[] $hotels hotels
     *
     * @return $this
     */
    public function setHotels($hotels)
    {
        $this->container['hotels'] = $hotels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
