<?php
/**
 * Workload
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Workload Class Doc Comment
 *
 * @category Class
 * @description Contains parameter values for use cases in which the visit plan is calculated with specified daily and/or weekly workload. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.clusterplanningprofile.Workload
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Workload implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Workload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_score_weight' => '\ithings\ptvxserver\model\OrderScoreWeight',
'number_of_starts' => '\ithings\ptvxserver\model\PositiveInteger',
'solver_time_limit_per_start' => '\ithings\ptvxserver\model\Duration',
'number_of_nearest_neighbors' => '\ithings\ptvxserver\model\PositiveInteger'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_score_weight' => null,
'number_of_starts' => null,
'solver_time_limit_per_start' => null,
'number_of_nearest_neighbors' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_score_weight' => 'orderScoreWeight',
'number_of_starts' => 'numberOfStarts',
'solver_time_limit_per_start' => 'solverTimeLimitPerStart',
'number_of_nearest_neighbors' => 'numberOfNearestNeighbors'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_score_weight' => 'setOrderScoreWeight',
'number_of_starts' => 'setNumberOfStarts',
'solver_time_limit_per_start' => 'setSolverTimeLimitPerStart',
'number_of_nearest_neighbors' => 'setNumberOfNearestNeighbors'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_score_weight' => 'getOrderScoreWeight',
'number_of_starts' => 'getNumberOfStarts',
'solver_time_limit_per_start' => 'getSolverTimeLimitPerStart',
'number_of_nearest_neighbors' => 'getNumberOfNearestNeighbors'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_score_weight'] = isset($data['order_score_weight']) ? $data['order_score_weight'] : null;
        $this->container['number_of_starts'] = isset($data['number_of_starts']) ? $data['number_of_starts'] : null;
        $this->container['solver_time_limit_per_start'] = isset($data['solver_time_limit_per_start']) ? $data['solver_time_limit_per_start'] : null;
        $this->container['number_of_nearest_neighbors'] = isset($data['number_of_nearest_neighbors']) ? $data['number_of_nearest_neighbors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_score_weight
     *
     * @return \ithings\ptvxserver\model\OrderScoreWeight
     */
    public function getOrderScoreWeight()
    {
        return $this->container['order_score_weight'];
    }

    /**
     * Sets order_score_weight
     *
     * @param \ithings\ptvxserver\model\OrderScoreWeight $order_score_weight order_score_weight
     *
     * @return $this
     */
    public function setOrderScoreWeight($order_score_weight)
    {
        $this->container['order_score_weight'] = $order_score_weight;

        return $this;
    }

    /**
     * Gets number_of_starts
     *
     * @return \ithings\ptvxserver\model\PositiveInteger
     */
    public function getNumberOfStarts()
    {
        return $this->container['number_of_starts'];
    }

    /**
     * Sets number_of_starts
     *
     * @param \ithings\ptvxserver\model\PositiveInteger $number_of_starts number_of_starts
     *
     * @return $this
     */
    public function setNumberOfStarts($number_of_starts)
    {
        $this->container['number_of_starts'] = $number_of_starts;

        return $this;
    }

    /**
     * Gets solver_time_limit_per_start
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getSolverTimeLimitPerStart()
    {
        return $this->container['solver_time_limit_per_start'];
    }

    /**
     * Sets solver_time_limit_per_start
     *
     * @param \ithings\ptvxserver\model\Duration $solver_time_limit_per_start solver_time_limit_per_start
     *
     * @return $this
     */
    public function setSolverTimeLimitPerStart($solver_time_limit_per_start)
    {
        $this->container['solver_time_limit_per_start'] = $solver_time_limit_per_start;

        return $this;
    }

    /**
     * Gets number_of_nearest_neighbors
     *
     * @return \ithings\ptvxserver\model\PositiveInteger
     */
    public function getNumberOfNearestNeighbors()
    {
        return $this->container['number_of_nearest_neighbors'];
    }

    /**
     * Sets number_of_nearest_neighbors
     *
     * @param \ithings\ptvxserver\model\PositiveInteger $number_of_nearest_neighbors number_of_nearest_neighbors
     *
     * @return $this
     */
    public function setNumberOfNearestNeighbors($number_of_nearest_neighbors)
    {
        $this->container['number_of_nearest_neighbors'] = $number_of_nearest_neighbors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
