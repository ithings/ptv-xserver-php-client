<?php
/**
 * PackedBin
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * PackedBin Class Doc Comment
 *
 * @category Class
 * @description Describes a bin packed with items. If BinType.numberOfBins is greater than one, multiple packed bins with the same PackedBin.binTypeId might be part of a response. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xload.PackedBin
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackedBin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackedBin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bin_type_id' => 'string',
'packed_items' => '\ithings\ptvxserver\model\PackedItem[]',
'total_items_volume' => '\ithings\ptvxserver\model\Volume',
'total_items_weight' => '\ithings\ptvxserver\model\Kilograms',
'used_weight_capacity' => '\ithings\ptvxserver\model\Percent',
'used_volume_capacity' => '\ithings\ptvxserver\model\Percent',
'loading_meters' => '\ithings\ptvxserver\model\LoadingMeter'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bin_type_id' => null,
'packed_items' => null,
'total_items_volume' => null,
'total_items_weight' => null,
'used_weight_capacity' => null,
'used_volume_capacity' => null,
'loading_meters' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bin_type_id' => 'binTypeId',
'packed_items' => 'packedItems',
'total_items_volume' => 'totalItemsVolume',
'total_items_weight' => 'totalItemsWeight',
'used_weight_capacity' => 'usedWeightCapacity',
'used_volume_capacity' => 'usedVolumeCapacity',
'loading_meters' => 'loadingMeters'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bin_type_id' => 'setBinTypeId',
'packed_items' => 'setPackedItems',
'total_items_volume' => 'setTotalItemsVolume',
'total_items_weight' => 'setTotalItemsWeight',
'used_weight_capacity' => 'setUsedWeightCapacity',
'used_volume_capacity' => 'setUsedVolumeCapacity',
'loading_meters' => 'setLoadingMeters'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bin_type_id' => 'getBinTypeId',
'packed_items' => 'getPackedItems',
'total_items_volume' => 'getTotalItemsVolume',
'total_items_weight' => 'getTotalItemsWeight',
'used_weight_capacity' => 'getUsedWeightCapacity',
'used_volume_capacity' => 'getUsedVolumeCapacity',
'loading_meters' => 'getLoadingMeters'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bin_type_id'] = isset($data['bin_type_id']) ? $data['bin_type_id'] : null;
        $this->container['packed_items'] = isset($data['packed_items']) ? $data['packed_items'] : null;
        $this->container['total_items_volume'] = isset($data['total_items_volume']) ? $data['total_items_volume'] : null;
        $this->container['total_items_weight'] = isset($data['total_items_weight']) ? $data['total_items_weight'] : null;
        $this->container['used_weight_capacity'] = isset($data['used_weight_capacity']) ? $data['used_weight_capacity'] : null;
        $this->container['used_volume_capacity'] = isset($data['used_volume_capacity']) ? $data['used_volume_capacity'] : null;
        $this->container['loading_meters'] = isset($data['loading_meters']) ? $data['loading_meters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bin_type_id'] === null) {
            $invalidProperties[] = "'bin_type_id' can't be null";
        }
        if ($this->container['total_items_volume'] === null) {
            $invalidProperties[] = "'total_items_volume' can't be null";
        }
        if ($this->container['total_items_weight'] === null) {
            $invalidProperties[] = "'total_items_weight' can't be null";
        }
        if ($this->container['used_volume_capacity'] === null) {
            $invalidProperties[] = "'used_volume_capacity' can't be null";
        }
        if ($this->container['loading_meters'] === null) {
            $invalidProperties[] = "'loading_meters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bin_type_id
     *
     * @return string
     */
    public function getBinTypeId()
    {
        return $this->container['bin_type_id'];
    }

    /**
     * Sets bin_type_id
     *
     * @param string $bin_type_id ID of the BinType
     *
     * @return $this
     */
    public function setBinTypeId($bin_type_id)
    {
        $this->container['bin_type_id'] = $bin_type_id;

        return $this;
    }

    /**
     * Gets packed_items
     *
     * @return \ithings\ptvxserver\model\PackedItem[]
     */
    public function getPackedItems()
    {
        return $this->container['packed_items'];
    }

    /**
     * Sets packed_items
     *
     * @param \ithings\ptvxserver\model\PackedItem[] $packed_items packed_items
     *
     * @return $this
     */
    public function setPackedItems($packed_items)
    {
        $this->container['packed_items'] = $packed_items;

        return $this;
    }

    /**
     * Gets total_items_volume
     *
     * @return \ithings\ptvxserver\model\Volume
     */
    public function getTotalItemsVolume()
    {
        return $this->container['total_items_volume'];
    }

    /**
     * Sets total_items_volume
     *
     * @param \ithings\ptvxserver\model\Volume $total_items_volume total_items_volume
     *
     * @return $this
     */
    public function setTotalItemsVolume($total_items_volume)
    {
        $this->container['total_items_volume'] = $total_items_volume;

        return $this;
    }

    /**
     * Gets total_items_weight
     *
     * @return \ithings\ptvxserver\model\Kilograms
     */
    public function getTotalItemsWeight()
    {
        return $this->container['total_items_weight'];
    }

    /**
     * Sets total_items_weight
     *
     * @param \ithings\ptvxserver\model\Kilograms $total_items_weight total_items_weight
     *
     * @return $this
     */
    public function setTotalItemsWeight($total_items_weight)
    {
        $this->container['total_items_weight'] = $total_items_weight;

        return $this;
    }

    /**
     * Gets used_weight_capacity
     *
     * @return \ithings\ptvxserver\model\Percent
     */
    public function getUsedWeightCapacity()
    {
        return $this->container['used_weight_capacity'];
    }

    /**
     * Sets used_weight_capacity
     *
     * @param \ithings\ptvxserver\model\Percent $used_weight_capacity used_weight_capacity
     *
     * @return $this
     */
    public function setUsedWeightCapacity($used_weight_capacity)
    {
        $this->container['used_weight_capacity'] = $used_weight_capacity;

        return $this;
    }

    /**
     * Gets used_volume_capacity
     *
     * @return \ithings\ptvxserver\model\Percent
     */
    public function getUsedVolumeCapacity()
    {
        return $this->container['used_volume_capacity'];
    }

    /**
     * Sets used_volume_capacity
     *
     * @param \ithings\ptvxserver\model\Percent $used_volume_capacity used_volume_capacity
     *
     * @return $this
     */
    public function setUsedVolumeCapacity($used_volume_capacity)
    {
        $this->container['used_volume_capacity'] = $used_volume_capacity;

        return $this;
    }

    /**
     * Gets loading_meters
     *
     * @return \ithings\ptvxserver\model\LoadingMeter
     */
    public function getLoadingMeters()
    {
        return $this->container['loading_meters'];
    }

    /**
     * Sets loading_meters
     *
     * @param \ithings\ptvxserver\model\LoadingMeter $loading_meters loading_meters
     *
     * @return $this
     */
    public function setLoadingMeters($loading_meters)
    {
        $this->container['loading_meters'] = $loading_meters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
