<?php
/**
 * Visit
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Visit Class Doc Comment
 *
 * @category Class
 * @description Represents a visit of a visit day. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.Visit
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Visit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Visit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visit_date' => '\DateTime',
'service_time' => '\ithings\ptvxserver\model\Duration',
'order_id' => 'string',
'visit_number' => '\ithings\ptvxserver\model\NonNegativeInteger',
'travel_time_to_visit' => '\ithings\ptvxserver\model\Duration'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visit_date' => 'date',
'service_time' => null,
'order_id' => null,
'visit_number' => null,
'travel_time_to_visit' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'visit_date' => 'visitDate',
'service_time' => 'serviceTime',
'order_id' => 'orderId',
'visit_number' => 'visitNumber',
'travel_time_to_visit' => 'travelTimeToVisit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'visit_date' => 'setVisitDate',
'service_time' => 'setServiceTime',
'order_id' => 'setOrderId',
'visit_number' => 'setVisitNumber',
'travel_time_to_visit' => 'setTravelTimeToVisit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'visit_date' => 'getVisitDate',
'service_time' => 'getServiceTime',
'order_id' => 'getOrderId',
'visit_number' => 'getVisitNumber',
'travel_time_to_visit' => 'getTravelTimeToVisit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visit_date'] = isset($data['visit_date']) ? $data['visit_date'] : null;
        $this->container['service_time'] = isset($data['service_time']) ? $data['service_time'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['visit_number'] = isset($data['visit_number']) ? $data['visit_number'] : null;
        $this->container['travel_time_to_visit'] = isset($data['travel_time_to_visit']) ? $data['travel_time_to_visit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['visit_date'] === null) {
            $invalidProperties[] = "'visit_date' can't be null";
        }
        if ($this->container['service_time'] === null) {
            $invalidProperties[] = "'service_time' can't be null";
        }
        if ($this->container['order_id'] === null) {
            $invalidProperties[] = "'order_id' can't be null";
        }
        if ($this->container['visit_number'] === null) {
            $invalidProperties[] = "'visit_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets visit_date
     *
     * @return \DateTime
     */
    public function getVisitDate()
    {
        return $this->container['visit_date'];
    }

    /**
     * Sets visit_date
     *
     * @param \DateTime $visit_date The date of the visit.
     *
     * @return $this
     */
    public function setVisitDate($visit_date)
    {
        $this->container['visit_date'] = $visit_date;

        return $this;
    }

    /**
     * Gets service_time
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getServiceTime()
    {
        return $this->container['service_time'];
    }

    /**
     * Sets service_time
     *
     * @param \ithings\ptvxserver\model\Duration $service_time service_time
     *
     * @return $this
     */
    public function setServiceTime($service_time)
    {
        $this->container['service_time'] = $service_time;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The unique identifier of the order associated with this visit.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets visit_number
     *
     * @return \ithings\ptvxserver\model\NonNegativeInteger
     */
    public function getVisitNumber()
    {
        return $this->container['visit_number'];
    }

    /**
     * Sets visit_number
     *
     * @param \ithings\ptvxserver\model\NonNegativeInteger $visit_number visit_number
     *
     * @return $this
     */
    public function setVisitNumber($visit_number)
    {
        $this->container['visit_number'] = $visit_number;

        return $this;
    }

    /**
     * Gets travel_time_to_visit
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTravelTimeToVisit()
    {
        return $this->container['travel_time_to_visit'];
    }

    /**
     * Sets travel_time_to_visit
     *
     * @param \ithings\ptvxserver\model\Duration $travel_time_to_visit travel_time_to_visit
     *
     * @return $this
     */
    public function setTravelTimeToVisit($travel_time_to_visit)
    {
        $this->container['travel_time_to_visit'] = $travel_time_to_visit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
