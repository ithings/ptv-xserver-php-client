<?php
/**
 * TourReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * TourReport Class Doc Comment
 *
 * @category Class
 * @description More detailed information about a tour, containing reports for each trip, an accumulated cost report and a list of events that occur along the tour. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xtour.TourReport
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TourReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vehicle_id' => 'string',
'cost_report' => '\ithings\ptvxserver\model\CostReport',
'violation_report' => '\ithings\ptvxserver\model\TourViolationReport',
'trip_reports' => '\ithings\ptvxserver\model\TripReport[]',
'tour_events' => '\ithings\ptvxserver\model\TourEvent[]',
'leg_reports' => '\ithings\ptvxserver\model\LegReport[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vehicle_id' => null,
'cost_report' => null,
'violation_report' => null,
'trip_reports' => null,
'tour_events' => null,
'leg_reports' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicle_id' => 'vehicleId',
'cost_report' => 'costReport',
'violation_report' => 'violationReport',
'trip_reports' => 'tripReports',
'tour_events' => 'tourEvents',
'leg_reports' => 'legReports'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vehicle_id' => 'setVehicleId',
'cost_report' => 'setCostReport',
'violation_report' => 'setViolationReport',
'trip_reports' => 'setTripReports',
'tour_events' => 'setTourEvents',
'leg_reports' => 'setLegReports'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vehicle_id' => 'getVehicleId',
'cost_report' => 'getCostReport',
'violation_report' => 'getViolationReport',
'trip_reports' => 'getTripReports',
'tour_events' => 'getTourEvents',
'leg_reports' => 'getLegReports'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
        $this->container['cost_report'] = isset($data['cost_report']) ? $data['cost_report'] : null;
        $this->container['violation_report'] = isset($data['violation_report']) ? $data['violation_report'] : null;
        $this->container['trip_reports'] = isset($data['trip_reports']) ? $data['trip_reports'] : null;
        $this->container['tour_events'] = isset($data['tour_events']) ? $data['tour_events'] : null;
        $this->container['leg_reports'] = isset($data['leg_reports']) ? $data['leg_reports'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vehicle_id'] === null) {
            $invalidProperties[] = "'vehicle_id' can't be null";
        }
        if ($this->container['cost_report'] === null) {
            $invalidProperties[] = "'cost_report' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vehicle_id
     *
     * @return string
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param string $vehicle_id ID of vehicle of this tour.
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }

    /**
     * Gets cost_report
     *
     * @return \ithings\ptvxserver\model\CostReport
     */
    public function getCostReport()
    {
        return $this->container['cost_report'];
    }

    /**
     * Sets cost_report
     *
     * @param \ithings\ptvxserver\model\CostReport $cost_report cost_report
     *
     * @return $this
     */
    public function setCostReport($cost_report)
    {
        $this->container['cost_report'] = $cost_report;

        return $this;
    }

    /**
     * Gets violation_report
     *
     * @return \ithings\ptvxserver\model\TourViolationReport
     */
    public function getViolationReport()
    {
        return $this->container['violation_report'];
    }

    /**
     * Sets violation_report
     *
     * @param \ithings\ptvxserver\model\TourViolationReport $violation_report violation_report
     *
     * @return $this
     */
    public function setViolationReport($violation_report)
    {
        $this->container['violation_report'] = $violation_report;

        return $this;
    }

    /**
     * Gets trip_reports
     *
     * @return \ithings\ptvxserver\model\TripReport[]
     */
    public function getTripReports()
    {
        return $this->container['trip_reports'];
    }

    /**
     * Sets trip_reports
     *
     * @param \ithings\ptvxserver\model\TripReport[] $trip_reports trip_reports
     *
     * @return $this
     */
    public function setTripReports($trip_reports)
    {
        $this->container['trip_reports'] = $trip_reports;

        return $this;
    }

    /**
     * Gets tour_events
     *
     * @return \ithings\ptvxserver\model\TourEvent[]
     */
    public function getTourEvents()
    {
        return $this->container['tour_events'];
    }

    /**
     * Sets tour_events
     *
     * @param \ithings\ptvxserver\model\TourEvent[] $tour_events tour_events
     *
     * @return $this
     */
    public function setTourEvents($tour_events)
    {
        $this->container['tour_events'] = $tour_events;

        return $this;
    }

    /**
     * Gets leg_reports
     *
     * @return \ithings\ptvxserver\model\LegReport[]
     */
    public function getLegReports()
    {
        return $this->container['leg_reports'];
    }

    /**
     * Sets leg_reports
     *
     * @param \ithings\ptvxserver\model\LegReport[] $leg_reports leg_reports
     *
     * @return $this
     */
    public function setLegReports($leg_reports)
    {
        $this->container['leg_reports'] = $leg_reports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
