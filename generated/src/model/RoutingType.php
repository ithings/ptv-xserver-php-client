<?php
/**
 * RoutingType
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RoutingType Class Doc Comment
 *
 * @category Class
 * @description Represents the type of the route calculation algorithm. It can be used as input parameter or the type is reported, for instance as part of a distance matrix calculation.    * &#x60;CONVENTIONAL&#x60; - Route calculation based on a standard algorithm. Heuristic elements are used to improve performance. If this element is used as input it the routing is forced to use the conventional algorithm.    * &#x60;HIGH_PERFORMANCE_ROUTING_WITH_FALLBACK_CONVENTIONAL&#x60; - This element is used only as input. It indicates that the service tries to use a high-performance routing network, and if no adequate data is found conventional routing is used instead.    * &#x60;HIGH_PERFORMANCE_ROUTING&#x60; - High-performance route calculation based on pre-calculated, profile-dependent additional routing networks. If it is used as input and no such network which fits the current profile settings is available an exception is thrown.  Hint: Corresponding enum in xServer API documentation - com.ptvgroup.xserver.routing.RoutingType
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoutingType
{
    /**
     * Possible values of this enum
     */
    const CONVENTIONAL = 'CONVENTIONAL';
const HIGH_PERFORMANCE_ROUTING_WITH_FALLBACK_CONVENTIONAL = 'HIGH_PERFORMANCE_ROUTING_WITH_FALLBACK_CONVENTIONAL';
const HIGH_PERFORMANCE_ROUTING = 'HIGH_PERFORMANCE_ROUTING';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::CONVENTIONAL,
self::HIGH_PERFORMANCE_ROUTING_WITH_FALLBACK_CONVENTIONAL,
self::HIGH_PERFORMANCE_ROUTING,        ];
    }
}
