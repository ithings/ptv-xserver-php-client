<?php
/**
 * MatchTrackResultFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * MatchTrackResultFields Class Doc Comment
 *
 * @category Class
 * @description Request to match positions on a map which belong to a track. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xmatch.MatchTrackResultFields
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MatchTrackResultFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MatchTrackResultFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'matched_paths' => 'bool',
'geometry' => 'bool',
'matched_track_positions' => 'bool',
'encoded_path' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'matched_paths' => null,
'geometry' => null,
'matched_track_positions' => null,
'encoded_path' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'matched_paths' => 'matchedPaths',
'geometry' => 'geometry',
'matched_track_positions' => 'matchedTrackPositions',
'encoded_path' => 'encodedPath'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'matched_paths' => 'setMatchedPaths',
'geometry' => 'setGeometry',
'matched_track_positions' => 'setMatchedTrackPositions',
'encoded_path' => 'setEncodedPath'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'matched_paths' => 'getMatchedPaths',
'geometry' => 'getGeometry',
'matched_track_positions' => 'getMatchedTrackPositions',
'encoded_path' => 'getEncodedPath'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['matched_paths'] = isset($data['matched_paths']) ? $data['matched_paths'] : null;
        $this->container['geometry'] = isset($data['geometry']) ? $data['geometry'] : null;
        $this->container['matched_track_positions'] = isset($data['matched_track_positions']) ? $data['matched_track_positions'] : null;
        $this->container['encoded_path'] = isset($data['encoded_path']) ? $data['encoded_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets matched_paths
     *
     * @return bool
     */
    public function getMatchedPaths()
    {
        return $this->container['matched_paths'];
    }

    /**
     * Sets matched_paths
     *
     * @param bool $matched_paths Specifies if the TrackResponse.matchedPaths shall be returned for the track.
     *
     * @return $this
     */
    public function setMatchedPaths($matched_paths)
    {
        $this->container['matched_paths'] = $matched_paths;

        return $this;
    }

    /**
     * Gets geometry
     *
     * @return bool
     */
    public function getGeometry()
    {
        return $this->container['geometry'];
    }

    /**
     * Sets geometry
     *
     * @param bool $geometry Specifies if the TrackResponse.geometry shall be returned for the track.
     *
     * @return $this
     */
    public function setGeometry($geometry)
    {
        $this->container['geometry'] = $geometry;

        return $this;
    }

    /**
     * Gets matched_track_positions
     *
     * @return bool
     */
    public function getMatchedTrackPositions()
    {
        return $this->container['matched_track_positions'];
    }

    /**
     * Sets matched_track_positions
     *
     * @param bool $matched_track_positions Specifies if the TrackResponse.matchedTrackPositions shall be returned for the track.
     *
     * @return $this
     */
    public function setMatchedTrackPositions($matched_track_positions)
    {
        $this->container['matched_track_positions'] = $matched_track_positions;

        return $this;
    }

    /**
     * Gets encoded_path
     *
     * @return bool
     */
    public function getEncodedPath()
    {
        return $this->container['encoded_path'];
    }

    /**
     * Sets encoded_path
     *
     * @param bool $encoded_path Specifies if the MatchedPath.encodedPath shall be returned.
     *
     * @return $this
     */
    public function setEncodedPath($encoded_path)
    {
        $this->container['encoded_path'] = $encoded_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
