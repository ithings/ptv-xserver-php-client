<?php
/**
 * GeographicRestrictionsIgnoredLimitation
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * GeographicRestrictionsIgnoredLimitation Class Doc Comment
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeographicRestrictionsIgnoredLimitation extends ResultLimitation 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeographicRestrictionsIgnoredLimitation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ignored_parameter' => 'string',
'related_parameter' => 'string',
'ignored_value' => 'string',
'related_value' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ignored_parameter' => null,
'related_parameter' => null,
'ignored_value' => null,
'related_value' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ignored_parameter' => 'ignoredParameter',
'related_parameter' => 'relatedParameter',
'ignored_value' => 'ignoredValue',
'related_value' => 'relatedValue'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ignored_parameter' => 'setIgnoredParameter',
'related_parameter' => 'setRelatedParameter',
'ignored_value' => 'setIgnoredValue',
'related_value' => 'setRelatedValue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ignored_parameter' => 'getIgnoredParameter',
'related_parameter' => 'getRelatedParameter',
'ignored_value' => 'getIgnoredValue',
'related_value' => 'getRelatedValue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['ignored_parameter'] = isset($data['ignored_parameter']) ? $data['ignored_parameter'] : null;
        $this->container['related_parameter'] = isset($data['related_parameter']) ? $data['related_parameter'] : null;
        $this->container['ignored_value'] = isset($data['ignored_value']) ? $data['ignored_value'] : null;
        $this->container['related_value'] = isset($data['related_value']) ? $data['related_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['ignored_parameter'] === null) {
            $invalidProperties[] = "'ignored_parameter' can't be null";
        }
        if ($this->container['related_parameter'] === null) {
            $invalidProperties[] = "'related_parameter' can't be null";
        }
        if ($this->container['ignored_value'] === null) {
            $invalidProperties[] = "'ignored_value' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ignored_parameter
     *
     * @return string
     */
    public function getIgnoredParameter()
    {
        return $this->container['ignored_parameter'];
    }

    /**
     * Sets ignored_parameter
     *
     * @param string $ignored_parameter Identifies the geographic restrictions parameter (as an xPath path expression) which was ignored.
     *
     * @return $this
     */
    public function setIgnoredParameter($ignored_parameter)
    {
        $this->container['ignored_parameter'] = $ignored_parameter;

        return $this;
    }

    /**
     * Gets related_parameter
     *
     * @return string
     */
    public function getRelatedParameter()
    {
        return $this->container['related_parameter'];
    }

    /**
     * Sets related_parameter
     *
     * @param string $related_parameter Identifies the parameter (as an xPath path expression) which caused the geographic restrictions parameter to be passed over.
     *
     * @return $this
     */
    public function setRelatedParameter($related_parameter)
    {
        $this->container['related_parameter'] = $related_parameter;

        return $this;
    }

    /**
     * Gets ignored_value
     *
     * @return string
     */
    public function getIgnoredValue()
    {
        return $this->container['ignored_value'];
    }

    /**
     * Sets ignored_value
     *
     * @param string $ignored_value The ignored geographic restrictions parameter value.
     *
     * @return $this
     */
    public function setIgnoredValue($ignored_value)
    {
        $this->container['ignored_value'] = $ignored_value;

        return $this;
    }

    /**
     * Gets related_value
     *
     * @return string
     */
    public function getRelatedValue()
    {
        return $this->container['related_value'];
    }

    /**
     * Sets related_value
     *
     * @param string $related_value The value which caused the geographic restrictions parameter to be passed over. Not present if the conflict is independent of the value.
     *
     * @return $this
     */
    public function setRelatedValue($related_value)
    {
        $this->container['related_value'] = $related_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
