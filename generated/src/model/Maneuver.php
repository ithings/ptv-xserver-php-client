<?php
/**
 * Maneuver
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Maneuver Class Doc Comment
 *
 * @category Class
 * @description Defines the parameters that control how special maneuvers (turns) affect the route calculation. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.routingprofile.Maneuver
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Maneuver implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Maneuver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'u_turn_cost' => '\ithings\ptvxserver\model\MathematicalCost',
'high_performance_routing_u_turn_cost' => '\ithings\ptvxserver\model\MathematicalCost',
'consider_turning_bans' => 'bool',
'use_fast_turning_ban_heuristic' => 'bool',
'intersection_turn_costs' => '\ithings\ptvxserver\model\IntersectionTurnCosts'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'u_turn_cost' => null,
'high_performance_routing_u_turn_cost' => null,
'consider_turning_bans' => null,
'use_fast_turning_ban_heuristic' => null,
'intersection_turn_costs' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'u_turn_cost' => 'uTurnCost',
'high_performance_routing_u_turn_cost' => 'highPerformanceRoutingUTurnCost',
'consider_turning_bans' => 'considerTurningBans',
'use_fast_turning_ban_heuristic' => 'useFastTurningBanHeuristic',
'intersection_turn_costs' => 'intersectionTurnCosts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'u_turn_cost' => 'setUTurnCost',
'high_performance_routing_u_turn_cost' => 'setHighPerformanceRoutingUTurnCost',
'consider_turning_bans' => 'setConsiderTurningBans',
'use_fast_turning_ban_heuristic' => 'setUseFastTurningBanHeuristic',
'intersection_turn_costs' => 'setIntersectionTurnCosts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'u_turn_cost' => 'getUTurnCost',
'high_performance_routing_u_turn_cost' => 'getHighPerformanceRoutingUTurnCost',
'consider_turning_bans' => 'getConsiderTurningBans',
'use_fast_turning_ban_heuristic' => 'getUseFastTurningBanHeuristic',
'intersection_turn_costs' => 'getIntersectionTurnCosts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['u_turn_cost'] = isset($data['u_turn_cost']) ? $data['u_turn_cost'] : null;
        $this->container['high_performance_routing_u_turn_cost'] = isset($data['high_performance_routing_u_turn_cost']) ? $data['high_performance_routing_u_turn_cost'] : null;
        $this->container['consider_turning_bans'] = isset($data['consider_turning_bans']) ? $data['consider_turning_bans'] : null;
        $this->container['use_fast_turning_ban_heuristic'] = isset($data['use_fast_turning_ban_heuristic']) ? $data['use_fast_turning_ban_heuristic'] : null;
        $this->container['intersection_turn_costs'] = isset($data['intersection_turn_costs']) ? $data['intersection_turn_costs'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets u_turn_cost
     *
     * @return \ithings\ptvxserver\model\MathematicalCost
     */
    public function getUTurnCost()
    {
        return $this->container['u_turn_cost'];
    }

    /**
     * Sets u_turn_cost
     *
     * @param \ithings\ptvxserver\model\MathematicalCost $u_turn_cost u_turn_cost
     *
     * @return $this
     */
    public function setUTurnCost($u_turn_cost)
    {
        $this->container['u_turn_cost'] = $u_turn_cost;

        return $this;
    }

    /**
     * Gets high_performance_routing_u_turn_cost
     *
     * @return \ithings\ptvxserver\model\MathematicalCost
     */
    public function getHighPerformanceRoutingUTurnCost()
    {
        return $this->container['high_performance_routing_u_turn_cost'];
    }

    /**
     * Sets high_performance_routing_u_turn_cost
     *
     * @param \ithings\ptvxserver\model\MathematicalCost $high_performance_routing_u_turn_cost high_performance_routing_u_turn_cost
     *
     * @return $this
     */
    public function setHighPerformanceRoutingUTurnCost($high_performance_routing_u_turn_cost)
    {
        $this->container['high_performance_routing_u_turn_cost'] = $high_performance_routing_u_turn_cost;

        return $this;
    }

    /**
     * Gets consider_turning_bans
     *
     * @return bool
     */
    public function getConsiderTurningBans()
    {
        return $this->container['consider_turning_bans'];
    }

    /**
     * Sets consider_turning_bans
     *
     * @param bool $consider_turning_bans The consideration of turning bans.
     *
     * @return $this
     */
    public function setConsiderTurningBans($consider_turning_bans)
    {
        $this->container['consider_turning_bans'] = $consider_turning_bans;

        return $this;
    }

    /**
     * Gets use_fast_turning_ban_heuristic
     *
     * @return bool
     */
    public function getUseFastTurningBanHeuristic()
    {
        return $this->container['use_fast_turning_ban_heuristic'];
    }

    /**
     * Sets use_fast_turning_ban_heuristic
     *
     * @param bool $use_fast_turning_ban_heuristic The fast turning ban heuristic is used by default. This heuristic can cause in rare cases suboptimal routes because then driving in both directions of roads is not always considered by the algorithm. Switching off the heuristic by setting this attribute to false yields better routes but can increase the runtime of the routing algorithm.
     *
     * @return $this
     */
    public function setUseFastTurningBanHeuristic($use_fast_turning_ban_heuristic)
    {
        $this->container['use_fast_turning_ban_heuristic'] = $use_fast_turning_ban_heuristic;

        return $this;
    }

    /**
     * Gets intersection_turn_costs
     *
     * @return \ithings\ptvxserver\model\IntersectionTurnCosts
     */
    public function getIntersectionTurnCosts()
    {
        return $this->container['intersection_turn_costs'];
    }

    /**
     * Sets intersection_turn_costs
     *
     * @param \ithings\ptvxserver\model\IntersectionTurnCosts $intersection_turn_costs intersection_turn_costs
     *
     * @return $this
     */
    public function setIntersectionTurnCosts($intersection_turn_costs)
    {
        $this->container['intersection_turn_costs'] = $intersection_turn_costs;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
