<?php
/**
 * ClustersResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * ClustersResponse Class Doc Comment
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClustersResponse extends ResponseBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClustersResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clusters' => '\ithings\ptvxserver\model\Cluster[]',
'cluster_reports' => '\ithings\ptvxserver\model\ClusterReport[]',
'clustered_locations' => '\ithings\ptvxserver\model\ClusteredLocations[]',
'location_ids_not_planned' => 'string[]',
'total_cluster_facility_cost' => '\ithings\ptvxserver\model\MathematicalCost'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clusters' => null,
'cluster_reports' => null,
'clustered_locations' => null,
'location_ids_not_planned' => null,
'total_cluster_facility_cost' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clusters' => 'clusters',
'cluster_reports' => 'clusterReports',
'clustered_locations' => 'clusteredLocations',
'location_ids_not_planned' => 'locationIdsNotPlanned',
'total_cluster_facility_cost' => 'totalClusterFacilityCost'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clusters' => 'setClusters',
'cluster_reports' => 'setClusterReports',
'clustered_locations' => 'setClusteredLocations',
'location_ids_not_planned' => 'setLocationIdsNotPlanned',
'total_cluster_facility_cost' => 'setTotalClusterFacilityCost'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clusters' => 'getClusters',
'cluster_reports' => 'getClusterReports',
'clustered_locations' => 'getClusteredLocations',
'location_ids_not_planned' => 'getLocationIdsNotPlanned',
'total_cluster_facility_cost' => 'getTotalClusterFacilityCost'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['clusters'] = isset($data['clusters']) ? $data['clusters'] : null;
        $this->container['cluster_reports'] = isset($data['cluster_reports']) ? $data['cluster_reports'] : null;
        $this->container['clustered_locations'] = isset($data['clustered_locations']) ? $data['clustered_locations'] : null;
        $this->container['location_ids_not_planned'] = isset($data['location_ids_not_planned']) ? $data['location_ids_not_planned'] : null;
        $this->container['total_cluster_facility_cost'] = isset($data['total_cluster_facility_cost']) ? $data['total_cluster_facility_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clusters
     *
     * @return \ithings\ptvxserver\model\Cluster[]
     */
    public function getClusters()
    {
        return $this->container['clusters'];
    }

    /**
     * Sets clusters
     *
     * @param \ithings\ptvxserver\model\Cluster[] $clusters clusters
     *
     * @return $this
     */
    public function setClusters($clusters)
    {
        $this->container['clusters'] = $clusters;

        return $this;
    }

    /**
     * Gets cluster_reports
     *
     * @return \ithings\ptvxserver\model\ClusterReport[]
     */
    public function getClusterReports()
    {
        return $this->container['cluster_reports'];
    }

    /**
     * Sets cluster_reports
     *
     * @param \ithings\ptvxserver\model\ClusterReport[] $cluster_reports cluster_reports
     *
     * @return $this
     */
    public function setClusterReports($cluster_reports)
    {
        $this->container['cluster_reports'] = $cluster_reports;

        return $this;
    }

    /**
     * Gets clustered_locations
     *
     * @return \ithings\ptvxserver\model\ClusteredLocations[]
     */
    public function getClusteredLocations()
    {
        return $this->container['clustered_locations'];
    }

    /**
     * Sets clustered_locations
     *
     * @param \ithings\ptvxserver\model\ClusteredLocations[] $clustered_locations clustered_locations
     *
     * @return $this
     */
    public function setClusteredLocations($clustered_locations)
    {
        $this->container['clustered_locations'] = $clustered_locations;

        return $this;
    }

    /**
     * Gets location_ids_not_planned
     *
     * @return string[]
     */
    public function getLocationIdsNotPlanned()
    {
        return $this->container['location_ids_not_planned'];
    }

    /**
     * Sets location_ids_not_planned
     *
     * @param string[] $location_ids_not_planned location_ids_not_planned
     *
     * @return $this
     */
    public function setLocationIdsNotPlanned($location_ids_not_planned)
    {
        $this->container['location_ids_not_planned'] = $location_ids_not_planned;

        return $this;
    }

    /**
     * Gets total_cluster_facility_cost
     *
     * @return \ithings\ptvxserver\model\MathematicalCost
     */
    public function getTotalClusterFacilityCost()
    {
        return $this->container['total_cluster_facility_cost'];
    }

    /**
     * Sets total_cluster_facility_cost
     *
     * @param \ithings\ptvxserver\model\MathematicalCost $total_cluster_facility_cost total_cluster_facility_cost
     *
     * @return $this
     */
    public function setTotalClusterFacilityCost($total_cluster_facility_cost)
    {
        $this->container['total_cluster_facility_cost'] = $total_cluster_facility_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
