<?php
/**
 * ConfigurationResultFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * ConfigurationResultFields Class Doc Comment
 *
 * @category Class
 * @description This type specifies what to include in the ServerConfigurationResponse object. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xruntime.ConfigurationResultFields
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationResultFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigurationResultFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profiles' => 'bool',
'configuration_file_names' => 'bool',
'third_party_libraries' => 'bool',
'internal_libraries' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profiles' => null,
'configuration_file_names' => null,
'third_party_libraries' => null,
'internal_libraries' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profiles' => 'profiles',
'configuration_file_names' => 'configurationFileNames',
'third_party_libraries' => 'thirdPartyLibraries',
'internal_libraries' => 'internalLibraries'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profiles' => 'setProfiles',
'configuration_file_names' => 'setConfigurationFileNames',
'third_party_libraries' => 'setThirdPartyLibraries',
'internal_libraries' => 'setInternalLibraries'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profiles' => 'getProfiles',
'configuration_file_names' => 'getConfigurationFileNames',
'third_party_libraries' => 'getThirdPartyLibraries',
'internal_libraries' => 'getInternalLibraries'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profiles'] = isset($data['profiles']) ? $data['profiles'] : null;
        $this->container['configuration_file_names'] = isset($data['configuration_file_names']) ? $data['configuration_file_names'] : null;
        $this->container['third_party_libraries'] = isset($data['third_party_libraries']) ? $data['third_party_libraries'] : null;
        $this->container['internal_libraries'] = isset($data['internal_libraries']) ? $data['internal_libraries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profiles
     *
     * @return bool
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param bool $profiles Should available profiles be included?
     *
     * @return $this
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets configuration_file_names
     *
     * @return bool
     */
    public function getConfigurationFileNames()
    {
        return $this->container['configuration_file_names'];
    }

    /**
     * Sets configuration_file_names
     *
     * @param bool $configuration_file_names Should all configuration file names be included?
     *
     * @return $this
     */
    public function setConfigurationFileNames($configuration_file_names)
    {
        $this->container['configuration_file_names'] = $configuration_file_names;

        return $this;
    }

    /**
     * Gets third_party_libraries
     *
     * @return bool
     */
    public function getThirdPartyLibraries()
    {
        return $this->container['third_party_libraries'];
    }

    /**
     * Sets third_party_libraries
     *
     * @param bool $third_party_libraries Should 3rdParty library information be included?
     *
     * @return $this
     */
    public function setThirdPartyLibraries($third_party_libraries)
    {
        $this->container['third_party_libraries'] = $third_party_libraries;

        return $this;
    }

    /**
     * Gets internal_libraries
     *
     * @return bool
     */
    public function getInternalLibraries()
    {
        return $this->container['internal_libraries'];
    }

    /**
     * Sets internal_libraries
     *
     * @param bool $internal_libraries Should internal library information be included?
     *
     * @return $this
     */
    public function setInternalLibraries($internal_libraries)
    {
        $this->container['internal_libraries'] = $internal_libraries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
