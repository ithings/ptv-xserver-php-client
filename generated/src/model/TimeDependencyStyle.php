<?php
/**
 * TimeDependencyStyle
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * TimeDependencyStyle Class Doc Comment
 *
 * @category Class
 * @description Defines how to modify the style of restricted features, e.g. time-dependent features or those not relevant by time. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.renderingprofile.TimeDependencyStyle
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TimeDependencyStyle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TimeDependencyStyle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'icons_with_clock' => 'bool',
'strokes_dashed' => 'bool',
'irrelevant_icons_grayed' => 'bool',
'irrelevant_strokes_grayed' => 'bool',
'irrelevant_polygons_grayed' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'icons_with_clock' => null,
'strokes_dashed' => null,
'irrelevant_icons_grayed' => null,
'irrelevant_strokes_grayed' => null,
'irrelevant_polygons_grayed' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'icons_with_clock' => 'iconsWithClock',
'strokes_dashed' => 'strokesDashed',
'irrelevant_icons_grayed' => 'irrelevantIconsGrayed',
'irrelevant_strokes_grayed' => 'irrelevantStrokesGrayed',
'irrelevant_polygons_grayed' => 'irrelevantPolygonsGrayed'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'icons_with_clock' => 'setIconsWithClock',
'strokes_dashed' => 'setStrokesDashed',
'irrelevant_icons_grayed' => 'setIrrelevantIconsGrayed',
'irrelevant_strokes_grayed' => 'setIrrelevantStrokesGrayed',
'irrelevant_polygons_grayed' => 'setIrrelevantPolygonsGrayed'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'icons_with_clock' => 'getIconsWithClock',
'strokes_dashed' => 'getStrokesDashed',
'irrelevant_icons_grayed' => 'getIrrelevantIconsGrayed',
'irrelevant_strokes_grayed' => 'getIrrelevantStrokesGrayed',
'irrelevant_polygons_grayed' => 'getIrrelevantPolygonsGrayed'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['icons_with_clock'] = isset($data['icons_with_clock']) ? $data['icons_with_clock'] : null;
        $this->container['strokes_dashed'] = isset($data['strokes_dashed']) ? $data['strokes_dashed'] : null;
        $this->container['irrelevant_icons_grayed'] = isset($data['irrelevant_icons_grayed']) ? $data['irrelevant_icons_grayed'] : null;
        $this->container['irrelevant_strokes_grayed'] = isset($data['irrelevant_strokes_grayed']) ? $data['irrelevant_strokes_grayed'] : null;
        $this->container['irrelevant_polygons_grayed'] = isset($data['irrelevant_polygons_grayed']) ? $data['irrelevant_polygons_grayed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets icons_with_clock
     *
     * @return bool
     */
    public function getIconsWithClock()
    {
        return $this->container['icons_with_clock'];
    }

    /**
     * Sets icons_with_clock
     *
     * @param bool $icons_with_clock If true, a small clock is added to the bottom right corner of every icon representing a time-dependent feature, i.e. a feature which is not valid 24/7 but only for a specific time period, e.g. at night or on Sundays. Use this in order to distinguish time-dependent from time-independent features within one Feature Layer theme.
     *
     * @return $this
     */
    public function setIconsWithClock($icons_with_clock)
    {
        $this->container['icons_with_clock'] = $icons_with_clock;

        return $this;
    }

    /**
     * Gets strokes_dashed
     *
     * @return bool
     */
    public function getStrokesDashed()
    {
        return $this->container['strokes_dashed'];
    }

    /**
     * Sets strokes_dashed
     *
     * @param bool $strokes_dashed If true, a stroke representing a time-dependent feature is drawn dashed instead of solid. Use this in order to distinguish time-dependent from time-independent features within one Feature Layer theme.
     *
     * @return $this
     */
    public function setStrokesDashed($strokes_dashed)
    {
        $this->container['strokes_dashed'] = $strokes_dashed;

        return $this;
    }

    /**
     * Gets irrelevant_icons_grayed
     *
     * @return bool
     */
    public function getIrrelevantIconsGrayed()
    {
        return $this->container['irrelevant_icons_grayed'];
    }

    /**
     * Sets irrelevant_icons_grayed
     *
     * @param bool $irrelevant_icons_grayed If true, the icon of a feature which is not valid for the given time-consideration scenario will be drawn in gray. E.g. when requesting time-consideration scenario 'snapshot' at 3 p.m., features valid only at night are displayed with a gray icon. Please make sure to use colored icons when using this feature. Use this to distinguish relevant features from those not relevant for the selected time-consideration scenario.
     *
     * @return $this
     */
    public function setIrrelevantIconsGrayed($irrelevant_icons_grayed)
    {
        $this->container['irrelevant_icons_grayed'] = $irrelevant_icons_grayed;

        return $this;
    }

    /**
     * Gets irrelevant_strokes_grayed
     *
     * @return bool
     */
    public function getIrrelevantStrokesGrayed()
    {
        return $this->container['irrelevant_strokes_grayed'];
    }

    /**
     * Sets irrelevant_strokes_grayed
     *
     * @param bool $irrelevant_strokes_grayed If true, the stroke of a feature which is not valid for the given time-consideration scenario will be drawn in gray. Please make sure to use colored strokes when using this feature. Use this to distinguish relevant features from those not relevant for the selected time-consideration scenario.
     *
     * @return $this
     */
    public function setIrrelevantStrokesGrayed($irrelevant_strokes_grayed)
    {
        $this->container['irrelevant_strokes_grayed'] = $irrelevant_strokes_grayed;

        return $this;
    }

    /**
     * Gets irrelevant_polygons_grayed
     *
     * @return bool
     */
    public function getIrrelevantPolygonsGrayed()
    {
        return $this->container['irrelevant_polygons_grayed'];
    }

    /**
     * Sets irrelevant_polygons_grayed
     *
     * @param bool $irrelevant_polygons_grayed If true, the polygon of a feature which is not valid for the given time-consideration scenario will be drawn in gray and hatched. Please make sure to use colored polygons when using this feature. Use this to distinguish relevant features from those not relevant for the selected time-consideration scenario.
     *
     * @return $this
     */
    public function setIrrelevantPolygonsGrayed($irrelevant_polygons_grayed)
    {
        $this->container['irrelevant_polygons_grayed'] = $irrelevant_polygons_grayed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
