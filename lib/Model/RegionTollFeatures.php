<?php
/**
 * RegionTollFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RegionTollFeatures Class Doc Comment
 *
 * @category Class
 * @description Specifies the available toll data for a region. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xruntime.RegionTollFeatures
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RegionTollFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RegionTollFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'detail_level' => '\Swagger\Client\Model\TollDetailLevel',
'reference_provider_name' => 'string',
'reference_provider_data_version' => 'string',
'electronic_toll_collection_subscriptions' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'detail_level' => null,
'reference_provider_name' => null,
'reference_provider_data_version' => null,
'electronic_toll_collection_subscriptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'detail_level' => 'detailLevel',
'reference_provider_name' => 'referenceProviderName',
'reference_provider_data_version' => 'referenceProviderDataVersion',
'electronic_toll_collection_subscriptions' => 'electronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'detail_level' => 'setDetailLevel',
'reference_provider_name' => 'setReferenceProviderName',
'reference_provider_data_version' => 'setReferenceProviderDataVersion',
'electronic_toll_collection_subscriptions' => 'setElectronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'detail_level' => 'getDetailLevel',
'reference_provider_name' => 'getReferenceProviderName',
'reference_provider_data_version' => 'getReferenceProviderDataVersion',
'electronic_toll_collection_subscriptions' => 'getElectronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['detail_level'] = isset($data['detail_level']) ? $data['detail_level'] : null;
        $this->container['reference_provider_name'] = isset($data['reference_provider_name']) ? $data['reference_provider_name'] : null;
        $this->container['reference_provider_data_version'] = isset($data['reference_provider_data_version']) ? $data['reference_provider_data_version'] : null;
        $this->container['electronic_toll_collection_subscriptions'] = isset($data['electronic_toll_collection_subscriptions']) ? $data['electronic_toll_collection_subscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets detail_level
     *
     * @return \Swagger\Client\Model\TollDetailLevel
     */
    public function getDetailLevel()
    {
        return $this->container['detail_level'];
    }

    /**
     * Sets detail_level
     *
     * @param \Swagger\Client\Model\TollDetailLevel $detail_level detail_level
     *
     * @return $this
     */
    public function setDetailLevel($detail_level)
    {
        $this->container['detail_level'] = $detail_level;

        return $this;
    }

    /**
     * Gets reference_provider_name
     *
     * @return string
     */
    public function getReferenceProviderName()
    {
        return $this->container['reference_provider_name'];
    }

    /**
     * Sets reference_provider_name
     *
     * @param string $reference_provider_name The provider name of the map data this toll data is based on. For best results the data should match the routing data of the underlying map, therefore this name usually equals the corresponding RegionDescription.providerName.
     *
     * @return $this
     */
    public function setReferenceProviderName($reference_provider_name)
    {
        $this->container['reference_provider_name'] = $reference_provider_name;

        return $this;
    }

    /**
     * Gets reference_provider_data_version
     *
     * @return string
     */
    public function getReferenceProviderDataVersion()
    {
        return $this->container['reference_provider_data_version'];
    }

    /**
     * Sets reference_provider_data_version
     *
     * @param string $reference_provider_data_version The data version of the map data this toll data is based on. For best results the data should match the routing data of the underlying map, therefore this version number usually equals the corresponding RegionDescription.providerDataVersion.
     *
     * @return $this
     */
    public function setReferenceProviderDataVersion($reference_provider_data_version)
    {
        $this->container['reference_provider_data_version'] = $reference_provider_data_version;

        return $this;
    }

    /**
     * Gets electronic_toll_collection_subscriptions
     *
     * @return string[]
     */
    public function getElectronicTollCollectionSubscriptions()
    {
        return $this->container['electronic_toll_collection_subscriptions'];
    }

    /**
     * Sets electronic_toll_collection_subscriptions
     *
     * @param string[] $electronic_toll_collection_subscriptions electronic_toll_collection_subscriptions
     *
     * @return $this
     */
    public function setElectronicTollCollectionSubscriptions($electronic_toll_collection_subscriptions)
    {
        $this->container['electronic_toll_collection_subscriptions'] = $electronic_toll_collection_subscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
