<?php
/**
 * RouteEventType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * RouteEventType Class Doc Comment
 *
 * @category Class
 * @description Enumeration of the different RouteEvent types returned by a routing operation.    * &#x60;MANEUVER_EVENT&#x60; - This event type indicates that the driver has to take an action, e.g. turn left or right.    * &#x60;TOUR_EVENT&#x60; - This event type indicates that a tour information is available at this position.    * &#x60;TOLL_EVENT&#x60; - This event type indicates that a toll road is entered, exited or a toll booth is passed.    * &#x60;WAYPOINT_EVENT&#x60; - This event type indicates that a waypoint is reached by the route.    * &#x60;ROUTE_VIOLATION_EVENT&#x60; - This event type indicates that there is a route violation starting or ending at this position.    * &#x60;UTC_OFFSET_EVENT&#x60; - This event type indicates that the offset to UTC changes.    * &#x60;COUNTRY_EVENT&#x60; - This event type indicates that a border between countries or subdivisions is crossed, i.e. the country code changes.    * &#x60;COMBINED_TRANSPORT_EVENT&#x60; - This event type indicates that a combined transport is entered or exited.  Hint: Corresponding enum in xServer API documentation - com.ptvgroup.xserver.xroute.RouteEventType
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteEventType
{
    /**
     * Possible values of this enum
     */
    const MANEUVER_EVENT = 'MANEUVER_EVENT';
const TOUR_EVENT = 'TOUR_EVENT';
const TOLL_EVENT = 'TOLL_EVENT';
const WAYPOINT_EVENT = 'WAYPOINT_EVENT';
const ROUTE_VIOLATION_EVENT = 'ROUTE_VIOLATION_EVENT';
const UTC_OFFSET_EVENT = 'UTC_OFFSET_EVENT';
const COUNTRY_EVENT = 'COUNTRY_EVENT';
const COMBINED_TRANSPORT_EVENT = 'COMBINED_TRANSPORT_EVENT';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::MANEUVER_EVENT,
self::TOUR_EVENT,
self::TOLL_EVENT,
self::WAYPOINT_EVENT,
self::ROUTE_VIOLATION_EVENT,
self::UTC_OFFSET_EVENT,
self::COUNTRY_EVENT,
self::COMBINED_TRANSPORT_EVENT,        ];
    }
}
