<?php
/**
 * MapOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MapOptions Class Doc Comment
 *
 * @category Class
 * @description Configures further parameters of the map. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xmap.MapOptions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MapOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MapOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_consideration' => '\Swagger\Client\Model\TimeConsideration',
'content_snapshot_id' => 'string',
'show_only_relevant_by_time' => 'bool',
'layers' => 'string[]',
'preferred_route_types' => 'string[]',
'show_copyright' => 'bool',
'draw_icons' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_consideration' => null,
'content_snapshot_id' => null,
'show_only_relevant_by_time' => null,
'layers' => null,
'preferred_route_types' => null,
'show_copyright' => null,
'draw_icons' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_consideration' => 'timeConsideration',
'content_snapshot_id' => 'contentSnapshotId',
'show_only_relevant_by_time' => 'showOnlyRelevantByTime',
'layers' => 'layers',
'preferred_route_types' => 'preferredRouteTypes',
'show_copyright' => 'showCopyright',
'draw_icons' => 'drawIcons'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_consideration' => 'setTimeConsideration',
'content_snapshot_id' => 'setContentSnapshotId',
'show_only_relevant_by_time' => 'setShowOnlyRelevantByTime',
'layers' => 'setLayers',
'preferred_route_types' => 'setPreferredRouteTypes',
'show_copyright' => 'setShowCopyright',
'draw_icons' => 'setDrawIcons'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_consideration' => 'getTimeConsideration',
'content_snapshot_id' => 'getContentSnapshotId',
'show_only_relevant_by_time' => 'getShowOnlyRelevantByTime',
'layers' => 'getLayers',
'preferred_route_types' => 'getPreferredRouteTypes',
'show_copyright' => 'getShowCopyright',
'draw_icons' => 'getDrawIcons'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_consideration'] = isset($data['time_consideration']) ? $data['time_consideration'] : null;
        $this->container['content_snapshot_id'] = isset($data['content_snapshot_id']) ? $data['content_snapshot_id'] : null;
        $this->container['show_only_relevant_by_time'] = isset($data['show_only_relevant_by_time']) ? $data['show_only_relevant_by_time'] : null;
        $this->container['layers'] = isset($data['layers']) ? $data['layers'] : null;
        $this->container['preferred_route_types'] = isset($data['preferred_route_types']) ? $data['preferred_route_types'] : null;
        $this->container['show_copyright'] = isset($data['show_copyright']) ? $data['show_copyright'] : null;
        $this->container['draw_icons'] = isset($data['draw_icons']) ? $data['draw_icons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_consideration
     *
     * @return \Swagger\Client\Model\TimeConsideration
     */
    public function getTimeConsideration()
    {
        return $this->container['time_consideration'];
    }

    /**
     * Sets time_consideration
     *
     * @param \Swagger\Client\Model\TimeConsideration $time_consideration time_consideration
     *
     * @return $this
     */
    public function setTimeConsideration($time_consideration)
    {
        $this->container['time_consideration'] = $time_consideration;

        return $this;
    }

    /**
     * Gets content_snapshot_id
     *
     * @return string
     */
    public function getContentSnapshotId()
    {
        return $this->container['content_snapshot_id'];
    }

    /**
     * Sets content_snapshot_id
     *
     * @param string $content_snapshot_id Specifies the content snapshot to use. If no snapshot ID is set, the most recent content is used.
     *
     * @return $this
     */
    public function setContentSnapshotId($content_snapshot_id)
    {
        $this->container['content_snapshot_id'] = $content_snapshot_id;

        return $this;
    }

    /**
     * Gets show_only_relevant_by_time
     *
     * @return bool
     */
    public function getShowOnlyRelevantByTime()
    {
        return $this->container['show_only_relevant_by_time'];
    }

    /**
     * Sets show_only_relevant_by_time
     *
     * @param bool $show_only_relevant_by_time Specifies if the map show all attributes regardless of referenceTime (default), or only the attributes which are relevant for this referenceTime. For further details, see Relevance of Feature Layer attributes.
     *
     * @return $this
     */
    public function setShowOnlyRelevantByTime($show_only_relevant_by_time)
    {
        $this->container['show_only_relevant_by_time'] = $show_only_relevant_by_time;

        return $this;
    }

    /**
     * Gets layers
     *
     * @return string[]
     */
    public function getLayers()
    {
        return $this->container['layers'];
    }

    /**
     * Sets layers
     *
     * @param string[] $layers layers
     *
     * @return $this
     */
    public function setLayers($layers)
    {
        $this->container['layers'] = $layers;

        return $this;
    }

    /**
     * Gets preferred_route_types
     *
     * @return string[]
     */
    public function getPreferredRouteTypes()
    {
        return $this->container['preferred_route_types'];
    }

    /**
     * Sets preferred_route_types
     *
     * @param string[] $preferred_route_types preferred_route_types
     *
     * @return $this
     */
    public function setPreferredRouteTypes($preferred_route_types)
    {
        $this->container['preferred_route_types'] = $preferred_route_types;

        return $this;
    }

    /**
     * Gets show_copyright
     *
     * @return bool
     */
    public function getShowCopyright()
    {
        return $this->container['show_copyright'];
    }

    /**
     * Sets show_copyright
     *
     * @param bool $show_copyright If showCopyright is true then it shows the copyright text in the lower right corner of the image. If showCopyright is false then no copyright text is shown.
     *
     * @return $this
     */
    public function setShowCopyright($show_copyright)
    {
        $this->container['show_copyright'] = $show_copyright;

        return $this;
    }

    /**
     * Gets draw_icons
     *
     * @return bool
     */
    public function getDrawIcons()
    {
        return $this->container['draw_icons'];
    }

    /**
     * Sets draw_icons
     *
     * @param bool $draw_icons Specifies if the Feature Layer icons have to be drawn on the map.
     *
     * @return $this
     */
    public function setDrawIcons($draw_icons)
    {
        $this->container['draw_icons'] = $draw_icons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
