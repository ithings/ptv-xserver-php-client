<?php
/**
 * ReachableLocationsOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReachableLocationsOptions Class Doc Comment
 *
 * @category Class
 * @description Specifies the options of a reachability request. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.ReachableLocationsOptions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReachableLocationsOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReachableLocationsOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'horizon' => '\Swagger\Client\Model\Horizon',
'search_type' => '\Swagger\Client\Model\ReachableLocationsSearchType',
'time_consideration' => '\Swagger\Client\Model\TimeConsideration',
'content_snapshot_id' => 'string',
'geographic_restrictions' => '\Swagger\Client\Model\GeographicRestrictions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'horizon' => null,
'search_type' => null,
'time_consideration' => null,
'content_snapshot_id' => null,
'geographic_restrictions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'horizon' => 'horizon',
'search_type' => 'searchType',
'time_consideration' => 'timeConsideration',
'content_snapshot_id' => 'contentSnapshotId',
'geographic_restrictions' => 'geographicRestrictions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'horizon' => 'setHorizon',
'search_type' => 'setSearchType',
'time_consideration' => 'setTimeConsideration',
'content_snapshot_id' => 'setContentSnapshotId',
'geographic_restrictions' => 'setGeographicRestrictions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'horizon' => 'getHorizon',
'search_type' => 'getSearchType',
'time_consideration' => 'getTimeConsideration',
'content_snapshot_id' => 'getContentSnapshotId',
'geographic_restrictions' => 'getGeographicRestrictions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['horizon'] = isset($data['horizon']) ? $data['horizon'] : null;
        $this->container['search_type'] = isset($data['search_type']) ? $data['search_type'] : null;
        $this->container['time_consideration'] = isset($data['time_consideration']) ? $data['time_consideration'] : null;
        $this->container['content_snapshot_id'] = isset($data['content_snapshot_id']) ? $data['content_snapshot_id'] : null;
        $this->container['geographic_restrictions'] = isset($data['geographic_restrictions']) ? $data['geographic_restrictions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['horizon'] === null) {
            $invalidProperties[] = "'horizon' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets horizon
     *
     * @return \Swagger\Client\Model\Horizon
     */
    public function getHorizon()
    {
        return $this->container['horizon'];
    }

    /**
     * Sets horizon
     *
     * @param \Swagger\Client\Model\Horizon $horizon horizon
     *
     * @return $this
     */
    public function setHorizon($horizon)
    {
        $this->container['horizon'] = $horizon;

        return $this;
    }

    /**
     * Gets search_type
     *
     * @return \Swagger\Client\Model\ReachableLocationsSearchType
     */
    public function getSearchType()
    {
        return $this->container['search_type'];
    }

    /**
     * Sets search_type
     *
     * @param \Swagger\Client\Model\ReachableLocationsSearchType $search_type search_type
     *
     * @return $this
     */
    public function setSearchType($search_type)
    {
        $this->container['search_type'] = $search_type;

        return $this;
    }

    /**
     * Gets time_consideration
     *
     * @return \Swagger\Client\Model\TimeConsideration
     */
    public function getTimeConsideration()
    {
        return $this->container['time_consideration'];
    }

    /**
     * Sets time_consideration
     *
     * @param \Swagger\Client\Model\TimeConsideration $time_consideration time_consideration
     *
     * @return $this
     */
    public function setTimeConsideration($time_consideration)
    {
        $this->container['time_consideration'] = $time_consideration;

        return $this;
    }

    /**
     * Gets content_snapshot_id
     *
     * @return string
     */
    public function getContentSnapshotId()
    {
        return $this->container['content_snapshot_id'];
    }

    /**
     * Sets content_snapshot_id
     *
     * @param string $content_snapshot_id Specifies the content snapshot to use. If no snapshot ID is set, the latest content is used.
     *
     * @return $this
     */
    public function setContentSnapshotId($content_snapshot_id)
    {
        $this->container['content_snapshot_id'] = $content_snapshot_id;

        return $this;
    }

    /**
     * Gets geographic_restrictions
     *
     * @return \Swagger\Client\Model\GeographicRestrictions
     */
    public function getGeographicRestrictions()
    {
        return $this->container['geographic_restrictions'];
    }

    /**
     * Sets geographic_restrictions
     *
     * @param \Swagger\Client\Model\GeographicRestrictions $geographic_restrictions geographic_restrictions
     *
     * @return $this
     */
    public function setGeographicRestrictions($geographic_restrictions)
    {
        $this->container['geographic_restrictions'] = $geographic_restrictions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
