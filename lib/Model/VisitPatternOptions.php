<?php
/**
 * VisitPatternOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VisitPatternOptions Class Doc Comment
 *
 * @category Class
 * @description Represents visit pattern options for an order of the visit planning use case. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.VisitPatternOptions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VisitPatternOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VisitPatternOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visit_patterns' => '\Swagger\Client\Model\Week[]',
'flexible_choice_of_visit_patterns' => 'bool',
'maximum_number_of_visit_pattern_deviations' => '\Swagger\Client\Model\NonNegativeInteger',
'forbidden_visit_days' => '\DateTime[]',
'first_visit_day' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visit_patterns' => null,
'flexible_choice_of_visit_patterns' => null,
'maximum_number_of_visit_pattern_deviations' => null,
'forbidden_visit_days' => 'date',
'first_visit_day' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'visit_patterns' => 'visitPatterns',
'flexible_choice_of_visit_patterns' => 'flexibleChoiceOfVisitPatterns',
'maximum_number_of_visit_pattern_deviations' => 'maximumNumberOfVisitPatternDeviations',
'forbidden_visit_days' => 'forbiddenVisitDays',
'first_visit_day' => 'firstVisitDay'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'visit_patterns' => 'setVisitPatterns',
'flexible_choice_of_visit_patterns' => 'setFlexibleChoiceOfVisitPatterns',
'maximum_number_of_visit_pattern_deviations' => 'setMaximumNumberOfVisitPatternDeviations',
'forbidden_visit_days' => 'setForbiddenVisitDays',
'first_visit_day' => 'setFirstVisitDay'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'visit_patterns' => 'getVisitPatterns',
'flexible_choice_of_visit_patterns' => 'getFlexibleChoiceOfVisitPatterns',
'maximum_number_of_visit_pattern_deviations' => 'getMaximumNumberOfVisitPatternDeviations',
'forbidden_visit_days' => 'getForbiddenVisitDays',
'first_visit_day' => 'getFirstVisitDay'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visit_patterns'] = isset($data['visit_patterns']) ? $data['visit_patterns'] : null;
        $this->container['flexible_choice_of_visit_patterns'] = isset($data['flexible_choice_of_visit_patterns']) ? $data['flexible_choice_of_visit_patterns'] : null;
        $this->container['maximum_number_of_visit_pattern_deviations'] = isset($data['maximum_number_of_visit_pattern_deviations']) ? $data['maximum_number_of_visit_pattern_deviations'] : null;
        $this->container['forbidden_visit_days'] = isset($data['forbidden_visit_days']) ? $data['forbidden_visit_days'] : null;
        $this->container['first_visit_day'] = isset($data['first_visit_day']) ? $data['first_visit_day'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets visit_patterns
     *
     * @return \Swagger\Client\Model\Week[]
     */
    public function getVisitPatterns()
    {
        return $this->container['visit_patterns'];
    }

    /**
     * Sets visit_patterns
     *
     * @param \Swagger\Client\Model\Week[] $visit_patterns visit_patterns
     *
     * @return $this
     */
    public function setVisitPatterns($visit_patterns)
    {
        $this->container['visit_patterns'] = $visit_patterns;

        return $this;
    }

    /**
     * Gets flexible_choice_of_visit_patterns
     *
     * @return bool
     */
    public function getFlexibleChoiceOfVisitPatterns()
    {
        return $this->container['flexible_choice_of_visit_patterns'];
    }

    /**
     * Sets flexible_choice_of_visit_patterns
     *
     * @param bool $flexible_choice_of_visit_patterns Defines if an arbitrary visit pattern can be chosen for each week. If this parameter is set to true, the maximumNumberOfVisitPatternDeviations is ignored.
     *
     * @return $this
     */
    public function setFlexibleChoiceOfVisitPatterns($flexible_choice_of_visit_patterns)
    {
        $this->container['flexible_choice_of_visit_patterns'] = $flexible_choice_of_visit_patterns;

        return $this;
    }

    /**
     * Gets maximum_number_of_visit_pattern_deviations
     *
     * @return \Swagger\Client\Model\NonNegativeInteger
     */
    public function getMaximumNumberOfVisitPatternDeviations()
    {
        return $this->container['maximum_number_of_visit_pattern_deviations'];
    }

    /**
     * Sets maximum_number_of_visit_pattern_deviations
     *
     * @param \Swagger\Client\Model\NonNegativeInteger $maximum_number_of_visit_pattern_deviations maximum_number_of_visit_pattern_deviations
     *
     * @return $this
     */
    public function setMaximumNumberOfVisitPatternDeviations($maximum_number_of_visit_pattern_deviations)
    {
        $this->container['maximum_number_of_visit_pattern_deviations'] = $maximum_number_of_visit_pattern_deviations;

        return $this;
    }

    /**
     * Gets forbidden_visit_days
     *
     * @return \DateTime[]
     */
    public function getForbiddenVisitDays()
    {
        return $this->container['forbidden_visit_days'];
    }

    /**
     * Sets forbidden_visit_days
     *
     * @param \DateTime[] $forbidden_visit_days forbidden_visit_days
     *
     * @return $this
     */
    public function setForbiddenVisitDays($forbidden_visit_days)
    {
        $this->container['forbidden_visit_days'] = $forbidden_visit_days;

        return $this;
    }

    /**
     * Gets first_visit_day
     *
     * @return \DateTime
     */
    public function getFirstVisitDay()
    {
        return $this->container['first_visit_day'];
    }

    /**
     * Sets first_visit_day
     *
     * @param \DateTime $first_visit_day Fixes the first visit day for an order.
     *
     * @return $this
     */
    public function setFirstVisitDay($first_visit_day)
    {
        $this->container['first_visit_day'] = $first_visit_day;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
