<?php
/**
 * PlanToursRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * PlanToursRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PlanToursRequest extends RequestBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlanToursRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'locations' => '\Swagger\Client\Model\TourPlanningLocation[]',
'orders' => '\Swagger\Client\Model\Order[]',
'fleet' => '\Swagger\Client\Model\Fleet',
'input_plan' => '\Swagger\Client\Model\InputPlan',
'plan_tours_options' => '\Swagger\Client\Model\PlanToursOptions',
'distance_mode' => '\Swagger\Client\Model\DistanceMode',
'store_request' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'locations' => null,
'orders' => null,
'fleet' => null,
'input_plan' => null,
'plan_tours_options' => null,
'distance_mode' => null,
'store_request' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locations' => 'locations',
'orders' => 'orders',
'fleet' => 'fleet',
'input_plan' => 'inputPlan',
'plan_tours_options' => 'planToursOptions',
'distance_mode' => 'distanceMode',
'store_request' => 'storeRequest'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locations' => 'setLocations',
'orders' => 'setOrders',
'fleet' => 'setFleet',
'input_plan' => 'setInputPlan',
'plan_tours_options' => 'setPlanToursOptions',
'distance_mode' => 'setDistanceMode',
'store_request' => 'setStoreRequest'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locations' => 'getLocations',
'orders' => 'getOrders',
'fleet' => 'getFleet',
'input_plan' => 'getInputPlan',
'plan_tours_options' => 'getPlanToursOptions',
'distance_mode' => 'getDistanceMode',
'store_request' => 'getStoreRequest'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['fleet'] = isset($data['fleet']) ? $data['fleet'] : null;
        $this->container['input_plan'] = isset($data['input_plan']) ? $data['input_plan'] : null;
        $this->container['plan_tours_options'] = isset($data['plan_tours_options']) ? $data['plan_tours_options'] : null;
        $this->container['distance_mode'] = isset($data['distance_mode']) ? $data['distance_mode'] : null;
        $this->container['store_request'] = isset($data['store_request']) ? $data['store_request'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['fleet'] === null) {
            $invalidProperties[] = "'fleet' can't be null";
        }
        if ($this->container['distance_mode'] === null) {
            $invalidProperties[] = "'distance_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\TourPlanningLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\TourPlanningLocation[] $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \Swagger\Client\Model\Order[]
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \Swagger\Client\Model\Order[] $orders orders
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets fleet
     *
     * @return \Swagger\Client\Model\Fleet
     */
    public function getFleet()
    {
        return $this->container['fleet'];
    }

    /**
     * Sets fleet
     *
     * @param \Swagger\Client\Model\Fleet $fleet fleet
     *
     * @return $this
     */
    public function setFleet($fleet)
    {
        $this->container['fleet'] = $fleet;

        return $this;
    }

    /**
     * Gets input_plan
     *
     * @return \Swagger\Client\Model\InputPlan
     */
    public function getInputPlan()
    {
        return $this->container['input_plan'];
    }

    /**
     * Sets input_plan
     *
     * @param \Swagger\Client\Model\InputPlan $input_plan input_plan
     *
     * @return $this
     */
    public function setInputPlan($input_plan)
    {
        $this->container['input_plan'] = $input_plan;

        return $this;
    }

    /**
     * Gets plan_tours_options
     *
     * @return \Swagger\Client\Model\PlanToursOptions
     */
    public function getPlanToursOptions()
    {
        return $this->container['plan_tours_options'];
    }

    /**
     * Sets plan_tours_options
     *
     * @param \Swagger\Client\Model\PlanToursOptions $plan_tours_options plan_tours_options
     *
     * @return $this
     */
    public function setPlanToursOptions($plan_tours_options)
    {
        $this->container['plan_tours_options'] = $plan_tours_options;

        return $this;
    }

    /**
     * Gets distance_mode
     *
     * @return \Swagger\Client\Model\DistanceMode
     */
    public function getDistanceMode()
    {
        return $this->container['distance_mode'];
    }

    /**
     * Sets distance_mode
     *
     * @param \Swagger\Client\Model\DistanceMode $distance_mode distance_mode
     *
     * @return $this
     */
    public function setDistanceMode($distance_mode)
    {
        $this->container['distance_mode'] = $distance_mode;

        return $this;
    }

    /**
     * Gets store_request
     *
     * @return bool
     */
    public function getStoreRequest()
    {
        return $this->container['store_request'];
    }

    /**
     * Sets store_request
     *
     * @param bool $store_request Defines if the request should be stored in the session storage. Note that if there occur problems with the session storage, an ObjectNotStoredLimitation is generated and the stored request ID in the response is null.
     *
     * @return $this
     */
    public function setStoreRequest($store_request)
    {
        $this->container['store_request'] = $store_request;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
