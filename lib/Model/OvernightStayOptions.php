<?php
/**
 * OvernightStayOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OvernightStayOptions Class Doc Comment
 *
 * @category Class
 * @description Options influencing the choice of overnight stays in visit planning. This feature is only available for the Gurobi solver type. It can be enabled by allowing one or more overnights per week using maximumOvernightStaysPerWeek. This will implicitely enable determineShortestVisitSequencePerDay. Considering overnights will impact calculation time and can not be combined with improveDailyWorkloadBalance at this point in time. Per default, overnight stays are planned at the last visit location of a day. If workloadOptions are enabled, one can define hotels for potential overnight stays. See Plan Visits with Workload Options for details on overnight stays combined with enabled workloadOptions. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.OvernightStayOptions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OvernightStayOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OvernightStayOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'minimum_travel_time_to_field_worker_location' => '\Swagger\Client\Model\Duration',
'maximum_overnight_stays_per_week' => '\Swagger\Client\Model\NonNegativeInteger',
'forbidden_days' => '\DateTime[]',
'minimum_time_saving_per_overnight_stay' => '\Swagger\Client\Model\Duration',
'maximum_travel_time_between_days' => '\Swagger\Client\Model\Duration',
'hotel_stay_options' => '\Swagger\Client\Model\HotelStayOptions'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'minimum_travel_time_to_field_worker_location' => null,
'maximum_overnight_stays_per_week' => null,
'forbidden_days' => 'date',
'minimum_time_saving_per_overnight_stay' => null,
'maximum_travel_time_between_days' => null,
'hotel_stay_options' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'minimum_travel_time_to_field_worker_location' => 'minimumTravelTimeToFieldWorkerLocation',
'maximum_overnight_stays_per_week' => 'maximumOvernightStaysPerWeek',
'forbidden_days' => 'forbiddenDays',
'minimum_time_saving_per_overnight_stay' => 'minimumTimeSavingPerOvernightStay',
'maximum_travel_time_between_days' => 'maximumTravelTimeBetweenDays',
'hotel_stay_options' => 'hotelStayOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'minimum_travel_time_to_field_worker_location' => 'setMinimumTravelTimeToFieldWorkerLocation',
'maximum_overnight_stays_per_week' => 'setMaximumOvernightStaysPerWeek',
'forbidden_days' => 'setForbiddenDays',
'minimum_time_saving_per_overnight_stay' => 'setMinimumTimeSavingPerOvernightStay',
'maximum_travel_time_between_days' => 'setMaximumTravelTimeBetweenDays',
'hotel_stay_options' => 'setHotelStayOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'minimum_travel_time_to_field_worker_location' => 'getMinimumTravelTimeToFieldWorkerLocation',
'maximum_overnight_stays_per_week' => 'getMaximumOvernightStaysPerWeek',
'forbidden_days' => 'getForbiddenDays',
'minimum_time_saving_per_overnight_stay' => 'getMinimumTimeSavingPerOvernightStay',
'maximum_travel_time_between_days' => 'getMaximumTravelTimeBetweenDays',
'hotel_stay_options' => 'getHotelStayOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['minimum_travel_time_to_field_worker_location'] = isset($data['minimum_travel_time_to_field_worker_location']) ? $data['minimum_travel_time_to_field_worker_location'] : null;
        $this->container['maximum_overnight_stays_per_week'] = isset($data['maximum_overnight_stays_per_week']) ? $data['maximum_overnight_stays_per_week'] : null;
        $this->container['forbidden_days'] = isset($data['forbidden_days']) ? $data['forbidden_days'] : null;
        $this->container['minimum_time_saving_per_overnight_stay'] = isset($data['minimum_time_saving_per_overnight_stay']) ? $data['minimum_time_saving_per_overnight_stay'] : null;
        $this->container['maximum_travel_time_between_days'] = isset($data['maximum_travel_time_between_days']) ? $data['maximum_travel_time_between_days'] : null;
        $this->container['hotel_stay_options'] = isset($data['hotel_stay_options']) ? $data['hotel_stay_options'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets minimum_travel_time_to_field_worker_location
     *
     * @return \Swagger\Client\Model\Duration
     */
    public function getMinimumTravelTimeToFieldWorkerLocation()
    {
        return $this->container['minimum_travel_time_to_field_worker_location'];
    }

    /**
     * Sets minimum_travel_time_to_field_worker_location
     *
     * @param \Swagger\Client\Model\Duration $minimum_travel_time_to_field_worker_location minimum_travel_time_to_field_worker_location
     *
     * @return $this
     */
    public function setMinimumTravelTimeToFieldWorkerLocation($minimum_travel_time_to_field_worker_location)
    {
        $this->container['minimum_travel_time_to_field_worker_location'] = $minimum_travel_time_to_field_worker_location;

        return $this;
    }

    /**
     * Gets maximum_overnight_stays_per_week
     *
     * @return \Swagger\Client\Model\NonNegativeInteger
     */
    public function getMaximumOvernightStaysPerWeek()
    {
        return $this->container['maximum_overnight_stays_per_week'];
    }

    /**
     * Sets maximum_overnight_stays_per_week
     *
     * @param \Swagger\Client\Model\NonNegativeInteger $maximum_overnight_stays_per_week maximum_overnight_stays_per_week
     *
     * @return $this
     */
    public function setMaximumOvernightStaysPerWeek($maximum_overnight_stays_per_week)
    {
        $this->container['maximum_overnight_stays_per_week'] = $maximum_overnight_stays_per_week;

        return $this;
    }

    /**
     * Gets forbidden_days
     *
     * @return \DateTime[]
     */
    public function getForbiddenDays()
    {
        return $this->container['forbidden_days'];
    }

    /**
     * Sets forbidden_days
     *
     * @param \DateTime[] $forbidden_days forbidden_days
     *
     * @return $this
     */
    public function setForbiddenDays($forbidden_days)
    {
        $this->container['forbidden_days'] = $forbidden_days;

        return $this;
    }

    /**
     * Gets minimum_time_saving_per_overnight_stay
     *
     * @return \Swagger\Client\Model\Duration
     */
    public function getMinimumTimeSavingPerOvernightStay()
    {
        return $this->container['minimum_time_saving_per_overnight_stay'];
    }

    /**
     * Sets minimum_time_saving_per_overnight_stay
     *
     * @param \Swagger\Client\Model\Duration $minimum_time_saving_per_overnight_stay minimum_time_saving_per_overnight_stay
     *
     * @return $this
     */
    public function setMinimumTimeSavingPerOvernightStay($minimum_time_saving_per_overnight_stay)
    {
        $this->container['minimum_time_saving_per_overnight_stay'] = $minimum_time_saving_per_overnight_stay;

        return $this;
    }

    /**
     * Gets maximum_travel_time_between_days
     *
     * @return \Swagger\Client\Model\Duration
     */
    public function getMaximumTravelTimeBetweenDays()
    {
        return $this->container['maximum_travel_time_between_days'];
    }

    /**
     * Sets maximum_travel_time_between_days
     *
     * @param \Swagger\Client\Model\Duration $maximum_travel_time_between_days maximum_travel_time_between_days
     *
     * @return $this
     */
    public function setMaximumTravelTimeBetweenDays($maximum_travel_time_between_days)
    {
        $this->container['maximum_travel_time_between_days'] = $maximum_travel_time_between_days;

        return $this;
    }

    /**
     * Gets hotel_stay_options
     *
     * @return \Swagger\Client\Model\HotelStayOptions
     */
    public function getHotelStayOptions()
    {
        return $this->container['hotel_stay_options'];
    }

    /**
     * Sets hotel_stay_options
     *
     * @param \Swagger\Client\Model\HotelStayOptions $hotel_stay_options hotel_stay_options
     *
     * @return $this
     */
    public function setHotelStayOptions($hotel_stay_options)
    {
        $this->container['hotel_stay_options'] = $hotel_stay_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
