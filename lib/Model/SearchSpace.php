<?php
/**
 * SearchSpace
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SearchSpace Class Doc Comment
 *
 * @category Class
 * @description Defines the behavior of heuristics for search space reduction. The search space is the part of the routing graph that is explored to answer a route request and thus has a direct impact on the routing performance and quality. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.routingprofile.SearchSpace
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchSpace implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchSpace';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exclude_by_network_class' => '\Swagger\Client\Model\ExcludeByNetworkClass',
'heuristic_aggressiveness' => '\Swagger\Client\Model\Percent'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exclude_by_network_class' => null,
'heuristic_aggressiveness' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exclude_by_network_class' => 'excludeByNetworkClass',
'heuristic_aggressiveness' => 'heuristicAggressiveness'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exclude_by_network_class' => 'setExcludeByNetworkClass',
'heuristic_aggressiveness' => 'setHeuristicAggressiveness'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exclude_by_network_class' => 'getExcludeByNetworkClass',
'heuristic_aggressiveness' => 'getHeuristicAggressiveness'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exclude_by_network_class'] = isset($data['exclude_by_network_class']) ? $data['exclude_by_network_class'] : null;
        $this->container['heuristic_aggressiveness'] = isset($data['heuristic_aggressiveness']) ? $data['heuristic_aggressiveness'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets exclude_by_network_class
     *
     * @return \Swagger\Client\Model\ExcludeByNetworkClass
     */
    public function getExcludeByNetworkClass()
    {
        return $this->container['exclude_by_network_class'];
    }

    /**
     * Sets exclude_by_network_class
     *
     * @param \Swagger\Client\Model\ExcludeByNetworkClass $exclude_by_network_class exclude_by_network_class
     *
     * @return $this
     */
    public function setExcludeByNetworkClass($exclude_by_network_class)
    {
        $this->container['exclude_by_network_class'] = $exclude_by_network_class;

        return $this;
    }

    /**
     * Gets heuristic_aggressiveness
     *
     * @return \Swagger\Client\Model\Percent
     */
    public function getHeuristicAggressiveness()
    {
        return $this->container['heuristic_aggressiveness'];
    }

    /**
     * Sets heuristic_aggressiveness
     *
     * @param \Swagger\Client\Model\Percent $heuristic_aggressiveness heuristic_aggressiveness
     *
     * @return $this
     */
    public function setHeuristicAggressiveness($heuristic_aggressiveness)
    {
        $this->container['heuristic_aggressiveness'] = $heuristic_aggressiveness;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
