<?php
/**
 * ClusterReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClusterReport Class Doc Comment
 *
 * @category Class
 * @description Represents the summary of a cluster which was planned. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.ClusterReport
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClusterReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClusterReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cluster_id' => 'string',
'total_activity' => 'double',
'number_of_locations' => '\Swagger\Client\Model\NonNegativeInteger',
'estimated_travel_time_to_cluster' => '\Swagger\Client\Model\Duration'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cluster_id' => null,
'total_activity' => 'double',
'number_of_locations' => null,
'estimated_travel_time_to_cluster' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cluster_id' => 'clusterId',
'total_activity' => 'totalActivity',
'number_of_locations' => 'numberOfLocations',
'estimated_travel_time_to_cluster' => 'estimatedTravelTimeToCluster'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cluster_id' => 'setClusterId',
'total_activity' => 'setTotalActivity',
'number_of_locations' => 'setNumberOfLocations',
'estimated_travel_time_to_cluster' => 'setEstimatedTravelTimeToCluster'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cluster_id' => 'getClusterId',
'total_activity' => 'getTotalActivity',
'number_of_locations' => 'getNumberOfLocations',
'estimated_travel_time_to_cluster' => 'getEstimatedTravelTimeToCluster'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cluster_id'] = isset($data['cluster_id']) ? $data['cluster_id'] : null;
        $this->container['total_activity'] = isset($data['total_activity']) ? $data['total_activity'] : null;
        $this->container['number_of_locations'] = isset($data['number_of_locations']) ? $data['number_of_locations'] : null;
        $this->container['estimated_travel_time_to_cluster'] = isset($data['estimated_travel_time_to_cluster']) ? $data['estimated_travel_time_to_cluster'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cluster_id'] === null) {
            $invalidProperties[] = "'cluster_id' can't be null";
        }
        if ($this->container['total_activity'] === null) {
            $invalidProperties[] = "'total_activity' can't be null";
        }
        if ($this->container['number_of_locations'] === null) {
            $invalidProperties[] = "'number_of_locations' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cluster_id
     *
     * @return string
     */
    public function getClusterId()
    {
        return $this->container['cluster_id'];
    }

    /**
     * Sets cluster_id
     *
     * @param string $cluster_id The ID of the cluster that is described by this report.
     *
     * @return $this
     */
    public function setClusterId($cluster_id)
    {
        $this->container['cluster_id'] = $cluster_id;

        return $this;
    }

    /**
     * Gets total_activity
     *
     * @return double
     */
    public function getTotalActivity()
    {
        return $this->container['total_activity'];
    }

    /**
     * Sets total_activity
     *
     * @param double $total_activity The total amount of activity of the locations assigned to this cluster. If considerActivitiesAsServiceTimes is enabled in the request, the value of totalActivity represents the estimated tour duration for the current cluster.
     *
     * @return $this
     */
    public function setTotalActivity($total_activity)
    {
        $this->container['total_activity'] = $total_activity;

        return $this;
    }

    /**
     * Gets number_of_locations
     *
     * @return \Swagger\Client\Model\NonNegativeInteger
     */
    public function getNumberOfLocations()
    {
        return $this->container['number_of_locations'];
    }

    /**
     * Sets number_of_locations
     *
     * @param \Swagger\Client\Model\NonNegativeInteger $number_of_locations number_of_locations
     *
     * @return $this
     */
    public function setNumberOfLocations($number_of_locations)
    {
        $this->container['number_of_locations'] = $number_of_locations;

        return $this;
    }

    /**
     * Gets estimated_travel_time_to_cluster
     *
     * @return \Swagger\Client\Model\Duration
     */
    public function getEstimatedTravelTimeToCluster()
    {
        return $this->container['estimated_travel_time_to_cluster'];
    }

    /**
     * Sets estimated_travel_time_to_cluster
     *
     * @param \Swagger\Client\Model\Duration $estimated_travel_time_to_cluster estimated_travel_time_to_cluster
     *
     * @return $this
     */
    public function setEstimatedTravelTimeToCluster($estimated_travel_time_to_cluster)
    {
        $this->container['estimated_travel_time_to_cluster'] = $estimated_travel_time_to_cluster;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
