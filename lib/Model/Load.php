<?php
/**
 * Load
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Load Class Doc Comment
 *
 * @category Class
 * @description Defines the current load of the vehicle Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.vehicleprofile.Load
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Load implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Load';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hazardous_goods_types' => '\Swagger\Client\Model\CommaSeparatedList',
'load_type' => '\Swagger\Client\Model\LoadType',
'tunnel_restriction_code' => '\Swagger\Client\Model\TunnelRestrictionCode'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hazardous_goods_types' => null,
'load_type' => null,
'tunnel_restriction_code' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hazardous_goods_types' => 'hazardousGoodsTypes',
'load_type' => 'loadType',
'tunnel_restriction_code' => 'tunnelRestrictionCode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hazardous_goods_types' => 'setHazardousGoodsTypes',
'load_type' => 'setLoadType',
'tunnel_restriction_code' => 'setTunnelRestrictionCode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hazardous_goods_types' => 'getHazardousGoodsTypes',
'load_type' => 'getLoadType',
'tunnel_restriction_code' => 'getTunnelRestrictionCode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hazardous_goods_types'] = isset($data['hazardous_goods_types']) ? $data['hazardous_goods_types'] : null;
        $this->container['load_type'] = isset($data['load_type']) ? $data['load_type'] : null;
        $this->container['tunnel_restriction_code'] = isset($data['tunnel_restriction_code']) ? $data['tunnel_restriction_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hazardous_goods_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getHazardousGoodsTypes()
    {
        return $this->container['hazardous_goods_types'];
    }

    /**
     * Sets hazardous_goods_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $hazardous_goods_types hazardous_goods_types
     *
     * @return $this
     */
    public function setHazardousGoodsTypes($hazardous_goods_types)
    {
        $this->container['hazardous_goods_types'] = $hazardous_goods_types;

        return $this;
    }

    /**
     * Gets load_type
     *
     * @return \Swagger\Client\Model\LoadType
     */
    public function getLoadType()
    {
        return $this->container['load_type'];
    }

    /**
     * Sets load_type
     *
     * @param \Swagger\Client\Model\LoadType $load_type load_type
     *
     * @return $this
     */
    public function setLoadType($load_type)
    {
        $this->container['load_type'] = $load_type;

        return $this;
    }

    /**
     * Gets tunnel_restriction_code
     *
     * @return \Swagger\Client\Model\TunnelRestrictionCode
     */
    public function getTunnelRestrictionCode()
    {
        return $this->container['tunnel_restriction_code'];
    }

    /**
     * Sets tunnel_restriction_code
     *
     * @param \Swagger\Client\Model\TunnelRestrictionCode $tunnel_restriction_code tunnel_restriction_code
     *
     * @return $this
     */
    public function setTunnelRestrictionCode($tunnel_restriction_code)
    {
        $this->container['tunnel_restriction_code'] = $tunnel_restriction_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
