<?php
/**
 * DistanceMatrixSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DistanceMatrixSummary Class Doc Comment
 *
 * @category Class
 * @description Represents the meta information of a distance matrix. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.dima.DistanceMatrixSummary
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DistanceMatrixSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DistanceMatrixSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'number_of_start_locations' => '\Swagger\Client\Model\PositiveInteger',
'number_of_destination_locations' => '\Swagger\Client\Model\PositiveInteger',
'percentage_of_direct_distance_relations' => '\Swagger\Client\Model\Percent',
'routing_type' => '\Swagger\Client\Model\RoutingType',
'label' => '\Swagger\Client\Model\UserDefinedName'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'number_of_start_locations' => null,
'number_of_destination_locations' => null,
'percentage_of_direct_distance_relations' => null,
'routing_type' => null,
'label' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'number_of_start_locations' => 'numberOfStartLocations',
'number_of_destination_locations' => 'numberOfDestinationLocations',
'percentage_of_direct_distance_relations' => 'percentageOfDirectDistanceRelations',
'routing_type' => 'routingType',
'label' => 'label'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'number_of_start_locations' => 'setNumberOfStartLocations',
'number_of_destination_locations' => 'setNumberOfDestinationLocations',
'percentage_of_direct_distance_relations' => 'setPercentageOfDirectDistanceRelations',
'routing_type' => 'setRoutingType',
'label' => 'setLabel'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'number_of_start_locations' => 'getNumberOfStartLocations',
'number_of_destination_locations' => 'getNumberOfDestinationLocations',
'percentage_of_direct_distance_relations' => 'getPercentageOfDirectDistanceRelations',
'routing_type' => 'getRoutingType',
'label' => 'getLabel'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number_of_start_locations'] = isset($data['number_of_start_locations']) ? $data['number_of_start_locations'] : null;
        $this->container['number_of_destination_locations'] = isset($data['number_of_destination_locations']) ? $data['number_of_destination_locations'] : null;
        $this->container['percentage_of_direct_distance_relations'] = isset($data['percentage_of_direct_distance_relations']) ? $data['percentage_of_direct_distance_relations'] : null;
        $this->container['routing_type'] = isset($data['routing_type']) ? $data['routing_type'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['number_of_start_locations'] === null) {
            $invalidProperties[] = "'number_of_start_locations' can't be null";
        }
        if ($this->container['number_of_destination_locations'] === null) {
            $invalidProperties[] = "'number_of_destination_locations' can't be null";
        }
        if ($this->container['percentage_of_direct_distance_relations'] === null) {
            $invalidProperties[] = "'percentage_of_direct_distance_relations' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The ID of the distance matrix which is generated when the distance matrix is created. Use this ID to reference the matrix for further use.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number_of_start_locations
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfStartLocations()
    {
        return $this->container['number_of_start_locations'];
    }

    /**
     * Sets number_of_start_locations
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_start_locations number_of_start_locations
     *
     * @return $this
     */
    public function setNumberOfStartLocations($number_of_start_locations)
    {
        $this->container['number_of_start_locations'] = $number_of_start_locations;

        return $this;
    }

    /**
     * Gets number_of_destination_locations
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfDestinationLocations()
    {
        return $this->container['number_of_destination_locations'];
    }

    /**
     * Sets number_of_destination_locations
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_destination_locations number_of_destination_locations
     *
     * @return $this
     */
    public function setNumberOfDestinationLocations($number_of_destination_locations)
    {
        $this->container['number_of_destination_locations'] = $number_of_destination_locations;

        return $this;
    }

    /**
     * Gets percentage_of_direct_distance_relations
     *
     * @return \Swagger\Client\Model\Percent
     */
    public function getPercentageOfDirectDistanceRelations()
    {
        return $this->container['percentage_of_direct_distance_relations'];
    }

    /**
     * Sets percentage_of_direct_distance_relations
     *
     * @param \Swagger\Client\Model\Percent $percentage_of_direct_distance_relations percentage_of_direct_distance_relations
     *
     * @return $this
     */
    public function setPercentageOfDirectDistanceRelations($percentage_of_direct_distance_relations)
    {
        $this->container['percentage_of_direct_distance_relations'] = $percentage_of_direct_distance_relations;

        return $this;
    }

    /**
     * Gets routing_type
     *
     * @return \Swagger\Client\Model\RoutingType
     */
    public function getRoutingType()
    {
        return $this->container['routing_type'];
    }

    /**
     * Sets routing_type
     *
     * @param \Swagger\Client\Model\RoutingType $routing_type routing_type
     *
     * @return $this
     */
    public function setRoutingType($routing_type)
    {
        $this->container['routing_type'] = $routing_type;

        return $this;
    }

    /**
     * Gets label
     *
     * @return \Swagger\Client\Model\UserDefinedName
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param \Swagger\Client\Model\UserDefinedName $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
