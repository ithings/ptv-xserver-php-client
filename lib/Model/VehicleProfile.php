<?php
/**
 * VehicleProfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VehicleProfile Class Doc Comment
 *
 * @category Class
 * @description Defines the vehicle to be used which activates rules of different algorithms. Please note that all values apply to the complete vehicle including trailers. Note that the results may be incorrect because the legal definition of a vehicle type may differ from country to country and it may also differ from the technical definition. As an example, a truck with a weight of 7.5 tons is a truck by legal definition in Germany but is not a truck by definition of toll. Most parameters are used for several use cases. They are denoted with (1) for routing, (2) for toll, (3) for emission calculation, (4) for truck attributes, and (5) for preferred routes. Give as many details on the vehicle as possible in order to obtain the best result. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.vehicleprofile.VehicleProfile
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VehicleProfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VehicleProfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'engine' => '\Swagger\Client\Model\Engine',
'weight' => '\Swagger\Client\Model\Weight',
'dimensions' => '\Swagger\Client\Model\Dimensions',
'axle' => '\Swagger\Client\Model\Axle',
'legal_condition' => '\Swagger\Client\Model\LegalCondition',
'load' => '\Swagger\Client\Model\Load',
'speeds' => '\Swagger\Client\Model\Speeds',
'drive_type' => '\Swagger\Client\Model\DriveType',
'year_of_manufacture' => '\Swagger\Client\Model\PositiveInteger',
'number_of_passengers' => '\Swagger\Client\Model\PositiveInteger',
'number_of_trailers' => '\Swagger\Client\Model\NonNegativeInteger',
'preferred_route_types' => '\Swagger\Client\Model\CommaSeparatedList',
'unrestricted_route_types' => '\Swagger\Client\Model\CommaSeparatedList',
'restricted_route_types' => '\Swagger\Client\Model\CommaSeparatedList',
'highly_restricted_route_types' => '\Swagger\Client\Model\CommaSeparatedList',
'prohibited_route_types' => '\Swagger\Client\Model\CommaSeparatedList',
'electronic_toll_collection_subscriptions' => '\Swagger\Client\Model\CommaSeparatedList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'engine' => null,
'weight' => null,
'dimensions' => null,
'axle' => null,
'legal_condition' => null,
'load' => null,
'speeds' => null,
'drive_type' => null,
'year_of_manufacture' => null,
'number_of_passengers' => null,
'number_of_trailers' => null,
'preferred_route_types' => null,
'unrestricted_route_types' => null,
'restricted_route_types' => null,
'highly_restricted_route_types' => null,
'prohibited_route_types' => null,
'electronic_toll_collection_subscriptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'engine' => 'engine',
'weight' => 'weight',
'dimensions' => 'dimensions',
'axle' => 'axle',
'legal_condition' => 'legalCondition',
'load' => 'load',
'speeds' => 'speeds',
'drive_type' => 'driveType',
'year_of_manufacture' => 'yearOfManufacture',
'number_of_passengers' => 'numberOfPassengers',
'number_of_trailers' => 'numberOfTrailers',
'preferred_route_types' => 'preferredRouteTypes',
'unrestricted_route_types' => 'unrestrictedRouteTypes',
'restricted_route_types' => 'restrictedRouteTypes',
'highly_restricted_route_types' => 'highlyRestrictedRouteTypes',
'prohibited_route_types' => 'prohibitedRouteTypes',
'electronic_toll_collection_subscriptions' => 'electronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'engine' => 'setEngine',
'weight' => 'setWeight',
'dimensions' => 'setDimensions',
'axle' => 'setAxle',
'legal_condition' => 'setLegalCondition',
'load' => 'setLoad',
'speeds' => 'setSpeeds',
'drive_type' => 'setDriveType',
'year_of_manufacture' => 'setYearOfManufacture',
'number_of_passengers' => 'setNumberOfPassengers',
'number_of_trailers' => 'setNumberOfTrailers',
'preferred_route_types' => 'setPreferredRouteTypes',
'unrestricted_route_types' => 'setUnrestrictedRouteTypes',
'restricted_route_types' => 'setRestrictedRouteTypes',
'highly_restricted_route_types' => 'setHighlyRestrictedRouteTypes',
'prohibited_route_types' => 'setProhibitedRouteTypes',
'electronic_toll_collection_subscriptions' => 'setElectronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'engine' => 'getEngine',
'weight' => 'getWeight',
'dimensions' => 'getDimensions',
'axle' => 'getAxle',
'legal_condition' => 'getLegalCondition',
'load' => 'getLoad',
'speeds' => 'getSpeeds',
'drive_type' => 'getDriveType',
'year_of_manufacture' => 'getYearOfManufacture',
'number_of_passengers' => 'getNumberOfPassengers',
'number_of_trailers' => 'getNumberOfTrailers',
'preferred_route_types' => 'getPreferredRouteTypes',
'unrestricted_route_types' => 'getUnrestrictedRouteTypes',
'restricted_route_types' => 'getRestrictedRouteTypes',
'highly_restricted_route_types' => 'getHighlyRestrictedRouteTypes',
'prohibited_route_types' => 'getProhibitedRouteTypes',
'electronic_toll_collection_subscriptions' => 'getElectronicTollCollectionSubscriptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['axle'] = isset($data['axle']) ? $data['axle'] : null;
        $this->container['legal_condition'] = isset($data['legal_condition']) ? $data['legal_condition'] : null;
        $this->container['load'] = isset($data['load']) ? $data['load'] : null;
        $this->container['speeds'] = isset($data['speeds']) ? $data['speeds'] : null;
        $this->container['drive_type'] = isset($data['drive_type']) ? $data['drive_type'] : null;
        $this->container['year_of_manufacture'] = isset($data['year_of_manufacture']) ? $data['year_of_manufacture'] : null;
        $this->container['number_of_passengers'] = isset($data['number_of_passengers']) ? $data['number_of_passengers'] : null;
        $this->container['number_of_trailers'] = isset($data['number_of_trailers']) ? $data['number_of_trailers'] : null;
        $this->container['preferred_route_types'] = isset($data['preferred_route_types']) ? $data['preferred_route_types'] : null;
        $this->container['unrestricted_route_types'] = isset($data['unrestricted_route_types']) ? $data['unrestricted_route_types'] : null;
        $this->container['restricted_route_types'] = isset($data['restricted_route_types']) ? $data['restricted_route_types'] : null;
        $this->container['highly_restricted_route_types'] = isset($data['highly_restricted_route_types']) ? $data['highly_restricted_route_types'] : null;
        $this->container['prohibited_route_types'] = isset($data['prohibited_route_types']) ? $data['prohibited_route_types'] : null;
        $this->container['electronic_toll_collection_subscriptions'] = isset($data['electronic_toll_collection_subscriptions']) ? $data['electronic_toll_collection_subscriptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets engine
     *
     * @return \Swagger\Client\Model\Engine
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param \Swagger\Client\Model\Engine $engine engine
     *
     * @return $this
     */
    public function setEngine($engine)
    {
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Swagger\Client\Model\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Swagger\Client\Model\Weight $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Swagger\Client\Model\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Swagger\Client\Model\Dimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets axle
     *
     * @return \Swagger\Client\Model\Axle
     */
    public function getAxle()
    {
        return $this->container['axle'];
    }

    /**
     * Sets axle
     *
     * @param \Swagger\Client\Model\Axle $axle axle
     *
     * @return $this
     */
    public function setAxle($axle)
    {
        $this->container['axle'] = $axle;

        return $this;
    }

    /**
     * Gets legal_condition
     *
     * @return \Swagger\Client\Model\LegalCondition
     */
    public function getLegalCondition()
    {
        return $this->container['legal_condition'];
    }

    /**
     * Sets legal_condition
     *
     * @param \Swagger\Client\Model\LegalCondition $legal_condition legal_condition
     *
     * @return $this
     */
    public function setLegalCondition($legal_condition)
    {
        $this->container['legal_condition'] = $legal_condition;

        return $this;
    }

    /**
     * Gets load
     *
     * @return \Swagger\Client\Model\Load
     */
    public function getLoad()
    {
        return $this->container['load'];
    }

    /**
     * Sets load
     *
     * @param \Swagger\Client\Model\Load $load load
     *
     * @return $this
     */
    public function setLoad($load)
    {
        $this->container['load'] = $load;

        return $this;
    }

    /**
     * Gets speeds
     *
     * @return \Swagger\Client\Model\Speeds
     */
    public function getSpeeds()
    {
        return $this->container['speeds'];
    }

    /**
     * Sets speeds
     *
     * @param \Swagger\Client\Model\Speeds $speeds speeds
     *
     * @return $this
     */
    public function setSpeeds($speeds)
    {
        $this->container['speeds'] = $speeds;

        return $this;
    }

    /**
     * Gets drive_type
     *
     * @return \Swagger\Client\Model\DriveType
     */
    public function getDriveType()
    {
        return $this->container['drive_type'];
    }

    /**
     * Sets drive_type
     *
     * @param \Swagger\Client\Model\DriveType $drive_type drive_type
     *
     * @return $this
     */
    public function setDriveType($drive_type)
    {
        $this->container['drive_type'] = $drive_type;

        return $this;
    }

    /**
     * Gets year_of_manufacture
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getYearOfManufacture()
    {
        return $this->container['year_of_manufacture'];
    }

    /**
     * Sets year_of_manufacture
     *
     * @param \Swagger\Client\Model\PositiveInteger $year_of_manufacture year_of_manufacture
     *
     * @return $this
     */
    public function setYearOfManufacture($year_of_manufacture)
    {
        $this->container['year_of_manufacture'] = $year_of_manufacture;

        return $this;
    }

    /**
     * Gets number_of_passengers
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfPassengers()
    {
        return $this->container['number_of_passengers'];
    }

    /**
     * Sets number_of_passengers
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_passengers number_of_passengers
     *
     * @return $this
     */
    public function setNumberOfPassengers($number_of_passengers)
    {
        $this->container['number_of_passengers'] = $number_of_passengers;

        return $this;
    }

    /**
     * Gets number_of_trailers
     *
     * @return \Swagger\Client\Model\NonNegativeInteger
     */
    public function getNumberOfTrailers()
    {
        return $this->container['number_of_trailers'];
    }

    /**
     * Sets number_of_trailers
     *
     * @param \Swagger\Client\Model\NonNegativeInteger $number_of_trailers number_of_trailers
     *
     * @return $this
     */
    public function setNumberOfTrailers($number_of_trailers)
    {
        $this->container['number_of_trailers'] = $number_of_trailers;

        return $this;
    }

    /**
     * Gets preferred_route_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getPreferredRouteTypes()
    {
        return $this->container['preferred_route_types'];
    }

    /**
     * Sets preferred_route_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $preferred_route_types preferred_route_types
     *
     * @return $this
     */
    public function setPreferredRouteTypes($preferred_route_types)
    {
        $this->container['preferred_route_types'] = $preferred_route_types;

        return $this;
    }

    /**
     * Gets unrestricted_route_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getUnrestrictedRouteTypes()
    {
        return $this->container['unrestricted_route_types'];
    }

    /**
     * Sets unrestricted_route_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $unrestricted_route_types unrestricted_route_types
     *
     * @return $this
     */
    public function setUnrestrictedRouteTypes($unrestricted_route_types)
    {
        $this->container['unrestricted_route_types'] = $unrestricted_route_types;

        return $this;
    }

    /**
     * Gets restricted_route_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getRestrictedRouteTypes()
    {
        return $this->container['restricted_route_types'];
    }

    /**
     * Sets restricted_route_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $restricted_route_types restricted_route_types
     *
     * @return $this
     */
    public function setRestrictedRouteTypes($restricted_route_types)
    {
        $this->container['restricted_route_types'] = $restricted_route_types;

        return $this;
    }

    /**
     * Gets highly_restricted_route_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getHighlyRestrictedRouteTypes()
    {
        return $this->container['highly_restricted_route_types'];
    }

    /**
     * Sets highly_restricted_route_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $highly_restricted_route_types highly_restricted_route_types
     *
     * @return $this
     */
    public function setHighlyRestrictedRouteTypes($highly_restricted_route_types)
    {
        $this->container['highly_restricted_route_types'] = $highly_restricted_route_types;

        return $this;
    }

    /**
     * Gets prohibited_route_types
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getProhibitedRouteTypes()
    {
        return $this->container['prohibited_route_types'];
    }

    /**
     * Sets prohibited_route_types
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $prohibited_route_types prohibited_route_types
     *
     * @return $this
     */
    public function setProhibitedRouteTypes($prohibited_route_types)
    {
        $this->container['prohibited_route_types'] = $prohibited_route_types;

        return $this;
    }

    /**
     * Gets electronic_toll_collection_subscriptions
     *
     * @return \Swagger\Client\Model\CommaSeparatedList
     */
    public function getElectronicTollCollectionSubscriptions()
    {
        return $this->container['electronic_toll_collection_subscriptions'];
    }

    /**
     * Sets electronic_toll_collection_subscriptions
     *
     * @param \Swagger\Client\Model\CommaSeparatedList $electronic_toll_collection_subscriptions electronic_toll_collection_subscriptions
     *
     * @return $this
     */
    public function setElectronicTollCollectionSubscriptions($electronic_toll_collection_subscriptions)
    {
        $this->container['electronic_toll_collection_subscriptions'] = $electronic_toll_collection_subscriptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
