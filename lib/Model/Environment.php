<?php
/**
 * Environment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Environment Class Doc Comment
 *
 * @category Class
 * @description Information about the server&#x27;s runtime environment. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xruntime.Environment
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Environment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Environment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'operating_system' => 'string',
'cpu_architecture' => 'string',
'number_of_processors' => '\Swagger\Client\Model\PositiveInteger',
'host_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'operating_system' => null,
'cpu_architecture' => null,
'number_of_processors' => null,
'host_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'operating_system' => 'operatingSystem',
'cpu_architecture' => 'cpuArchitecture',
'number_of_processors' => 'numberOfProcessors',
'host_name' => 'hostName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'operating_system' => 'setOperatingSystem',
'cpu_architecture' => 'setCpuArchitecture',
'number_of_processors' => 'setNumberOfProcessors',
'host_name' => 'setHostName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'operating_system' => 'getOperatingSystem',
'cpu_architecture' => 'getCpuArchitecture',
'number_of_processors' => 'getNumberOfProcessors',
'host_name' => 'getHostName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['operating_system'] = isset($data['operating_system']) ? $data['operating_system'] : null;
        $this->container['cpu_architecture'] = isset($data['cpu_architecture']) ? $data['cpu_architecture'] : null;
        $this->container['number_of_processors'] = isset($data['number_of_processors']) ? $data['number_of_processors'] : null;
        $this->container['host_name'] = isset($data['host_name']) ? $data['host_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['operating_system'] === null) {
            $invalidProperties[] = "'operating_system' can't be null";
        }
        if ($this->container['cpu_architecture'] === null) {
            $invalidProperties[] = "'cpu_architecture' can't be null";
        }
        if ($this->container['number_of_processors'] === null) {
            $invalidProperties[] = "'number_of_processors' can't be null";
        }
        if ($this->container['host_name'] === null) {
            $invalidProperties[] = "'host_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets operating_system
     *
     * @return string
     */
    public function getOperatingSystem()
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system
     *
     * @param string $operating_system The operating system.
     *
     * @return $this
     */
    public function setOperatingSystem($operating_system)
    {
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets cpu_architecture
     *
     * @return string
     */
    public function getCpuArchitecture()
    {
        return $this->container['cpu_architecture'];
    }

    /**
     * Sets cpu_architecture
     *
     * @param string $cpu_architecture The architecture of the cpu.
     *
     * @return $this
     */
    public function setCpuArchitecture($cpu_architecture)
    {
        $this->container['cpu_architecture'] = $cpu_architecture;

        return $this;
    }

    /**
     * Gets number_of_processors
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfProcessors()
    {
        return $this->container['number_of_processors'];
    }

    /**
     * Sets number_of_processors
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_processors number_of_processors
     *
     * @return $this
     */
    public function setNumberOfProcessors($number_of_processors)
    {
        $this->container['number_of_processors'] = $number_of_processors;

        return $this;
    }

    /**
     * Gets host_name
     *
     * @return string
     */
    public function getHostName()
    {
        return $this->container['host_name'];
    }

    /**
     * Sets host_name
     *
     * @param string $host_name The host name.
     *
     * @return $this
     */
    public function setHostName($host_name)
    {
        $this->container['host_name'] = $host_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
