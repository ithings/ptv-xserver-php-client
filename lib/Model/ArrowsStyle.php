<?php
/**
 * ArrowsStyle
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ArrowsStyle Class Doc Comment
 *
 * @category Class
 * @description Defines how to render arrows on top of the underlying stroke. The width of the arrows is automatically adapted to the width of the stroke. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.renderingprofile.ArrowsStyle
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ArrowsStyle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ArrowsStyle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'draw_stroke' => 'bool',
'draw_fill' => 'bool',
'stroke_color' => '\Swagger\Client\Model\Color',
'fill_color' => '\Swagger\Client\Model\Color',
'stroke_opacity' => '\Swagger\Client\Model\Percent',
'fill_opacity' => '\Swagger\Client\Model\Percent'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'draw_stroke' => null,
'draw_fill' => null,
'stroke_color' => null,
'fill_color' => null,
'stroke_opacity' => null,
'fill_opacity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'draw_stroke' => 'drawStroke',
'draw_fill' => 'drawFill',
'stroke_color' => 'strokeColor',
'fill_color' => 'fillColor',
'stroke_opacity' => 'strokeOpacity',
'fill_opacity' => 'fillOpacity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'draw_stroke' => 'setDrawStroke',
'draw_fill' => 'setDrawFill',
'stroke_color' => 'setStrokeColor',
'fill_color' => 'setFillColor',
'stroke_opacity' => 'setStrokeOpacity',
'fill_opacity' => 'setFillOpacity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'draw_stroke' => 'getDrawStroke',
'draw_fill' => 'getDrawFill',
'stroke_color' => 'getStrokeColor',
'fill_color' => 'getFillColor',
'stroke_opacity' => 'getStrokeOpacity',
'fill_opacity' => 'getFillOpacity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['draw_stroke'] = isset($data['draw_stroke']) ? $data['draw_stroke'] : null;
        $this->container['draw_fill'] = isset($data['draw_fill']) ? $data['draw_fill'] : null;
        $this->container['stroke_color'] = isset($data['stroke_color']) ? $data['stroke_color'] : null;
        $this->container['fill_color'] = isset($data['fill_color']) ? $data['fill_color'] : null;
        $this->container['stroke_opacity'] = isset($data['stroke_opacity']) ? $data['stroke_opacity'] : null;
        $this->container['fill_opacity'] = isset($data['fill_opacity']) ? $data['fill_opacity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets draw_stroke
     *
     * @return bool
     */
    public function getDrawStroke()
    {
        return $this->container['draw_stroke'];
    }

    /**
     * Sets draw_stroke
     *
     * @param bool $draw_stroke Enables the visibility of the stroke, i.e. the edge, of the arrows.
     *
     * @return $this
     */
    public function setDrawStroke($draw_stroke)
    {
        $this->container['draw_stroke'] = $draw_stroke;

        return $this;
    }

    /**
     * Gets draw_fill
     *
     * @return bool
     */
    public function getDrawFill()
    {
        return $this->container['draw_fill'];
    }

    /**
     * Sets draw_fill
     *
     * @param bool $draw_fill Enables the visibility of the fill of the arrows.
     *
     * @return $this
     */
    public function setDrawFill($draw_fill)
    {
        $this->container['draw_fill'] = $draw_fill;

        return $this;
    }

    /**
     * Gets stroke_color
     *
     * @return \Swagger\Client\Model\Color
     */
    public function getStrokeColor()
    {
        return $this->container['stroke_color'];
    }

    /**
     * Sets stroke_color
     *
     * @param \Swagger\Client\Model\Color $stroke_color stroke_color
     *
     * @return $this
     */
    public function setStrokeColor($stroke_color)
    {
        $this->container['stroke_color'] = $stroke_color;

        return $this;
    }

    /**
     * Gets fill_color
     *
     * @return \Swagger\Client\Model\Color
     */
    public function getFillColor()
    {
        return $this->container['fill_color'];
    }

    /**
     * Sets fill_color
     *
     * @param \Swagger\Client\Model\Color $fill_color fill_color
     *
     * @return $this
     */
    public function setFillColor($fill_color)
    {
        $this->container['fill_color'] = $fill_color;

        return $this;
    }

    /**
     * Gets stroke_opacity
     *
     * @return \Swagger\Client\Model\Percent
     */
    public function getStrokeOpacity()
    {
        return $this->container['stroke_opacity'];
    }

    /**
     * Sets stroke_opacity
     *
     * @param \Swagger\Client\Model\Percent $stroke_opacity stroke_opacity
     *
     * @return $this
     */
    public function setStrokeOpacity($stroke_opacity)
    {
        $this->container['stroke_opacity'] = $stroke_opacity;

        return $this;
    }

    /**
     * Gets fill_opacity
     *
     * @return \Swagger\Client\Model\Percent
     */
    public function getFillOpacity()
    {
        return $this->container['fill_opacity'];
    }

    /**
     * Sets fill_opacity
     *
     * @param \Swagger\Client\Model\Percent $fill_opacity fill_opacity
     *
     * @return $this
     */
    public function setFillOpacity($fill_opacity)
    {
        $this->container['fill_opacity'] = $fill_opacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
