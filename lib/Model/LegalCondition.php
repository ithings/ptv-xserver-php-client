<?php
/**
 * LegalCondition
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LegalCondition Class Doc Comment
 *
 * @category Class
 * @description Defines a legal condition of the vehicle, e.g. whether the vehicle is delivering goods or is an emergency vehicle. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.vehicleprofile.LegalCondition
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LegalCondition implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LegalCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_emergency' => 'bool',
'is_delivery' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_emergency' => null,
'is_delivery' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_emergency' => 'isEmergency',
'is_delivery' => 'isDelivery'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_emergency' => 'setIsEmergency',
'is_delivery' => 'setIsDelivery'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_emergency' => 'getIsEmergency',
'is_delivery' => 'getIsDelivery'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_emergency'] = isset($data['is_emergency']) ? $data['is_emergency'] : null;
        $this->container['is_delivery'] = isset($data['is_delivery']) ? $data['is_delivery'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_emergency
     *
     * @return bool
     */
    public function getIsEmergency()
    {
        return $this->container['is_emergency'];
    }

    /**
     * Sets is_emergency
     *
     * @param bool $is_emergency True for emergency vehicles. If this condition is set to true, certain parts of the road network that are prohibited except that emergency vehicles are accessible for the routing algorithm, and these parts are then treated exactly the same way as normal parts of the road network that are not prohibited. This setting affects segments which have set segments.RoadAttributes.allowedForEmergency. (1)
     *
     * @return $this
     */
    public function setIsEmergency($is_emergency)
    {
        $this->container['is_emergency'] = $is_emergency;

        return $this;
    }

    /**
     * Gets is_delivery
     *
     * @return bool
     */
    public function getIsDelivery()
    {
        return $this->container['is_delivery'];
    }

    /**
     * Sets is_delivery
     *
     * @param bool $is_delivery True for vehicles which are intended to deliver something. If this condition is set to true, certain parts of the road network that are prohibited except for delivery vehicles are accessible for the routing algorithm. The treatment of such parts can be configured in the routing profile using the parameters SpecialAreas.deliveryOnlyPenalty and SpecialAreas.deliveryOnlyGateCost. These settings affect segments which have set segments.RoadAttributes.deliveryOnly. (1,4)
     *
     * @return $this
     */
    public function setIsDelivery($is_delivery)
    {
        $this->container['is_delivery'] = $is_delivery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
