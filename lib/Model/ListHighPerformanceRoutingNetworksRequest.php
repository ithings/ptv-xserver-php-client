<?php
/**
 * ListHighPerformanceRoutingNetworksRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ListHighPerformanceRoutingNetworksRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListHighPerformanceRoutingNetworksRequest extends RequestBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListHighPerformanceRoutingNetworksRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ids' => 'string[]',
'return_only_matching_networks' => 'bool',
'high_performance_routing_network_options' => '\Swagger\Client\Model\HighPerformanceRoutingNetworkOptions',
'result_fields' => '\Swagger\Client\Model\ListHighPerformanceRoutingNetworksResultFields'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ids' => null,
'return_only_matching_networks' => null,
'high_performance_routing_network_options' => null,
'result_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ids' => 'ids',
'return_only_matching_networks' => 'returnOnlyMatchingNetworks',
'high_performance_routing_network_options' => 'highPerformanceRoutingNetworkOptions',
'result_fields' => 'resultFields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ids' => 'setIds',
'return_only_matching_networks' => 'setReturnOnlyMatchingNetworks',
'high_performance_routing_network_options' => 'setHighPerformanceRoutingNetworkOptions',
'result_fields' => 'setResultFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ids' => 'getIds',
'return_only_matching_networks' => 'getReturnOnlyMatchingNetworks',
'high_performance_routing_network_options' => 'getHighPerformanceRoutingNetworkOptions',
'result_fields' => 'getResultFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['ids'] = isset($data['ids']) ? $data['ids'] : null;
        $this->container['return_only_matching_networks'] = isset($data['return_only_matching_networks']) ? $data['return_only_matching_networks'] : null;
        $this->container['high_performance_routing_network_options'] = isset($data['high_performance_routing_network_options']) ? $data['high_performance_routing_network_options'] : null;
        $this->container['result_fields'] = isset($data['result_fields']) ? $data['result_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ids
     *
     * @return string[]
     */
    public function getIds()
    {
        return $this->container['ids'];
    }

    /**
     * Sets ids
     *
     * @param string[] $ids ids
     *
     * @return $this
     */
    public function setIds($ids)
    {
        $this->container['ids'] = $ids;

        return $this;
    }

    /**
     * Gets return_only_matching_networks
     *
     * @return bool
     */
    public function getReturnOnlyMatchingNetworks()
    {
        return $this->container['return_only_matching_networks'];
    }

    /**
     * Sets return_only_matching_networks
     *
     * @param bool $return_only_matching_networks If this parameter is set to true then only the high-performance routing networks that match the given options and profile are returned. In this case the profile and options that shall match have to be set also in the request.
     *
     * @return $this
     */
    public function setReturnOnlyMatchingNetworks($return_only_matching_networks)
    {
        $this->container['return_only_matching_networks'] = $return_only_matching_networks;

        return $this;
    }

    /**
     * Gets high_performance_routing_network_options
     *
     * @return \Swagger\Client\Model\HighPerformanceRoutingNetworkOptions
     */
    public function getHighPerformanceRoutingNetworkOptions()
    {
        return $this->container['high_performance_routing_network_options'];
    }

    /**
     * Sets high_performance_routing_network_options
     *
     * @param \Swagger\Client\Model\HighPerformanceRoutingNetworkOptions $high_performance_routing_network_options high_performance_routing_network_options
     *
     * @return $this
     */
    public function setHighPerformanceRoutingNetworkOptions($high_performance_routing_network_options)
    {
        $this->container['high_performance_routing_network_options'] = $high_performance_routing_network_options;

        return $this;
    }

    /**
     * Gets result_fields
     *
     * @return \Swagger\Client\Model\ListHighPerformanceRoutingNetworksResultFields
     */
    public function getResultFields()
    {
        return $this->container['result_fields'];
    }

    /**
     * Sets result_fields
     *
     * @param \Swagger\Client\Model\ListHighPerformanceRoutingNetworksResultFields $result_fields result_fields
     *
     * @return $this
     */
    public function setResultFields($result_fields)
    {
        $this->container['result_fields'] = $result_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
