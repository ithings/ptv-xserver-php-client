<?php
/**
 * OvernightStay
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OvernightStay Class Doc Comment
 *
 * @category Class
 * @description Contains parameter values for use cases in which the visit plan is calculated with overnight stays. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.clusterplanningprofile.OvernightStay
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OvernightStay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OvernightStay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'approximation_tolerance' => '\Swagger\Client\Model\ApproximationTolerance',
'perform_preprocessing_step' => 'bool',
'maximum_number_of_iterations' => '\Swagger\Client\Model\PositiveInteger',
'number_of_nearest_neighbors' => '\Swagger\Client\Model\PositiveInteger'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'approximation_tolerance' => null,
'perform_preprocessing_step' => null,
'maximum_number_of_iterations' => null,
'number_of_nearest_neighbors' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'approximation_tolerance' => 'approximationTolerance',
'perform_preprocessing_step' => 'performPreprocessingStep',
'maximum_number_of_iterations' => 'maximumNumberOfIterations',
'number_of_nearest_neighbors' => 'numberOfNearestNeighbors'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'approximation_tolerance' => 'setApproximationTolerance',
'perform_preprocessing_step' => 'setPerformPreprocessingStep',
'maximum_number_of_iterations' => 'setMaximumNumberOfIterations',
'number_of_nearest_neighbors' => 'setNumberOfNearestNeighbors'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'approximation_tolerance' => 'getApproximationTolerance',
'perform_preprocessing_step' => 'getPerformPreprocessingStep',
'maximum_number_of_iterations' => 'getMaximumNumberOfIterations',
'number_of_nearest_neighbors' => 'getNumberOfNearestNeighbors'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['approximation_tolerance'] = isset($data['approximation_tolerance']) ? $data['approximation_tolerance'] : null;
        $this->container['perform_preprocessing_step'] = isset($data['perform_preprocessing_step']) ? $data['perform_preprocessing_step'] : null;
        $this->container['maximum_number_of_iterations'] = isset($data['maximum_number_of_iterations']) ? $data['maximum_number_of_iterations'] : null;
        $this->container['number_of_nearest_neighbors'] = isset($data['number_of_nearest_neighbors']) ? $data['number_of_nearest_neighbors'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets approximation_tolerance
     *
     * @return \Swagger\Client\Model\ApproximationTolerance
     */
    public function getApproximationTolerance()
    {
        return $this->container['approximation_tolerance'];
    }

    /**
     * Sets approximation_tolerance
     *
     * @param \Swagger\Client\Model\ApproximationTolerance $approximation_tolerance approximation_tolerance
     *
     * @return $this
     */
    public function setApproximationTolerance($approximation_tolerance)
    {
        $this->container['approximation_tolerance'] = $approximation_tolerance;

        return $this;
    }

    /**
     * Gets perform_preprocessing_step
     *
     * @return bool
     */
    public function getPerformPreprocessingStep()
    {
        return $this->container['perform_preprocessing_step'];
    }

    /**
     * Sets perform_preprocessing_step
     *
     * @param bool $perform_preprocessing_step Perform preprocessing to reduce the complexity of the optimization problem, for example by excluding forbidden or redundant combinations. For large problems the preprocessing itself can be very time-consuming.
     *
     * @return $this
     */
    public function setPerformPreprocessingStep($perform_preprocessing_step)
    {
        $this->container['perform_preprocessing_step'] = $perform_preprocessing_step;

        return $this;
    }

    /**
     * Gets maximum_number_of_iterations
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getMaximumNumberOfIterations()
    {
        return $this->container['maximum_number_of_iterations'];
    }

    /**
     * Sets maximum_number_of_iterations
     *
     * @param \Swagger\Client\Model\PositiveInteger $maximum_number_of_iterations maximum_number_of_iterations
     *
     * @return $this
     */
    public function setMaximumNumberOfIterations($maximum_number_of_iterations)
    {
        $this->container['maximum_number_of_iterations'] = $maximum_number_of_iterations;

        return $this;
    }

    /**
     * Gets number_of_nearest_neighbors
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfNearestNeighbors()
    {
        return $this->container['number_of_nearest_neighbors'];
    }

    /**
     * Sets number_of_nearest_neighbors
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_nearest_neighbors number_of_nearest_neighbors
     *
     * @return $this
     */
    public function setNumberOfNearestNeighbors($number_of_nearest_neighbors)
    {
        $this->container['number_of_nearest_neighbors'] = $number_of_nearest_neighbors;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
