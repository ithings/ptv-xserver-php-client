<?php
/**
 * DistanceMatrixDescription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DistanceMatrixDescription Class Doc Comment
 *
 * @category Class
 * @description This type represents meta data about a distance matrix. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xdima.DistanceMatrixDescription
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DistanceMatrixDescription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DistanceMatrixDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'summary' => '\Swagger\Client\Model\DistanceMatrixSummary',
'start_locations' => '\Swagger\Client\Model\RouteLocation[]',
'destination_locations' => '\Swagger\Client\Model\RouteLocation[]',
'direct_distance_relations' => '\Swagger\Client\Model\Relation[]',
'distance_matrix_options' => '\Swagger\Client\Model\DistanceMatrixOptions',
'profile' => '\Swagger\Client\Model\RequestProfile',
'tenant' => 'string',
'scope' => '\Swagger\Client\Model\ScopeName',
'last_used_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'summary' => null,
'start_locations' => null,
'destination_locations' => null,
'direct_distance_relations' => null,
'distance_matrix_options' => null,
'profile' => null,
'tenant' => null,
'scope' => null,
'last_used_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'summary' => 'summary',
'start_locations' => 'startLocations',
'destination_locations' => 'destinationLocations',
'direct_distance_relations' => 'directDistanceRelations',
'distance_matrix_options' => 'distanceMatrixOptions',
'profile' => 'profile',
'tenant' => 'tenant',
'scope' => 'scope',
'last_used_at' => 'lastUsedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'summary' => 'setSummary',
'start_locations' => 'setStartLocations',
'destination_locations' => 'setDestinationLocations',
'direct_distance_relations' => 'setDirectDistanceRelations',
'distance_matrix_options' => 'setDistanceMatrixOptions',
'profile' => 'setProfile',
'tenant' => 'setTenant',
'scope' => 'setScope',
'last_used_at' => 'setLastUsedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'summary' => 'getSummary',
'start_locations' => 'getStartLocations',
'destination_locations' => 'getDestinationLocations',
'direct_distance_relations' => 'getDirectDistanceRelations',
'distance_matrix_options' => 'getDistanceMatrixOptions',
'profile' => 'getProfile',
'tenant' => 'getTenant',
'scope' => 'getScope',
'last_used_at' => 'getLastUsedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['start_locations'] = isset($data['start_locations']) ? $data['start_locations'] : null;
        $this->container['destination_locations'] = isset($data['destination_locations']) ? $data['destination_locations'] : null;
        $this->container['direct_distance_relations'] = isset($data['direct_distance_relations']) ? $data['direct_distance_relations'] : null;
        $this->container['distance_matrix_options'] = isset($data['distance_matrix_options']) ? $data['distance_matrix_options'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['tenant'] = isset($data['tenant']) ? $data['tenant'] : null;
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['last_used_at'] = isset($data['last_used_at']) ? $data['last_used_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets summary
     *
     * @return \Swagger\Client\Model\DistanceMatrixSummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Swagger\Client\Model\DistanceMatrixSummary $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets start_locations
     *
     * @return \Swagger\Client\Model\RouteLocation[]
     */
    public function getStartLocations()
    {
        return $this->container['start_locations'];
    }

    /**
     * Sets start_locations
     *
     * @param \Swagger\Client\Model\RouteLocation[] $start_locations start_locations
     *
     * @return $this
     */
    public function setStartLocations($start_locations)
    {
        $this->container['start_locations'] = $start_locations;

        return $this;
    }

    /**
     * Gets destination_locations
     *
     * @return \Swagger\Client\Model\RouteLocation[]
     */
    public function getDestinationLocations()
    {
        return $this->container['destination_locations'];
    }

    /**
     * Sets destination_locations
     *
     * @param \Swagger\Client\Model\RouteLocation[] $destination_locations destination_locations
     *
     * @return $this
     */
    public function setDestinationLocations($destination_locations)
    {
        $this->container['destination_locations'] = $destination_locations;

        return $this;
    }

    /**
     * Gets direct_distance_relations
     *
     * @return \Swagger\Client\Model\Relation[]
     */
    public function getDirectDistanceRelations()
    {
        return $this->container['direct_distance_relations'];
    }

    /**
     * Sets direct_distance_relations
     *
     * @param \Swagger\Client\Model\Relation[] $direct_distance_relations direct_distance_relations
     *
     * @return $this
     */
    public function setDirectDistanceRelations($direct_distance_relations)
    {
        $this->container['direct_distance_relations'] = $direct_distance_relations;

        return $this;
    }

    /**
     * Gets distance_matrix_options
     *
     * @return \Swagger\Client\Model\DistanceMatrixOptions
     */
    public function getDistanceMatrixOptions()
    {
        return $this->container['distance_matrix_options'];
    }

    /**
     * Sets distance_matrix_options
     *
     * @param \Swagger\Client\Model\DistanceMatrixOptions $distance_matrix_options distance_matrix_options
     *
     * @return $this
     */
    public function setDistanceMatrixOptions($distance_matrix_options)
    {
        $this->container['distance_matrix_options'] = $distance_matrix_options;

        return $this;
    }

    /**
     * Gets profile
     *
     * @return \Swagger\Client\Model\RequestProfile
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \Swagger\Client\Model\RequestProfile $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string $tenant The tenant is returned only for administrators.
     *
     * @return $this
     */
    public function setTenant($tenant)
    {
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets scope
     *
     * @return \Swagger\Client\Model\ScopeName
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \Swagger\Client\Model\ScopeName $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets last_used_at
     *
     * @return \DateTime
     */
    public function getLastUsedAt()
    {
        return $this->container['last_used_at'];
    }

    /**
     * Sets last_used_at
     *
     * @param \DateTime $last_used_at Indicates the date the distance matrix was used the last time.
     *
     * @return $this
     */
    public function setLastUsedAt($last_used_at)
    {
        $this->container['last_used_at'] = $last_used_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
