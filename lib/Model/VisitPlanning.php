<?php
/**
 * VisitPlanning
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * VisitPlanning Class Doc Comment
 *
 * @category Class
 * @description Contains parameter values for the visit planning use cases. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.clusterplanningprofile.VisitPlanning
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VisitPlanning implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VisitPlanning';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'overnight_stay' => '\Swagger\Client\Model\OvernightStay',
'workload_balancing' => '\Swagger\Client\Model\WorkloadBalancing',
'workload' => '\Swagger\Client\Model\Workload',
'compactness_level' => '\Swagger\Client\Model\CompactnessLevel',
'daily_distance_weight' => '\Swagger\Client\Model\DailyDistanceWeight',
'weekly_distance_weight' => '\Swagger\Client\Model\WeeklyDistanceWeight',
'approximation_tolerance' => '\Swagger\Client\Model\ApproximationTolerance',
'perform_preprocessing_step' => 'bool',
'maximum_number_of_iterations' => '\Swagger\Client\Model\PositiveInteger',
'minimum_relative_improvement' => '\Swagger\Client\Model\MinimumRelativeImprovement'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'overnight_stay' => null,
'workload_balancing' => null,
'workload' => null,
'compactness_level' => null,
'daily_distance_weight' => null,
'weekly_distance_weight' => null,
'approximation_tolerance' => null,
'perform_preprocessing_step' => null,
'maximum_number_of_iterations' => null,
'minimum_relative_improvement' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'overnight_stay' => 'overnightStay',
'workload_balancing' => 'workloadBalancing',
'workload' => 'workload',
'compactness_level' => 'compactnessLevel',
'daily_distance_weight' => 'dailyDistanceWeight',
'weekly_distance_weight' => 'weeklyDistanceWeight',
'approximation_tolerance' => 'approximationTolerance',
'perform_preprocessing_step' => 'performPreprocessingStep',
'maximum_number_of_iterations' => 'maximumNumberOfIterations',
'minimum_relative_improvement' => 'minimumRelativeImprovement'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'overnight_stay' => 'setOvernightStay',
'workload_balancing' => 'setWorkloadBalancing',
'workload' => 'setWorkload',
'compactness_level' => 'setCompactnessLevel',
'daily_distance_weight' => 'setDailyDistanceWeight',
'weekly_distance_weight' => 'setWeeklyDistanceWeight',
'approximation_tolerance' => 'setApproximationTolerance',
'perform_preprocessing_step' => 'setPerformPreprocessingStep',
'maximum_number_of_iterations' => 'setMaximumNumberOfIterations',
'minimum_relative_improvement' => 'setMinimumRelativeImprovement'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'overnight_stay' => 'getOvernightStay',
'workload_balancing' => 'getWorkloadBalancing',
'workload' => 'getWorkload',
'compactness_level' => 'getCompactnessLevel',
'daily_distance_weight' => 'getDailyDistanceWeight',
'weekly_distance_weight' => 'getWeeklyDistanceWeight',
'approximation_tolerance' => 'getApproximationTolerance',
'perform_preprocessing_step' => 'getPerformPreprocessingStep',
'maximum_number_of_iterations' => 'getMaximumNumberOfIterations',
'minimum_relative_improvement' => 'getMinimumRelativeImprovement'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['overnight_stay'] = isset($data['overnight_stay']) ? $data['overnight_stay'] : null;
        $this->container['workload_balancing'] = isset($data['workload_balancing']) ? $data['workload_balancing'] : null;
        $this->container['workload'] = isset($data['workload']) ? $data['workload'] : null;
        $this->container['compactness_level'] = isset($data['compactness_level']) ? $data['compactness_level'] : null;
        $this->container['daily_distance_weight'] = isset($data['daily_distance_weight']) ? $data['daily_distance_weight'] : null;
        $this->container['weekly_distance_weight'] = isset($data['weekly_distance_weight']) ? $data['weekly_distance_weight'] : null;
        $this->container['approximation_tolerance'] = isset($data['approximation_tolerance']) ? $data['approximation_tolerance'] : null;
        $this->container['perform_preprocessing_step'] = isset($data['perform_preprocessing_step']) ? $data['perform_preprocessing_step'] : null;
        $this->container['maximum_number_of_iterations'] = isset($data['maximum_number_of_iterations']) ? $data['maximum_number_of_iterations'] : null;
        $this->container['minimum_relative_improvement'] = isset($data['minimum_relative_improvement']) ? $data['minimum_relative_improvement'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets overnight_stay
     *
     * @return \Swagger\Client\Model\OvernightStay
     */
    public function getOvernightStay()
    {
        return $this->container['overnight_stay'];
    }

    /**
     * Sets overnight_stay
     *
     * @param \Swagger\Client\Model\OvernightStay $overnight_stay overnight_stay
     *
     * @return $this
     */
    public function setOvernightStay($overnight_stay)
    {
        $this->container['overnight_stay'] = $overnight_stay;

        return $this;
    }

    /**
     * Gets workload_balancing
     *
     * @return \Swagger\Client\Model\WorkloadBalancing
     */
    public function getWorkloadBalancing()
    {
        return $this->container['workload_balancing'];
    }

    /**
     * Sets workload_balancing
     *
     * @param \Swagger\Client\Model\WorkloadBalancing $workload_balancing workload_balancing
     *
     * @return $this
     */
    public function setWorkloadBalancing($workload_balancing)
    {
        $this->container['workload_balancing'] = $workload_balancing;

        return $this;
    }

    /**
     * Gets workload
     *
     * @return \Swagger\Client\Model\Workload
     */
    public function getWorkload()
    {
        return $this->container['workload'];
    }

    /**
     * Sets workload
     *
     * @param \Swagger\Client\Model\Workload $workload workload
     *
     * @return $this
     */
    public function setWorkload($workload)
    {
        $this->container['workload'] = $workload;

        return $this;
    }

    /**
     * Gets compactness_level
     *
     * @return \Swagger\Client\Model\CompactnessLevel
     */
    public function getCompactnessLevel()
    {
        return $this->container['compactness_level'];
    }

    /**
     * Sets compactness_level
     *
     * @param \Swagger\Client\Model\CompactnessLevel $compactness_level compactness_level
     *
     * @return $this
     */
    public function setCompactnessLevel($compactness_level)
    {
        $this->container['compactness_level'] = $compactness_level;

        return $this;
    }

    /**
     * Gets daily_distance_weight
     *
     * @return \Swagger\Client\Model\DailyDistanceWeight
     */
    public function getDailyDistanceWeight()
    {
        return $this->container['daily_distance_weight'];
    }

    /**
     * Sets daily_distance_weight
     *
     * @param \Swagger\Client\Model\DailyDistanceWeight $daily_distance_weight daily_distance_weight
     *
     * @return $this
     */
    public function setDailyDistanceWeight($daily_distance_weight)
    {
        $this->container['daily_distance_weight'] = $daily_distance_weight;

        return $this;
    }

    /**
     * Gets weekly_distance_weight
     *
     * @return \Swagger\Client\Model\WeeklyDistanceWeight
     */
    public function getWeeklyDistanceWeight()
    {
        return $this->container['weekly_distance_weight'];
    }

    /**
     * Sets weekly_distance_weight
     *
     * @param \Swagger\Client\Model\WeeklyDistanceWeight $weekly_distance_weight weekly_distance_weight
     *
     * @return $this
     */
    public function setWeeklyDistanceWeight($weekly_distance_weight)
    {
        $this->container['weekly_distance_weight'] = $weekly_distance_weight;

        return $this;
    }

    /**
     * Gets approximation_tolerance
     *
     * @return \Swagger\Client\Model\ApproximationTolerance
     */
    public function getApproximationTolerance()
    {
        return $this->container['approximation_tolerance'];
    }

    /**
     * Sets approximation_tolerance
     *
     * @param \Swagger\Client\Model\ApproximationTolerance $approximation_tolerance approximation_tolerance
     *
     * @return $this
     */
    public function setApproximationTolerance($approximation_tolerance)
    {
        $this->container['approximation_tolerance'] = $approximation_tolerance;

        return $this;
    }

    /**
     * Gets perform_preprocessing_step
     *
     * @return bool
     */
    public function getPerformPreprocessingStep()
    {
        return $this->container['perform_preprocessing_step'];
    }

    /**
     * Sets perform_preprocessing_step
     *
     * @param bool $perform_preprocessing_step Perform preprocessing to reduce the complexity of the optimization problem. For example by excluding forbidden or redundant combinations. For large problems the preprocessing itself can be very time-consuming.
     *
     * @return $this
     */
    public function setPerformPreprocessingStep($perform_preprocessing_step)
    {
        $this->container['perform_preprocessing_step'] = $perform_preprocessing_step;

        return $this;
    }

    /**
     * Gets maximum_number_of_iterations
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getMaximumNumberOfIterations()
    {
        return $this->container['maximum_number_of_iterations'];
    }

    /**
     * Sets maximum_number_of_iterations
     *
     * @param \Swagger\Client\Model\PositiveInteger $maximum_number_of_iterations maximum_number_of_iterations
     *
     * @return $this
     */
    public function setMaximumNumberOfIterations($maximum_number_of_iterations)
    {
        $this->container['maximum_number_of_iterations'] = $maximum_number_of_iterations;

        return $this;
    }

    /**
     * Gets minimum_relative_improvement
     *
     * @return \Swagger\Client\Model\MinimumRelativeImprovement
     */
    public function getMinimumRelativeImprovement()
    {
        return $this->container['minimum_relative_improvement'];
    }

    /**
     * Sets minimum_relative_improvement
     *
     * @param \Swagger\Client\Model\MinimumRelativeImprovement $minimum_relative_improvement minimum_relative_improvement
     *
     * @return $this
     */
    public function setMinimumRelativeImprovement($minimum_relative_improvement)
    {
        $this->container['minimum_relative_improvement'] = $minimum_relative_improvement;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
