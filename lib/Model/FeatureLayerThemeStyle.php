<?php
/**
 * FeatureLayerThemeStyle
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FeatureLayerThemeStyle Class Doc Comment
 *
 * @category Class
 * @description Defines styles for data of a Feature Layer theme in the corresponding set of countries. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.renderingprofile.FeatureLayerThemeStyle
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FeatureLayerThemeStyle implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FeatureLayerThemeStyle';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_icons' => '\Swagger\Client\Model\IconStyle[]',
'group_icons' => '\Swagger\Client\Model\IconStyle[]',
'labeling_conflict_resolution' => '\Swagger\Client\Model\LabelingConflictResolution',
'time_dependency_style' => '\Swagger\Client\Model\TimeDependencyStyle',
'styles' => '\Swagger\Client\Model\RenderingStyle[]',
'id' => '\Swagger\Client\Model\ThemeId'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_icons' => null,
'group_icons' => null,
'labeling_conflict_resolution' => null,
'time_dependency_style' => null,
'styles' => null,
'id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_icons' => 'defaultIcons',
'group_icons' => 'groupIcons',
'labeling_conflict_resolution' => 'labelingConflictResolution',
'time_dependency_style' => 'timeDependencyStyle',
'styles' => 'styles',
'id' => 'id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_icons' => 'setDefaultIcons',
'group_icons' => 'setGroupIcons',
'labeling_conflict_resolution' => 'setLabelingConflictResolution',
'time_dependency_style' => 'setTimeDependencyStyle',
'styles' => 'setStyles',
'id' => 'setId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_icons' => 'getDefaultIcons',
'group_icons' => 'getGroupIcons',
'labeling_conflict_resolution' => 'getLabelingConflictResolution',
'time_dependency_style' => 'getTimeDependencyStyle',
'styles' => 'getStyles',
'id' => 'getId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_icons'] = isset($data['default_icons']) ? $data['default_icons'] : null;
        $this->container['group_icons'] = isset($data['group_icons']) ? $data['group_icons'] : null;
        $this->container['labeling_conflict_resolution'] = isset($data['labeling_conflict_resolution']) ? $data['labeling_conflict_resolution'] : null;
        $this->container['time_dependency_style'] = isset($data['time_dependency_style']) ? $data['time_dependency_style'] : null;
        $this->container['styles'] = isset($data['styles']) ? $data['styles'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_icons
     *
     * @return \Swagger\Client\Model\IconStyle[]
     */
    public function getDefaultIcons()
    {
        return $this->container['default_icons'];
    }

    /**
     * Sets default_icons
     *
     * @param \Swagger\Client\Model\IconStyle[] $default_icons default_icons
     *
     * @return $this
     */
    public function setDefaultIcons($default_icons)
    {
        $this->container['default_icons'] = $default_icons;

        return $this;
    }

    /**
     * Gets group_icons
     *
     * @return \Swagger\Client\Model\IconStyle[]
     */
    public function getGroupIcons()
    {
        return $this->container['group_icons'];
    }

    /**
     * Sets group_icons
     *
     * @param \Swagger\Client\Model\IconStyle[] $group_icons group_icons
     *
     * @return $this
     */
    public function setGroupIcons($group_icons)
    {
        $this->container['group_icons'] = $group_icons;

        return $this;
    }

    /**
     * Gets labeling_conflict_resolution
     *
     * @return \Swagger\Client\Model\LabelingConflictResolution
     */
    public function getLabelingConflictResolution()
    {
        return $this->container['labeling_conflict_resolution'];
    }

    /**
     * Sets labeling_conflict_resolution
     *
     * @param \Swagger\Client\Model\LabelingConflictResolution $labeling_conflict_resolution labeling_conflict_resolution
     *
     * @return $this
     */
    public function setLabelingConflictResolution($labeling_conflict_resolution)
    {
        $this->container['labeling_conflict_resolution'] = $labeling_conflict_resolution;

        return $this;
    }

    /**
     * Gets time_dependency_style
     *
     * @return \Swagger\Client\Model\TimeDependencyStyle
     */
    public function getTimeDependencyStyle()
    {
        return $this->container['time_dependency_style'];
    }

    /**
     * Sets time_dependency_style
     *
     * @param \Swagger\Client\Model\TimeDependencyStyle $time_dependency_style time_dependency_style
     *
     * @return $this
     */
    public function setTimeDependencyStyle($time_dependency_style)
    {
        $this->container['time_dependency_style'] = $time_dependency_style;

        return $this;
    }

    /**
     * Gets styles
     *
     * @return \Swagger\Client\Model\RenderingStyle[]
     */
    public function getStyles()
    {
        return $this->container['styles'];
    }

    /**
     * Sets styles
     *
     * @param \Swagger\Client\Model\RenderingStyle[] $styles styles
     *
     * @return $this
     */
    public function setStyles($styles)
    {
        $this->container['styles'] = $styles;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\ThemeId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\ThemeId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
