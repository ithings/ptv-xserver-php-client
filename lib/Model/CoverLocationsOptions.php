<?php
/**
 * CoverLocationsOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CoverLocationsOptions Class Doc Comment
 *
 * @category Class
 * @description Input parameters for the covering algorithm. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.CoverLocationsOptions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CoverLocationsOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CoverLocationsOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'covering_horizon' => '\Swagger\Client\Model\Horizon',
'optimization_goal' => '\Swagger\Client\Model\OptimizationGoal',
'mandatory_location_ids' => 'string[]',
'mandatory_cluster_ids' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'covering_horizon' => null,
'optimization_goal' => null,
'mandatory_location_ids' => null,
'mandatory_cluster_ids' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'covering_horizon' => 'coveringHorizon',
'optimization_goal' => 'optimizationGoal',
'mandatory_location_ids' => 'mandatoryLocationIds',
'mandatory_cluster_ids' => 'mandatoryClusterIds'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'covering_horizon' => 'setCoveringHorizon',
'optimization_goal' => 'setOptimizationGoal',
'mandatory_location_ids' => 'setMandatoryLocationIds',
'mandatory_cluster_ids' => 'setMandatoryClusterIds'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'covering_horizon' => 'getCoveringHorizon',
'optimization_goal' => 'getOptimizationGoal',
'mandatory_location_ids' => 'getMandatoryLocationIds',
'mandatory_cluster_ids' => 'getMandatoryClusterIds'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['covering_horizon'] = isset($data['covering_horizon']) ? $data['covering_horizon'] : null;
        $this->container['optimization_goal'] = isset($data['optimization_goal']) ? $data['optimization_goal'] : null;
        $this->container['mandatory_location_ids'] = isset($data['mandatory_location_ids']) ? $data['mandatory_location_ids'] : null;
        $this->container['mandatory_cluster_ids'] = isset($data['mandatory_cluster_ids']) ? $data['mandatory_cluster_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['covering_horizon'] === null) {
            $invalidProperties[] = "'covering_horizon' can't be null";
        }
        if ($this->container['optimization_goal'] === null) {
            $invalidProperties[] = "'optimization_goal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets covering_horizon
     *
     * @return \Swagger\Client\Model\Horizon
     */
    public function getCoveringHorizon()
    {
        return $this->container['covering_horizon'];
    }

    /**
     * Sets covering_horizon
     *
     * @param \Swagger\Client\Model\Horizon $covering_horizon covering_horizon
     *
     * @return $this
     */
    public function setCoveringHorizon($covering_horizon)
    {
        $this->container['covering_horizon'] = $covering_horizon;

        return $this;
    }

    /**
     * Gets optimization_goal
     *
     * @return \Swagger\Client\Model\OptimizationGoal
     */
    public function getOptimizationGoal()
    {
        return $this->container['optimization_goal'];
    }

    /**
     * Sets optimization_goal
     *
     * @param \Swagger\Client\Model\OptimizationGoal $optimization_goal optimization_goal
     *
     * @return $this
     */
    public function setOptimizationGoal($optimization_goal)
    {
        $this->container['optimization_goal'] = $optimization_goal;

        return $this;
    }

    /**
     * Gets mandatory_location_ids
     *
     * @return string[]
     */
    public function getMandatoryLocationIds()
    {
        return $this->container['mandatory_location_ids'];
    }

    /**
     * Sets mandatory_location_ids
     *
     * @param string[] $mandatory_location_ids mandatory_location_ids
     *
     * @return $this
     */
    public function setMandatoryLocationIds($mandatory_location_ids)
    {
        $this->container['mandatory_location_ids'] = $mandatory_location_ids;

        return $this;
    }

    /**
     * Gets mandatory_cluster_ids
     *
     * @return string[]
     */
    public function getMandatoryClusterIds()
    {
        return $this->container['mandatory_cluster_ids'];
    }

    /**
     * Sets mandatory_cluster_ids
     *
     * @param string[] $mandatory_cluster_ids mandatory_cluster_ids
     *
     * @return $this
     */
    public function setMandatoryClusterIds($mandatory_cluster_ids)
    {
        $this->container['mandatory_cluster_ids'] = $mandatory_cluster_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
