<?php
/**
 * ModuleInstance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ModuleInstance Class Doc Comment
 *
 * @category Class
 * @description Represents a single backend instance and provides useful information. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xruntime.ModuleInstance
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ModuleInstance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ModuleInstance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'instance_id' => 'string',
'services' => 'string[]',
'uptime' => '\Swagger\Client\Model\Nanoseconds',
'number_of_restarts' => '\Swagger\Client\Model\NonNegativeInteger',
'in_use' => 'bool',
'use_counter' => 'int',
'memory_statistics' => '\Swagger\Client\Model\MemoryStatistics',
'state' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'instance_id' => null,
'services' => null,
'uptime' => null,
'number_of_restarts' => null,
'in_use' => null,
'use_counter' => 'int64',
'memory_statistics' => null,
'state' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'instance_id' => 'instanceId',
'services' => 'services',
'uptime' => 'uptime',
'number_of_restarts' => 'numberOfRestarts',
'in_use' => 'inUse',
'use_counter' => 'useCounter',
'memory_statistics' => 'memoryStatistics',
'state' => 'state'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'instance_id' => 'setInstanceId',
'services' => 'setServices',
'uptime' => 'setUptime',
'number_of_restarts' => 'setNumberOfRestarts',
'in_use' => 'setInUse',
'use_counter' => 'setUseCounter',
'memory_statistics' => 'setMemoryStatistics',
'state' => 'setState'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'instance_id' => 'getInstanceId',
'services' => 'getServices',
'uptime' => 'getUptime',
'number_of_restarts' => 'getNumberOfRestarts',
'in_use' => 'getInUse',
'use_counter' => 'getUseCounter',
'memory_statistics' => 'getMemoryStatistics',
'state' => 'getState'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['instance_id'] = isset($data['instance_id']) ? $data['instance_id'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['number_of_restarts'] = isset($data['number_of_restarts']) ? $data['number_of_restarts'] : null;
        $this->container['in_use'] = isset($data['in_use']) ? $data['in_use'] : null;
        $this->container['use_counter'] = isset($data['use_counter']) ? $data['use_counter'] : null;
        $this->container['memory_statistics'] = isset($data['memory_statistics']) ? $data['memory_statistics'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uptime'] === null) {
            $invalidProperties[] = "'uptime' can't be null";
        }
        if ($this->container['number_of_restarts'] === null) {
            $invalidProperties[] = "'number_of_restarts' can't be null";
        }
        if ($this->container['in_use'] === null) {
            $invalidProperties[] = "'in_use' can't be null";
        }
        if ($this->container['use_counter'] === null) {
            $invalidProperties[] = "'use_counter' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets instance_id
     *
     * @return string
     */
    public function getInstanceId()
    {
        return $this->container['instance_id'];
    }

    /**
     * Sets instance_id
     *
     * @param string $instance_id Instance ID. Usually m0001, m0002, ...
     *
     * @return $this
     */
    public function setInstanceId($instance_id)
    {
        $this->container['instance_id'] = $instance_id;

        return $this;
    }

    /**
     * Gets services
     *
     * @return string[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param string[] $services services
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return \Swagger\Client\Model\Nanoseconds
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param \Swagger\Client\Model\Nanoseconds $uptime uptime
     *
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets number_of_restarts
     *
     * @return \Swagger\Client\Model\NonNegativeInteger
     */
    public function getNumberOfRestarts()
    {
        return $this->container['number_of_restarts'];
    }

    /**
     * Sets number_of_restarts
     *
     * @param \Swagger\Client\Model\NonNegativeInteger $number_of_restarts number_of_restarts
     *
     * @return $this
     */
    public function setNumberOfRestarts($number_of_restarts)
    {
        $this->container['number_of_restarts'] = $number_of_restarts;

        return $this;
    }

    /**
     * Gets in_use
     *
     * @return bool
     */
    public function getInUse()
    {
        return $this->container['in_use'];
    }

    /**
     * Sets in_use
     *
     * @param bool $in_use Is this instance currently in use?
     *
     * @return $this
     */
    public function setInUse($in_use)
    {
        $this->container['in_use'] = $in_use;

        return $this;
    }

    /**
     * Gets use_counter
     *
     * @return int
     */
    public function getUseCounter()
    {
        return $this->container['use_counter'];
    }

    /**
     * Sets use_counter
     *
     * @param int $use_counter How often has this instance been used since last restart?
     *
     * @return $this
     */
    public function setUseCounter($use_counter)
    {
        $this->container['use_counter'] = $use_counter;

        return $this;
    }

    /**
     * Gets memory_statistics
     *
     * @return \Swagger\Client\Model\MemoryStatistics
     */
    public function getMemoryStatistics()
    {
        return $this->container['memory_statistics'];
    }

    /**
     * Sets memory_statistics
     *
     * @param \Swagger\Client\Model\MemoryStatistics $memory_statistics memory_statistics
     *
     * @return $this
     */
    public function setMemoryStatistics($memory_statistics)
    {
        $this->container['memory_statistics'] = $memory_statistics;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Current state of this instance, e.g. STARTING, RUNNING, STOPPING, TERMINATED, FAILED.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
