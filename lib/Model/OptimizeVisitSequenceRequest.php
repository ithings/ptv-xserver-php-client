<?php
/**
 * OptimizeVisitSequenceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * OptimizeVisitSequenceRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OptimizeVisitSequenceRequest extends RequestBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OptimizeVisitSequenceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'locations' => '\Swagger\Client\Model\ClusterPlanningLocation[]',
'start_location_id' => 'string',
'end_location_id' => 'string',
'optimize_visit_sequence_options' => '\Swagger\Client\Model\OptimizeVisitSequenceOptions',
'distance_mode' => '\Swagger\Client\Model\DistanceMode'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'locations' => null,
'start_location_id' => null,
'end_location_id' => null,
'optimize_visit_sequence_options' => null,
'distance_mode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locations' => 'locations',
'start_location_id' => 'startLocationId',
'end_location_id' => 'endLocationId',
'optimize_visit_sequence_options' => 'optimizeVisitSequenceOptions',
'distance_mode' => 'distanceMode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locations' => 'setLocations',
'start_location_id' => 'setStartLocationId',
'end_location_id' => 'setEndLocationId',
'optimize_visit_sequence_options' => 'setOptimizeVisitSequenceOptions',
'distance_mode' => 'setDistanceMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locations' => 'getLocations',
'start_location_id' => 'getStartLocationId',
'end_location_id' => 'getEndLocationId',
'optimize_visit_sequence_options' => 'getOptimizeVisitSequenceOptions',
'distance_mode' => 'getDistanceMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['locations'] = isset($data['locations']) ? $data['locations'] : null;
        $this->container['start_location_id'] = isset($data['start_location_id']) ? $data['start_location_id'] : null;
        $this->container['end_location_id'] = isset($data['end_location_id']) ? $data['end_location_id'] : null;
        $this->container['optimize_visit_sequence_options'] = isset($data['optimize_visit_sequence_options']) ? $data['optimize_visit_sequence_options'] : null;
        $this->container['distance_mode'] = isset($data['distance_mode']) ? $data['distance_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['distance_mode'] === null) {
            $invalidProperties[] = "'distance_mode' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locations
     *
     * @return \Swagger\Client\Model\ClusterPlanningLocation[]
     */
    public function getLocations()
    {
        return $this->container['locations'];
    }

    /**
     * Sets locations
     *
     * @param \Swagger\Client\Model\ClusterPlanningLocation[] $locations locations
     *
     * @return $this
     */
    public function setLocations($locations)
    {
        $this->container['locations'] = $locations;

        return $this;
    }

    /**
     * Gets start_location_id
     *
     * @return string
     */
    public function getStartLocationId()
    {
        return $this->container['start_location_id'];
    }

    /**
     * Sets start_location_id
     *
     * @param string $start_location_id If given, the location from OptimizeVisitSequenceRequest.locations with this ID is used as the start of the tour. It can be the same as OptimizeVisitSequenceRequest.endLocationId. If not given, the algorithm can freely choose the start of the tour from the given locations.
     *
     * @return $this
     */
    public function setStartLocationId($start_location_id)
    {
        $this->container['start_location_id'] = $start_location_id;

        return $this;
    }

    /**
     * Gets end_location_id
     *
     * @return string
     */
    public function getEndLocationId()
    {
        return $this->container['end_location_id'];
    }

    /**
     * Sets end_location_id
     *
     * @param string $end_location_id If given, the location from OptimizeVisitSequenceRequest.locations with this ID is used as the end of the tour. Can be the same as OptimizeVisitSequenceRequest.startLocationId. If not given, the algorithm can freely choose the end of the tour from the given locations.
     *
     * @return $this
     */
    public function setEndLocationId($end_location_id)
    {
        $this->container['end_location_id'] = $end_location_id;

        return $this;
    }

    /**
     * Gets optimize_visit_sequence_options
     *
     * @return \Swagger\Client\Model\OptimizeVisitSequenceOptions
     */
    public function getOptimizeVisitSequenceOptions()
    {
        return $this->container['optimize_visit_sequence_options'];
    }

    /**
     * Sets optimize_visit_sequence_options
     *
     * @param \Swagger\Client\Model\OptimizeVisitSequenceOptions $optimize_visit_sequence_options optimize_visit_sequence_options
     *
     * @return $this
     */
    public function setOptimizeVisitSequenceOptions($optimize_visit_sequence_options)
    {
        $this->container['optimize_visit_sequence_options'] = $optimize_visit_sequence_options;

        return $this;
    }

    /**
     * Gets distance_mode
     *
     * @return \Swagger\Client\Model\DistanceMode
     */
    public function getDistanceMode()
    {
        return $this->container['distance_mode'];
    }

    /**
     * Sets distance_mode
     *
     * @param \Swagger\Client\Model\DistanceMode $distance_mode distance_mode
     *
     * @return $this
     */
    public function setDistanceMode($distance_mode)
    {
        $this->container['distance_mode'] = $distance_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
