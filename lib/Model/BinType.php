<?php
/**
 * BinType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BinType Class Doc Comment
 *
 * @category Class
 * @description Describes a cuboid bin type into which items can be packed. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xload.BinType
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BinType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BinType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'number_of_bins' => '\Swagger\Client\Model\PositiveInteger',
'dimensions' => '\Swagger\Client\Model\BoxDimensions',
'maximum_volume_capacity' => '\Swagger\Client\Model\Volume',
'maximum_weight_capacity' => '\Swagger\Client\Model\Kilograms'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'number_of_bins' => null,
'dimensions' => null,
'maximum_volume_capacity' => null,
'maximum_weight_capacity' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'number_of_bins' => 'numberOfBins',
'dimensions' => 'dimensions',
'maximum_volume_capacity' => 'maximumVolumeCapacity',
'maximum_weight_capacity' => 'maximumWeightCapacity'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'number_of_bins' => 'setNumberOfBins',
'dimensions' => 'setDimensions',
'maximum_volume_capacity' => 'setMaximumVolumeCapacity',
'maximum_weight_capacity' => 'setMaximumWeightCapacity'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'number_of_bins' => 'getNumberOfBins',
'dimensions' => 'getDimensions',
'maximum_volume_capacity' => 'getMaximumVolumeCapacity',
'maximum_weight_capacity' => 'getMaximumWeightCapacity'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number_of_bins'] = isset($data['number_of_bins']) ? $data['number_of_bins'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['maximum_volume_capacity'] = isset($data['maximum_volume_capacity']) ? $data['maximum_volume_capacity'] : null;
        $this->container['maximum_weight_capacity'] = isset($data['maximum_weight_capacity']) ? $data['maximum_weight_capacity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id User provided ID for this type of bin. Must be unique.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number_of_bins
     *
     * @return \Swagger\Client\Model\PositiveInteger
     */
    public function getNumberOfBins()
    {
        return $this->container['number_of_bins'];
    }

    /**
     * Sets number_of_bins
     *
     * @param \Swagger\Client\Model\PositiveInteger $number_of_bins number_of_bins
     *
     * @return $this
     */
    public function setNumberOfBins($number_of_bins)
    {
        $this->container['number_of_bins'] = $number_of_bins;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Swagger\Client\Model\BoxDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Swagger\Client\Model\BoxDimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets maximum_volume_capacity
     *
     * @return \Swagger\Client\Model\Volume
     */
    public function getMaximumVolumeCapacity()
    {
        return $this->container['maximum_volume_capacity'];
    }

    /**
     * Sets maximum_volume_capacity
     *
     * @param \Swagger\Client\Model\Volume $maximum_volume_capacity maximum_volume_capacity
     *
     * @return $this
     */
    public function setMaximumVolumeCapacity($maximum_volume_capacity)
    {
        $this->container['maximum_volume_capacity'] = $maximum_volume_capacity;

        return $this;
    }

    /**
     * Gets maximum_weight_capacity
     *
     * @return \Swagger\Client\Model\Kilograms
     */
    public function getMaximumWeightCapacity()
    {
        return $this->container['maximum_weight_capacity'];
    }

    /**
     * Sets maximum_weight_capacity
     *
     * @param \Swagger\Client\Model\Kilograms $maximum_weight_capacity maximum_weight_capacity
     *
     * @return $this
     */
    public function setMaximumWeightCapacity($maximum_weight_capacity)
    {
        $this->container['maximum_weight_capacity'] = $maximum_weight_capacity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
