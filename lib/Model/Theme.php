<?php
/**
 * Theme
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Theme Class Doc Comment
 *
 * @category Class
 * @description Defines the parameters of a specific theme. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.featurelayerprofile.Theme
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Theme implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Theme';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'country_specific_parameters' => '\Swagger\Client\Model\CountrySpecificParameter[]',
'feature_result_properties' => '\Swagger\Client\Model\FeatureResultProperty[]',
'id' => '\Swagger\Client\Model\ThemeId',
'enabled' => 'bool',
'priority_level' => 'int',
'feature_scenarios' => '\Swagger\Client\Model\FeatureScenario[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'country_specific_parameters' => null,
'feature_result_properties' => null,
'id' => null,
'enabled' => null,
'priority_level' => 'int32',
'feature_scenarios' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country_specific_parameters' => 'countrySpecificParameters',
'feature_result_properties' => 'featureResultProperties',
'id' => 'id',
'enabled' => 'enabled',
'priority_level' => 'priorityLevel',
'feature_scenarios' => 'featureScenarios'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country_specific_parameters' => 'setCountrySpecificParameters',
'feature_result_properties' => 'setFeatureResultProperties',
'id' => 'setId',
'enabled' => 'setEnabled',
'priority_level' => 'setPriorityLevel',
'feature_scenarios' => 'setFeatureScenarios'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country_specific_parameters' => 'getCountrySpecificParameters',
'feature_result_properties' => 'getFeatureResultProperties',
'id' => 'getId',
'enabled' => 'getEnabled',
'priority_level' => 'getPriorityLevel',
'feature_scenarios' => 'getFeatureScenarios'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['country_specific_parameters'] = isset($data['country_specific_parameters']) ? $data['country_specific_parameters'] : null;
        $this->container['feature_result_properties'] = isset($data['feature_result_properties']) ? $data['feature_result_properties'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['priority_level'] = isset($data['priority_level']) ? $data['priority_level'] : null;
        $this->container['feature_scenarios'] = isset($data['feature_scenarios']) ? $data['feature_scenarios'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country_specific_parameters
     *
     * @return \Swagger\Client\Model\CountrySpecificParameter[]
     */
    public function getCountrySpecificParameters()
    {
        return $this->container['country_specific_parameters'];
    }

    /**
     * Sets country_specific_parameters
     *
     * @param \Swagger\Client\Model\CountrySpecificParameter[] $country_specific_parameters country_specific_parameters
     *
     * @return $this
     */
    public function setCountrySpecificParameters($country_specific_parameters)
    {
        $this->container['country_specific_parameters'] = $country_specific_parameters;

        return $this;
    }

    /**
     * Gets feature_result_properties
     *
     * @return \Swagger\Client\Model\FeatureResultProperty[]
     */
    public function getFeatureResultProperties()
    {
        return $this->container['feature_result_properties'];
    }

    /**
     * Sets feature_result_properties
     *
     * @param \Swagger\Client\Model\FeatureResultProperty[] $feature_result_properties feature_result_properties
     *
     * @return $this
     */
    public function setFeatureResultProperties($feature_result_properties)
    {
        $this->container['feature_result_properties'] = $feature_result_properties;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \Swagger\Client\Model\ThemeId
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \Swagger\Client\Model\ThemeId $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Enables or disables the theme. Every subsequent country, rule, property and action type that is relative to this theme will be considered enabled or disabled for this theme.
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets priority_level
     *
     * @return int
     */
    public function getPriorityLevel()
    {
        return $this->container['priority_level'];
    }

    /**
     * Sets priority_level
     *
     * @param int $priority_level The priority level \\[0-255\\]. 100 is the default priority level, a 101 value defines a higher priority than 100.
     *
     * @return $this
     */
    public function setPriorityLevel($priority_level)
    {
        $this->container['priority_level'] = $priority_level;

        return $this;
    }

    /**
     * Gets feature_scenarios
     *
     * @return \Swagger\Client\Model\FeatureScenario[]
     */
    public function getFeatureScenarios()
    {
        return $this->container['feature_scenarios'];
    }

    /**
     * Sets feature_scenarios
     *
     * @param \Swagger\Client\Model\FeatureScenario[] $feature_scenarios feature_scenarios
     *
     * @return $this
     */
    public function setFeatureScenarios($feature_scenarios)
    {
        $this->container['feature_scenarios'] = $feature_scenarios;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
