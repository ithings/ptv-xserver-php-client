<?php
/**
 * MapRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * MapRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MapRequest extends RequestBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MapRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'map_section' => '\Swagger\Client\Model\MapSection',
'map_options' => '\Swagger\Client\Model\MapOptions',
'image_options' => '\Swagger\Client\Model\ImageOptions',
'result_fields' => '\Swagger\Client\Model\RenderingResultFields'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'map_section' => null,
'map_options' => null,
'image_options' => null,
'result_fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'map_section' => 'mapSection',
'map_options' => 'mapOptions',
'image_options' => 'imageOptions',
'result_fields' => 'resultFields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'map_section' => 'setMapSection',
'map_options' => 'setMapOptions',
'image_options' => 'setImageOptions',
'result_fields' => 'setResultFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'map_section' => 'getMapSection',
'map_options' => 'getMapOptions',
'image_options' => 'getImageOptions',
'result_fields' => 'getResultFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['map_section'] = isset($data['map_section']) ? $data['map_section'] : null;
        $this->container['map_options'] = isset($data['map_options']) ? $data['map_options'] : null;
        $this->container['image_options'] = isset($data['image_options']) ? $data['image_options'] : null;
        $this->container['result_fields'] = isset($data['result_fields']) ? $data['result_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['map_section'] === null) {
            $invalidProperties[] = "'map_section' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets map_section
     *
     * @return \Swagger\Client\Model\MapSection
     */
    public function getMapSection()
    {
        return $this->container['map_section'];
    }

    /**
     * Sets map_section
     *
     * @param \Swagger\Client\Model\MapSection $map_section map_section
     *
     * @return $this
     */
    public function setMapSection($map_section)
    {
        $this->container['map_section'] = $map_section;

        return $this;
    }

    /**
     * Gets map_options
     *
     * @return \Swagger\Client\Model\MapOptions
     */
    public function getMapOptions()
    {
        return $this->container['map_options'];
    }

    /**
     * Sets map_options
     *
     * @param \Swagger\Client\Model\MapOptions $map_options map_options
     *
     * @return $this
     */
    public function setMapOptions($map_options)
    {
        $this->container['map_options'] = $map_options;

        return $this;
    }

    /**
     * Gets image_options
     *
     * @return \Swagger\Client\Model\ImageOptions
     */
    public function getImageOptions()
    {
        return $this->container['image_options'];
    }

    /**
     * Sets image_options
     *
     * @param \Swagger\Client\Model\ImageOptions $image_options image_options
     *
     * @return $this
     */
    public function setImageOptions($image_options)
    {
        $this->container['image_options'] = $image_options;

        return $this;
    }

    /**
     * Gets result_fields
     *
     * @return \Swagger\Client\Model\RenderingResultFields
     */
    public function getResultFields()
    {
        return $this->container['result_fields'];
    }

    /**
     * Sets result_fields
     *
     * @param \Swagger\Client\Model\RenderingResultFields $result_fields result_fields
     *
     * @return $this
     */
    public function setResultFields($result_fields)
    {
        $this->container['result_fields'] = $result_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
