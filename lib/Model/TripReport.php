<?php
/**
 * TripReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.0 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TripReport Class Doc Comment
 *
 * @category Class
 * @description More detailed information about a trip, containing an accumulated cost report. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xtour.TripReport
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TripReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TripReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trip_id' => 'string',
'cost_report' => '\Swagger\Client\Model\CostReport',
'violation_report' => '\Swagger\Client\Model\TripViolationReport',
'order_group_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trip_id' => null,
'cost_report' => null,
'violation_report' => null,
'order_group_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trip_id' => 'tripId',
'cost_report' => 'costReport',
'violation_report' => 'violationReport',
'order_group_id' => 'orderGroupId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trip_id' => 'setTripId',
'cost_report' => 'setCostReport',
'violation_report' => 'setViolationReport',
'order_group_id' => 'setOrderGroupId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trip_id' => 'getTripId',
'cost_report' => 'getCostReport',
'violation_report' => 'getViolationReport',
'order_group_id' => 'getOrderGroupId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trip_id'] = isset($data['trip_id']) ? $data['trip_id'] : null;
        $this->container['cost_report'] = isset($data['cost_report']) ? $data['cost_report'] : null;
        $this->container['violation_report'] = isset($data['violation_report']) ? $data['violation_report'] : null;
        $this->container['order_group_id'] = isset($data['order_group_id']) ? $data['order_group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['trip_id'] === null) {
            $invalidProperties[] = "'trip_id' can't be null";
        }
        if ($this->container['cost_report'] === null) {
            $invalidProperties[] = "'cost_report' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trip_id
     *
     * @return string
     */
    public function getTripId()
    {
        return $this->container['trip_id'];
    }

    /**
     * Sets trip_id
     *
     * @param string $trip_id ID of the corresponding trip to this report.
     *
     * @return $this
     */
    public function setTripId($trip_id)
    {
        $this->container['trip_id'] = $trip_id;

        return $this;
    }

    /**
     * Gets cost_report
     *
     * @return \Swagger\Client\Model\CostReport
     */
    public function getCostReport()
    {
        return $this->container['cost_report'];
    }

    /**
     * Sets cost_report
     *
     * @param \Swagger\Client\Model\CostReport $cost_report cost_report
     *
     * @return $this
     */
    public function setCostReport($cost_report)
    {
        $this->container['cost_report'] = $cost_report;

        return $this;
    }

    /**
     * Gets violation_report
     *
     * @return \Swagger\Client\Model\TripViolationReport
     */
    public function getViolationReport()
    {
        return $this->container['violation_report'];
    }

    /**
     * Sets violation_report
     *
     * @param \Swagger\Client\Model\TripViolationReport $violation_report violation_report
     *
     * @return $this
     */
    public function setViolationReport($violation_report)
    {
        $this->container['violation_report'] = $violation_report;

        return $this;
    }

    /**
     * Gets order_group_id
     *
     * @return string
     */
    public function getOrderGroupId()
    {
        return $this->container['order_group_id'];
    }

    /**
     * Sets order_group_id
     *
     * @param string $order_group_id If there is at least one order with a groupId in the trip, the orderGroupId of a tripReport is the groupId that occurs most often among the orders of this trip. If no order of this trip has a groupId then this field is not set. If a planToursRequest has a trip in the input plan with different groupIds among the orders, first the orderGroupId of the trip is determined and then only orders of the same groupId are inserted in this trip during automatic planning. A changeToursRequest can change the orderGroupId of a trip for example by removing orders from the trip. All changeToursActions are performed even if options of the orderGroupConsideration are not fulfilled or if the orderGroupId does not match with any of the orderGroupIds of the target vehicle. For further information please have a look at the technical concept Order Groups.
     *
     * @return $this
     */
    public function setOrderGroupId($order_group_id)
    {
        $this->container['order_group_id'] = $order_group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
