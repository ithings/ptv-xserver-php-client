<?php
/**
 * MathematicalCostTest
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the model.
 */

namespace ithings\ptvxserver;

/**
 * MathematicalCostTest Class Doc Comment
 *
 * @category    Class
 * @description Defines the event-specific mathematical cost. The mathematical cost is an abstract value without a physical equivalent. Hence it can be used to model user-specific needs that symbolise a certain value, mostly in order to parameterize the objective function of an optimization algorithm.    Route calculation only: There are two ways to influence the cost of a route: absolute cost, which is added if an event occurs (defined by this type), and relative cost, which means increasing the cost of a segment by a percent value (Penalty type). The routing cost depends on many parameters and is an abstract value without a physical equivalent. As a rule of thumb the cost of x represents a detour of x \\[m\\] at a speed of 36 \\[km/h\\].    Range: 0 ??? value. Hint: Corresponding unittype in xServer API documentation - com.ptvgroup.xserver.MathematicalCost
 * @package     ithings\ptvxserver
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class MathematicalCostTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test "MathematicalCost"
     */
    public function testMathematicalCost()
    {
    }
}
