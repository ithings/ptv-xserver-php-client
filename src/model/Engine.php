<?php
/**
 * Engine
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Engine Class Doc Comment
 *
 * @category Class
 * @description Defines the engine parameters of the vehicle. These parameters are only relevant if the driveType is MOTOR\\_VEHICLE. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.vehicleprofile.Engine
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Engine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Engine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'engine_type' => '\ithings\ptvxserver\model\EngineType',
'cylinder_capacity' => '\ithings\ptvxserver\model\CylinderCapacity',
'fuel_type' => '\ithings\ptvxserver\model\FuelType',
'bio_fuel_ratio' => '\ithings\ptvxserver\model\Percent',
'fuel_consumption' => '\ithings\ptvxserver\model\EnergyConsumption',
'emission_technology' => '\ithings\ptvxserver\model\EmissionTechnology',
'particle_filter_installed' => 'bool',
'particle_reduction_class' => '\ithings\ptvxserver\model\ParticleReductionClass',
'emission_standard_eu' => '\ithings\ptvxserver\model\EmissionStandardEU',
'emission_standard_australia' => '\ithings\ptvxserver\model\EmissionStandardAustralia',
'low_emission_zone_types' => '\ithings\ptvxserver\model\CommaSeparatedList'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'engine_type' => null,
'cylinder_capacity' => null,
'fuel_type' => null,
'bio_fuel_ratio' => null,
'fuel_consumption' => null,
'emission_technology' => null,
'particle_filter_installed' => null,
'particle_reduction_class' => null,
'emission_standard_eu' => null,
'emission_standard_australia' => null,
'low_emission_zone_types' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'engine_type' => 'engineType',
'cylinder_capacity' => 'cylinderCapacity',
'fuel_type' => 'fuelType',
'bio_fuel_ratio' => 'bioFuelRatio',
'fuel_consumption' => 'fuelConsumption',
'emission_technology' => 'emissionTechnology',
'particle_filter_installed' => 'particleFilterInstalled',
'particle_reduction_class' => 'particleReductionClass',
'emission_standard_eu' => 'emissionStandardEU',
'emission_standard_australia' => 'emissionStandardAustralia',
'low_emission_zone_types' => 'lowEmissionZoneTypes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'engine_type' => 'setEngineType',
'cylinder_capacity' => 'setCylinderCapacity',
'fuel_type' => 'setFuelType',
'bio_fuel_ratio' => 'setBioFuelRatio',
'fuel_consumption' => 'setFuelConsumption',
'emission_technology' => 'setEmissionTechnology',
'particle_filter_installed' => 'setParticleFilterInstalled',
'particle_reduction_class' => 'setParticleReductionClass',
'emission_standard_eu' => 'setEmissionStandardEu',
'emission_standard_australia' => 'setEmissionStandardAustralia',
'low_emission_zone_types' => 'setLowEmissionZoneTypes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'engine_type' => 'getEngineType',
'cylinder_capacity' => 'getCylinderCapacity',
'fuel_type' => 'getFuelType',
'bio_fuel_ratio' => 'getBioFuelRatio',
'fuel_consumption' => 'getFuelConsumption',
'emission_technology' => 'getEmissionTechnology',
'particle_filter_installed' => 'getParticleFilterInstalled',
'particle_reduction_class' => 'getParticleReductionClass',
'emission_standard_eu' => 'getEmissionStandardEu',
'emission_standard_australia' => 'getEmissionStandardAustralia',
'low_emission_zone_types' => 'getLowEmissionZoneTypes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['engine_type'] = isset($data['engine_type']) ? $data['engine_type'] : null;
        $this->container['cylinder_capacity'] = isset($data['cylinder_capacity']) ? $data['cylinder_capacity'] : null;
        $this->container['fuel_type'] = isset($data['fuel_type']) ? $data['fuel_type'] : null;
        $this->container['bio_fuel_ratio'] = isset($data['bio_fuel_ratio']) ? $data['bio_fuel_ratio'] : null;
        $this->container['fuel_consumption'] = isset($data['fuel_consumption']) ? $data['fuel_consumption'] : null;
        $this->container['emission_technology'] = isset($data['emission_technology']) ? $data['emission_technology'] : null;
        $this->container['particle_filter_installed'] = isset($data['particle_filter_installed']) ? $data['particle_filter_installed'] : null;
        $this->container['particle_reduction_class'] = isset($data['particle_reduction_class']) ? $data['particle_reduction_class'] : null;
        $this->container['emission_standard_eu'] = isset($data['emission_standard_eu']) ? $data['emission_standard_eu'] : null;
        $this->container['emission_standard_australia'] = isset($data['emission_standard_australia']) ? $data['emission_standard_australia'] : null;
        $this->container['low_emission_zone_types'] = isset($data['low_emission_zone_types']) ? $data['low_emission_zone_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets engine_type
     *
     * @return \ithings\ptvxserver\model\EngineType
     */
    public function getEngineType()
    {
        return $this->container['engine_type'];
    }

    /**
     * Sets engine_type
     *
     * @param \ithings\ptvxserver\model\EngineType $engine_type engine_type
     *
     * @return $this
     */
    public function setEngineType($engine_type)
    {
        $this->container['engine_type'] = $engine_type;

        return $this;
    }

    /**
     * Gets cylinder_capacity
     *
     * @return \ithings\ptvxserver\model\CylinderCapacity
     */
    public function getCylinderCapacity()
    {
        return $this->container['cylinder_capacity'];
    }

    /**
     * Sets cylinder_capacity
     *
     * @param \ithings\ptvxserver\model\CylinderCapacity $cylinder_capacity cylinder_capacity
     *
     * @return $this
     */
    public function setCylinderCapacity($cylinder_capacity)
    {
        $this->container['cylinder_capacity'] = $cylinder_capacity;

        return $this;
    }

    /**
     * Gets fuel_type
     *
     * @return \ithings\ptvxserver\model\FuelType
     */
    public function getFuelType()
    {
        return $this->container['fuel_type'];
    }

    /**
     * Sets fuel_type
     *
     * @param \ithings\ptvxserver\model\FuelType $fuel_type fuel_type
     *
     * @return $this
     */
    public function setFuelType($fuel_type)
    {
        $this->container['fuel_type'] = $fuel_type;

        return $this;
    }

    /**
     * Gets bio_fuel_ratio
     *
     * @return \ithings\ptvxserver\model\Percent
     */
    public function getBioFuelRatio()
    {
        return $this->container['bio_fuel_ratio'];
    }

    /**
     * Sets bio_fuel_ratio
     *
     * @param \ithings\ptvxserver\model\Percent $bio_fuel_ratio bio_fuel_ratio
     *
     * @return $this
     */
    public function setBioFuelRatio($bio_fuel_ratio)
    {
        $this->container['bio_fuel_ratio'] = $bio_fuel_ratio;

        return $this;
    }

    /**
     * Gets fuel_consumption
     *
     * @return \ithings\ptvxserver\model\EnergyConsumption
     */
    public function getFuelConsumption()
    {
        return $this->container['fuel_consumption'];
    }

    /**
     * Sets fuel_consumption
     *
     * @param \ithings\ptvxserver\model\EnergyConsumption $fuel_consumption fuel_consumption
     *
     * @return $this
     */
    public function setFuelConsumption($fuel_consumption)
    {
        $this->container['fuel_consumption'] = $fuel_consumption;

        return $this;
    }

    /**
     * Gets emission_technology
     *
     * @return \ithings\ptvxserver\model\EmissionTechnology
     */
    public function getEmissionTechnology()
    {
        return $this->container['emission_technology'];
    }

    /**
     * Sets emission_technology
     *
     * @param \ithings\ptvxserver\model\EmissionTechnology $emission_technology emission_technology
     *
     * @return $this
     */
    public function setEmissionTechnology($emission_technology)
    {
        $this->container['emission_technology'] = $emission_technology;

        return $this;
    }

    /**
     * Gets particle_filter_installed
     *
     * @return bool
     */
    public function getParticleFilterInstalled()
    {
        return $this->container['particle_filter_installed'];
    }

    /**
     * Sets particle_filter_installed
     *
     * @param bool $particle_filter_installed Describes if a particle filter is installed. (2)
     *
     * @return $this
     */
    public function setParticleFilterInstalled($particle_filter_installed)
    {
        $this->container['particle_filter_installed'] = $particle_filter_installed;

        return $this;
    }

    /**
     * Gets particle_reduction_class
     *
     * @return \ithings\ptvxserver\model\ParticleReductionClass
     */
    public function getParticleReductionClass()
    {
        return $this->container['particle_reduction_class'];
    }

    /**
     * Sets particle_reduction_class
     *
     * @param \ithings\ptvxserver\model\ParticleReductionClass $particle_reduction_class particle_reduction_class
     *
     * @return $this
     */
    public function setParticleReductionClass($particle_reduction_class)
    {
        $this->container['particle_reduction_class'] = $particle_reduction_class;

        return $this;
    }

    /**
     * Gets emission_standard_eu
     *
     * @return \ithings\ptvxserver\model\EmissionStandardEU
     */
    public function getEmissionStandardEu()
    {
        return $this->container['emission_standard_eu'];
    }

    /**
     * Sets emission_standard_eu
     *
     * @param \ithings\ptvxserver\model\EmissionStandardEU $emission_standard_eu emission_standard_eu
     *
     * @return $this
     */
    public function setEmissionStandardEu($emission_standard_eu)
    {
        $this->container['emission_standard_eu'] = $emission_standard_eu;

        return $this;
    }

    /**
     * Gets emission_standard_australia
     *
     * @return \ithings\ptvxserver\model\EmissionStandardAustralia
     */
    public function getEmissionStandardAustralia()
    {
        return $this->container['emission_standard_australia'];
    }

    /**
     * Sets emission_standard_australia
     *
     * @param \ithings\ptvxserver\model\EmissionStandardAustralia $emission_standard_australia emission_standard_australia
     *
     * @return $this
     */
    public function setEmissionStandardAustralia($emission_standard_australia)
    {
        $this->container['emission_standard_australia'] = $emission_standard_australia;

        return $this;
    }

    /**
     * Gets low_emission_zone_types
     *
     * @return \ithings\ptvxserver\model\CommaSeparatedList
     */
    public function getLowEmissionZoneTypes()
    {
        return $this->container['low_emission_zone_types'];
    }

    /**
     * Sets low_emission_zone_types
     *
     * @param \ithings\ptvxserver\model\CommaSeparatedList $low_emission_zone_types low_emission_zone_types
     *
     * @return $this
     */
    public function setLowEmissionZoneTypes($low_emission_zone_types)
    {
        $this->container['low_emission_zone_types'] = $low_emission_zone_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
