<?php
/**
 * RequestBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RequestBase Class Doc Comment
 *
 * @category Class
 * @description Base type for any xServer request type. Contains a RequestProfile. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.service.RequestBase
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = '$type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scope' => '\ithings\ptvxserver\model\ScopeName',
'stored_profile' => '\ithings\ptvxserver\model\Url',
'request_profile' => '\ithings\ptvxserver\model\RequestProfile',
'coordinate_format' => '\ithings\ptvxserver\model\CoordinateFormat',
'geometry_options' => '\ithings\ptvxserver\model\GeometryOptions',
'timeouts' => '\ithings\ptvxserver\model\Timeouts',
'user_logs' => 'string[]',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scope' => null,
'stored_profile' => null,
'request_profile' => null,
'coordinate_format' => null,
'geometry_options' => null,
'timeouts' => null,
'user_logs' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scope' => 'scope',
'stored_profile' => 'storedProfile',
'request_profile' => 'requestProfile',
'coordinate_format' => 'coordinateFormat',
'geometry_options' => 'geometryOptions',
'timeouts' => 'timeouts',
'user_logs' => 'userLogs',
'type' => '$type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scope' => 'setScope',
'stored_profile' => 'setStoredProfile',
'request_profile' => 'setRequestProfile',
'coordinate_format' => 'setCoordinateFormat',
'geometry_options' => 'setGeometryOptions',
'timeouts' => 'setTimeouts',
'user_logs' => 'setUserLogs',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scope' => 'getScope',
'stored_profile' => 'getStoredProfile',
'request_profile' => 'getRequestProfile',
'coordinate_format' => 'getCoordinateFormat',
'geometry_options' => 'getGeometryOptions',
'timeouts' => 'getTimeouts',
'user_logs' => 'getUserLogs',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : null;
        $this->container['stored_profile'] = isset($data['stored_profile']) ? $data['stored_profile'] : null;
        $this->container['request_profile'] = isset($data['request_profile']) ? $data['request_profile'] : null;
        $this->container['coordinate_format'] = isset($data['coordinate_format']) ? $data['coordinate_format'] : null;
        $this->container['geometry_options'] = isset($data['geometry_options']) ? $data['geometry_options'] : null;
        $this->container['timeouts'] = isset($data['timeouts']) ? $data['timeouts'] : null;
        $this->container['user_logs'] = isset($data['user_logs']) ? $data['user_logs'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('$type', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scope
     *
     * @return \ithings\ptvxserver\model\ScopeName
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param \ithings\ptvxserver\model\ScopeName $scope scope
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets stored_profile
     *
     * @return \ithings\ptvxserver\model\Url
     */
    public function getStoredProfile()
    {
        return $this->container['stored_profile'];
    }

    /**
     * Sets stored_profile
     *
     * @param \ithings\ptvxserver\model\Url $stored_profile stored_profile
     *
     * @return $this
     */
    public function setStoredProfile($stored_profile)
    {
        $this->container['stored_profile'] = $stored_profile;

        return $this;
    }

    /**
     * Gets request_profile
     *
     * @return \ithings\ptvxserver\model\RequestProfile
     */
    public function getRequestProfile()
    {
        return $this->container['request_profile'];
    }

    /**
     * Sets request_profile
     *
     * @param \ithings\ptvxserver\model\RequestProfile $request_profile request_profile
     *
     * @return $this
     */
    public function setRequestProfile($request_profile)
    {
        $this->container['request_profile'] = $request_profile;

        return $this;
    }

    /**
     * Gets coordinate_format
     *
     * @return \ithings\ptvxserver\model\CoordinateFormat
     */
    public function getCoordinateFormat()
    {
        return $this->container['coordinate_format'];
    }

    /**
     * Sets coordinate_format
     *
     * @param \ithings\ptvxserver\model\CoordinateFormat $coordinate_format coordinate_format
     *
     * @return $this
     */
    public function setCoordinateFormat($coordinate_format)
    {
        $this->container['coordinate_format'] = $coordinate_format;

        return $this;
    }

    /**
     * Gets geometry_options
     *
     * @return \ithings\ptvxserver\model\GeometryOptions
     */
    public function getGeometryOptions()
    {
        return $this->container['geometry_options'];
    }

    /**
     * Sets geometry_options
     *
     * @param \ithings\ptvxserver\model\GeometryOptions $geometry_options geometry_options
     *
     * @return $this
     */
    public function setGeometryOptions($geometry_options)
    {
        $this->container['geometry_options'] = $geometry_options;

        return $this;
    }

    /**
     * Gets timeouts
     *
     * @return \ithings\ptvxserver\model\Timeouts
     */
    public function getTimeouts()
    {
        return $this->container['timeouts'];
    }

    /**
     * Sets timeouts
     *
     * @param \ithings\ptvxserver\model\Timeouts $timeouts timeouts
     *
     * @return $this
     */
    public function setTimeouts($timeouts)
    {
        $this->container['timeouts'] = $timeouts;

        return $this;
    }

    /**
     * Gets user_logs
     *
     * @return string[]
     */
    public function getUserLogs()
    {
        return $this->container['user_logs'];
    }

    /**
     * Sets user_logs
     *
     * @param string[] $user_logs user_logs
     *
     * @return $this
     */
    public function setUserLogs($user_logs)
    {
        $this->container['user_logs'] = $user_logs;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
