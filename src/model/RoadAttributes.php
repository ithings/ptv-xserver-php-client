<?php
/**
 * RoadAttributes
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RoadAttributes Class Doc Comment
 *
 * @category Class
 * @description Legal and physical attributes which describe the road segment in detail. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.segments.RoadAttributes
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoadAttributes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoadAttributes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'prohibited' => 'bool',
'toll' => 'bool',
'urban' => 'bool',
'residents_only' => 'bool',
'pedestrian_zone' => 'bool',
'one_way' => 'bool',
'roundabout' => 'bool',
'ramp' => 'bool',
'bridge' => 'bool',
'tunnel' => 'bool',
'delivery_only' => 'bool',
'allowed_for_emergency' => 'bool',
'low_emission_zone_type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'prohibited' => null,
'toll' => null,
'urban' => null,
'residents_only' => null,
'pedestrian_zone' => null,
'one_way' => null,
'roundabout' => null,
'ramp' => null,
'bridge' => null,
'tunnel' => null,
'delivery_only' => null,
'allowed_for_emergency' => null,
'low_emission_zone_type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'prohibited' => 'prohibited',
'toll' => 'toll',
'urban' => 'urban',
'residents_only' => 'residentsOnly',
'pedestrian_zone' => 'pedestrianZone',
'one_way' => 'oneWay',
'roundabout' => 'roundabout',
'ramp' => 'ramp',
'bridge' => 'bridge',
'tunnel' => 'tunnel',
'delivery_only' => 'deliveryOnly',
'allowed_for_emergency' => 'allowedForEmergency',
'low_emission_zone_type' => 'lowEmissionZoneType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'prohibited' => 'setProhibited',
'toll' => 'setToll',
'urban' => 'setUrban',
'residents_only' => 'setResidentsOnly',
'pedestrian_zone' => 'setPedestrianZone',
'one_way' => 'setOneWay',
'roundabout' => 'setRoundabout',
'ramp' => 'setRamp',
'bridge' => 'setBridge',
'tunnel' => 'setTunnel',
'delivery_only' => 'setDeliveryOnly',
'allowed_for_emergency' => 'setAllowedForEmergency',
'low_emission_zone_type' => 'setLowEmissionZoneType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'prohibited' => 'getProhibited',
'toll' => 'getToll',
'urban' => 'getUrban',
'residents_only' => 'getResidentsOnly',
'pedestrian_zone' => 'getPedestrianZone',
'one_way' => 'getOneWay',
'roundabout' => 'getRoundabout',
'ramp' => 'getRamp',
'bridge' => 'getBridge',
'tunnel' => 'getTunnel',
'delivery_only' => 'getDeliveryOnly',
'allowed_for_emergency' => 'getAllowedForEmergency',
'low_emission_zone_type' => 'getLowEmissionZoneType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['prohibited'] = isset($data['prohibited']) ? $data['prohibited'] : null;
        $this->container['toll'] = isset($data['toll']) ? $data['toll'] : null;
        $this->container['urban'] = isset($data['urban']) ? $data['urban'] : null;
        $this->container['residents_only'] = isset($data['residents_only']) ? $data['residents_only'] : null;
        $this->container['pedestrian_zone'] = isset($data['pedestrian_zone']) ? $data['pedestrian_zone'] : null;
        $this->container['one_way'] = isset($data['one_way']) ? $data['one_way'] : null;
        $this->container['roundabout'] = isset($data['roundabout']) ? $data['roundabout'] : null;
        $this->container['ramp'] = isset($data['ramp']) ? $data['ramp'] : null;
        $this->container['bridge'] = isset($data['bridge']) ? $data['bridge'] : null;
        $this->container['tunnel'] = isset($data['tunnel']) ? $data['tunnel'] : null;
        $this->container['delivery_only'] = isset($data['delivery_only']) ? $data['delivery_only'] : null;
        $this->container['allowed_for_emergency'] = isset($data['allowed_for_emergency']) ? $data['allowed_for_emergency'] : null;
        $this->container['low_emission_zone_type'] = isset($data['low_emission_zone_type']) ? $data['low_emission_zone_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['prohibited'] === null) {
            $invalidProperties[] = "'prohibited' can't be null";
        }
        if ($this->container['toll'] === null) {
            $invalidProperties[] = "'toll' can't be null";
        }
        if ($this->container['urban'] === null) {
            $invalidProperties[] = "'urban' can't be null";
        }
        if ($this->container['residents_only'] === null) {
            $invalidProperties[] = "'residents_only' can't be null";
        }
        if ($this->container['pedestrian_zone'] === null) {
            $invalidProperties[] = "'pedestrian_zone' can't be null";
        }
        if ($this->container['one_way'] === null) {
            $invalidProperties[] = "'one_way' can't be null";
        }
        if ($this->container['roundabout'] === null) {
            $invalidProperties[] = "'roundabout' can't be null";
        }
        if ($this->container['ramp'] === null) {
            $invalidProperties[] = "'ramp' can't be null";
        }
        if ($this->container['bridge'] === null) {
            $invalidProperties[] = "'bridge' can't be null";
        }
        if ($this->container['tunnel'] === null) {
            $invalidProperties[] = "'tunnel' can't be null";
        }
        if ($this->container['delivery_only'] === null) {
            $invalidProperties[] = "'delivery_only' can't be null";
        }
        if ($this->container['allowed_for_emergency'] === null) {
            $invalidProperties[] = "'allowed_for_emergency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets prohibited
     *
     * @return bool
     */
    public function getProhibited()
    {
        return $this->container['prohibited'];
    }

    /**
     * Sets prohibited
     *
     * @param bool $prohibited This segment is usually prohibited for the selected vehicle.
     *
     * @return $this
     */
    public function setProhibited($prohibited)
    {
        $this->container['prohibited'] = $prohibited;

        return $this;
    }

    /**
     * Gets toll
     *
     * @return bool
     */
    public function getToll()
    {
        return $this->container['toll'];
    }

    /**
     * Sets toll
     *
     * @param bool $toll The segment is part of a toll road. This attribute does not reflect the specific toll pricing conditions, so it is not guaranteed that the selected vehicle has to pay toll for this segment.
     *
     * @return $this
     */
    public function setToll($toll)
    {
        $this->container['toll'] = $toll;

        return $this;
    }

    /**
     * Gets urban
     *
     * @return bool
     */
    public function getUrban()
    {
        return $this->container['urban'];
    }

    /**
     * Sets urban
     *
     * @param bool $urban The segment is within an urban, i.e. built-up area. It can be avoided or prohibited during route calculation using the parameter routingprofile.SpecialAreas.urbanPenalty.
     *
     * @return $this
     */
    public function setUrban($urban)
    {
        $this->container['urban'] = $urban;

        return $this;
    }

    /**
     * Gets residents_only
     *
     * @return bool
     */
    public function getResidentsOnly()
    {
        return $this->container['residents_only'];
    }

    /**
     * Sets residents_only
     *
     * @param bool $residents_only The segment is within a residents only area. It can be avoided, or prohibited during route calculation using the parameters routingprofile.SpecialAreas.residentsOnlyPenalty.
     *
     * @return $this
     */
    public function setResidentsOnly($residents_only)
    {
        $this->container['residents_only'] = $residents_only;

        return $this;
    }

    /**
     * Gets pedestrian_zone
     *
     * @return bool
     */
    public function getPedestrianZone()
    {
        return $this->container['pedestrian_zone'];
    }

    /**
     * Sets pedestrian_zone
     *
     * @param bool $pedestrian_zone The segment is within a pedestrian zone. To open, avoid, or block it during route calculation see attribute prohibited.
     *
     * @return $this
     */
    public function setPedestrianZone($pedestrian_zone)
    {
        $this->container['pedestrian_zone'] = $pedestrian_zone;

        return $this;
    }

    /**
     * Gets one_way
     *
     * @return bool
     */
    public function getOneWay()
    {
        return $this->container['one_way'];
    }

    /**
     * Sets one_way
     *
     * @param bool $one_way The segment is a one-way street.
     *
     * @return $this
     */
    public function setOneWay($one_way)
    {
        $this->container['one_way'] = $one_way;

        return $this;
    }

    /**
     * Gets roundabout
     *
     * @return bool
     */
    public function getRoundabout()
    {
        return $this->container['roundabout'];
    }

    /**
     * Sets roundabout
     *
     * @param bool $roundabout The segment is part of a roundabout.
     *
     * @return $this
     */
    public function setRoundabout($roundabout)
    {
        $this->container['roundabout'] = $roundabout;

        return $this;
    }

    /**
     * Gets ramp
     *
     * @return bool
     */
    public function getRamp()
    {
        return $this->container['ramp'];
    }

    /**
     * Sets ramp
     *
     * @param bool $ramp The segment is part of a ramp. It can be avoided or prohibited during route calculation using the parameter routingprofile.Network.rampPenalty.
     *
     * @return $this
     */
    public function setRamp($ramp)
    {
        $this->container['ramp'] = $ramp;

        return $this;
    }

    /**
     * Gets bridge
     *
     * @return bool
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param bool $bridge The segment is a bridge.
     *
     * @return $this
     */
    public function setBridge($bridge)
    {
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets tunnel
     *
     * @return bool
     */
    public function getTunnel()
    {
        return $this->container['tunnel'];
    }

    /**
     * Sets tunnel
     *
     * @param bool $tunnel The segment is a tunnel.
     *
     * @return $this
     */
    public function setTunnel($tunnel)
    {
        $this->container['tunnel'] = $tunnel;

        return $this;
    }

    /**
     * Gets delivery_only
     *
     * @return bool
     */
    public function getDeliveryOnly()
    {
        return $this->container['delivery_only'];
    }

    /**
     * Sets delivery_only
     *
     * @param bool $delivery_only The segment is in a delivery only area. It can be allowed, avoided, or prohibited during route calculation using the parameters routingprofile.SpecialAreas.deliveryOnlyPenalty and vehicleprofile.LegalCondition.isDelivery.
     *
     * @return $this
     */
    public function setDeliveryOnly($delivery_only)
    {
        $this->container['delivery_only'] = $delivery_only;

        return $this;
    }

    /**
     * Gets allowed_for_emergency
     *
     * @return bool
     */
    public function getAllowedForEmergency()
    {
        return $this->container['allowed_for_emergency'];
    }

    /**
     * Sets allowed_for_emergency
     *
     * @param bool $allowed_for_emergency The segment is allowed for emergency vehicles (see vehicleprofile.LegalCondition.isEmergency).
     *
     * @return $this
     */
    public function setAllowedForEmergency($allowed_for_emergency)
    {
        $this->container['allowed_for_emergency'] = $allowed_for_emergency;

        return $this;
    }

    /**
     * Gets low_emission_zone_type
     *
     * @return string
     */
    public function getLowEmissionZoneType()
    {
        return $this->container['low_emission_zone_type'];
    }

    /**
     * Sets low_emission_zone_type
     *
     * @param string $low_emission_zone_type The low-emission zone types the selected vehicle must have to travel this segment. It can be opened, avoided, or prohibited during route calculation using the parameters routingprofile.SpecialAreas.forbiddenLowEmissionZonePenalty and vehicleprofile.Engine.lowEmissionZoneTypes. The available types can be requested through the xRuntime service, e.g. DE\\_GREEN, DE\\_YELLOW, DE\\_RED for Germany.
     *
     * @return $this
     */
    public function setLowEmissionZoneType($low_emission_zone_type)
    {
        $this->container['low_emission_zone_type'] = $low_emission_zone_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
