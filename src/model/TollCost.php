<?php
/**
 * TollCost
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * TollCost Class Doc Comment
 *
 * @category Class
 * @description Represents a single toll cost specifying the amount, currency, and optional meta information. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.TollCost
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TollCost implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TollCost';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => 'double',
'currency' => '\ithings\ptvxserver\model\CurrencyCode',
'payment_methods' => '\ithings\ptvxserver\model\PaymentMethod[]',
'electronic_toll_collection_subscriptions' => 'string[]',
'converted_cost' => '\ithings\ptvxserver\model\Cost'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => 'double',
'currency' => null,
'payment_methods' => null,
'electronic_toll_collection_subscriptions' => null,
'converted_cost' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
'currency' => 'currency',
'payment_methods' => 'paymentMethods',
'electronic_toll_collection_subscriptions' => 'electronicTollCollectionSubscriptions',
'converted_cost' => 'convertedCost'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
'currency' => 'setCurrency',
'payment_methods' => 'setPaymentMethods',
'electronic_toll_collection_subscriptions' => 'setElectronicTollCollectionSubscriptions',
'converted_cost' => 'setConvertedCost'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
'currency' => 'getCurrency',
'payment_methods' => 'getPaymentMethods',
'electronic_toll_collection_subscriptions' => 'getElectronicTollCollectionSubscriptions',
'converted_cost' => 'getConvertedCost'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['payment_methods'] = isset($data['payment_methods']) ? $data['payment_methods'] : null;
        $this->container['electronic_toll_collection_subscriptions'] = isset($data['electronic_toll_collection_subscriptions']) ? $data['electronic_toll_collection_subscriptions'] : null;
        $this->container['converted_cost'] = isset($data['converted_cost']) ? $data['converted_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount The amount of the costs in the specified currency.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \ithings\ptvxserver\model\CurrencyCode
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \ithings\ptvxserver\model\CurrencyCode $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets payment_methods
     *
     * @return \ithings\ptvxserver\model\PaymentMethod[]
     */
    public function getPaymentMethods()
    {
        return $this->container['payment_methods'];
    }

    /**
     * Sets payment_methods
     *
     * @param \ithings\ptvxserver\model\PaymentMethod[] $payment_methods payment_methods
     *
     * @return $this
     */
    public function setPaymentMethods($payment_methods)
    {
        $this->container['payment_methods'] = $payment_methods;

        return $this;
    }

    /**
     * Gets electronic_toll_collection_subscriptions
     *
     * @return string[]
     */
    public function getElectronicTollCollectionSubscriptions()
    {
        return $this->container['electronic_toll_collection_subscriptions'];
    }

    /**
     * Sets electronic_toll_collection_subscriptions
     *
     * @param string[] $electronic_toll_collection_subscriptions electronic_toll_collection_subscriptions
     *
     * @return $this
     */
    public function setElectronicTollCollectionSubscriptions($electronic_toll_collection_subscriptions)
    {
        $this->container['electronic_toll_collection_subscriptions'] = $electronic_toll_collection_subscriptions;

        return $this;
    }

    /**
     * Gets converted_cost
     *
     * @return \ithings\ptvxserver\model\Cost
     */
    public function getConvertedCost()
    {
        return $this->container['converted_cost'];
    }

    /**
     * Sets converted_cost
     *
     * @param \ithings\ptvxserver\model\Cost $converted_cost converted_cost
     *
     * @return $this
     */
    public function setConvertedCost($converted_cost)
    {
        $this->container['converted_cost'] = $converted_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
