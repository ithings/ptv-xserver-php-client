<?php
/**
 * TourRestrictions
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * TourRestrictions Class Doc Comment
 *
 * @category Class
 * @description Restrictions that can be set for a tour. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xtour.TourRestrictions
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TourRestrictions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourRestrictions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'single_trip_per_tour' => 'bool',
'single_depot_per_tour' => 'bool',
'maximum_number_of_customer_stops_per_tour' => '\ithings\ptvxserver\model\NonNegativeInteger',
'maximum_distance_per_tour' => 'float',
'maximum_travel_time_per_tour' => '\ithings\ptvxserver\model\Duration',
'maximum_driving_time_per_tour' => '\ithings\ptvxserver\model\Duration',
'working_hours' => '\ithings\ptvxserver\model\WorkingHours',
'mixed_loading_prohibitions' => '\ithings\ptvxserver\model\MixedLoadingProhibition[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'single_trip_per_tour' => null,
'single_depot_per_tour' => null,
'maximum_number_of_customer_stops_per_tour' => null,
'maximum_distance_per_tour' => null,
'maximum_travel_time_per_tour' => null,
'maximum_driving_time_per_tour' => null,
'working_hours' => null,
'mixed_loading_prohibitions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'single_trip_per_tour' => 'singleTripPerTour',
'single_depot_per_tour' => 'singleDepotPerTour',
'maximum_number_of_customer_stops_per_tour' => 'maximumNumberOfCustomerStopsPerTour',
'maximum_distance_per_tour' => 'maximumDistancePerTour',
'maximum_travel_time_per_tour' => 'maximumTravelTimePerTour',
'maximum_driving_time_per_tour' => 'maximumDrivingTimePerTour',
'working_hours' => 'workingHours',
'mixed_loading_prohibitions' => 'mixedLoadingProhibitions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'single_trip_per_tour' => 'setSingleTripPerTour',
'single_depot_per_tour' => 'setSingleDepotPerTour',
'maximum_number_of_customer_stops_per_tour' => 'setMaximumNumberOfCustomerStopsPerTour',
'maximum_distance_per_tour' => 'setMaximumDistancePerTour',
'maximum_travel_time_per_tour' => 'setMaximumTravelTimePerTour',
'maximum_driving_time_per_tour' => 'setMaximumDrivingTimePerTour',
'working_hours' => 'setWorkingHours',
'mixed_loading_prohibitions' => 'setMixedLoadingProhibitions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'single_trip_per_tour' => 'getSingleTripPerTour',
'single_depot_per_tour' => 'getSingleDepotPerTour',
'maximum_number_of_customer_stops_per_tour' => 'getMaximumNumberOfCustomerStopsPerTour',
'maximum_distance_per_tour' => 'getMaximumDistancePerTour',
'maximum_travel_time_per_tour' => 'getMaximumTravelTimePerTour',
'maximum_driving_time_per_tour' => 'getMaximumDrivingTimePerTour',
'working_hours' => 'getWorkingHours',
'mixed_loading_prohibitions' => 'getMixedLoadingProhibitions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['single_trip_per_tour'] = isset($data['single_trip_per_tour']) ? $data['single_trip_per_tour'] : null;
        $this->container['single_depot_per_tour'] = isset($data['single_depot_per_tour']) ? $data['single_depot_per_tour'] : null;
        $this->container['maximum_number_of_customer_stops_per_tour'] = isset($data['maximum_number_of_customer_stops_per_tour']) ? $data['maximum_number_of_customer_stops_per_tour'] : null;
        $this->container['maximum_distance_per_tour'] = isset($data['maximum_distance_per_tour']) ? $data['maximum_distance_per_tour'] : null;
        $this->container['maximum_travel_time_per_tour'] = isset($data['maximum_travel_time_per_tour']) ? $data['maximum_travel_time_per_tour'] : null;
        $this->container['maximum_driving_time_per_tour'] = isset($data['maximum_driving_time_per_tour']) ? $data['maximum_driving_time_per_tour'] : null;
        $this->container['working_hours'] = isset($data['working_hours']) ? $data['working_hours'] : null;
        $this->container['mixed_loading_prohibitions'] = isset($data['mixed_loading_prohibitions']) ? $data['mixed_loading_prohibitions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets single_trip_per_tour
     *
     * @return bool
     */
    public function getSingleTripPerTour()
    {
        return $this->container['single_trip_per_tour'];
    }

    /**
     * Sets single_trip_per_tour
     *
     * @param bool $single_trip_per_tour Restricts the number of trips for each tour to one. See Tours and Trips.
     *
     * @return $this
     */
    public function setSingleTripPerTour($single_trip_per_tour)
    {
        $this->container['single_trip_per_tour'] = $single_trip_per_tour;

        return $this;
    }

    /**
     * Gets single_depot_per_tour
     *
     * @return bool
     */
    public function getSingleDepotPerTour()
    {
        return $this->container['single_depot_per_tour'];
    }

    /**
     * Sets single_depot_per_tour
     *
     * @param bool $single_depot_per_tour Restricts the number of depots of a tour to at most one. That means a tour without depots is also valid if this parameter is set to true. See Tours and Trips.
     *
     * @return $this
     */
    public function setSingleDepotPerTour($single_depot_per_tour)
    {
        $this->container['single_depot_per_tour'] = $single_depot_per_tour;

        return $this;
    }

    /**
     * Gets maximum_number_of_customer_stops_per_tour
     *
     * @return \ithings\ptvxserver\model\NonNegativeInteger
     */
    public function getMaximumNumberOfCustomerStopsPerTour()
    {
        return $this->container['maximum_number_of_customer_stops_per_tour'];
    }

    /**
     * Sets maximum_number_of_customer_stops_per_tour
     *
     * @param \ithings\ptvxserver\model\NonNegativeInteger $maximum_number_of_customer_stops_per_tour maximum_number_of_customer_stops_per_tour
     *
     * @return $this
     */
    public function setMaximumNumberOfCustomerStopsPerTour($maximum_number_of_customer_stops_per_tour)
    {
        $this->container['maximum_number_of_customer_stops_per_tour'] = $maximum_number_of_customer_stops_per_tour;

        return $this;
    }

    /**
     * Gets maximum_distance_per_tour
     *
     * @return float
     */
    public function getMaximumDistancePerTour()
    {
        return $this->container['maximum_distance_per_tour'];
    }

    /**
     * Sets maximum_distance_per_tour
     *
     * @param float $maximum_distance_per_tour Restricts the maximum allowed total distance per tour in meters. If this parameter is set, maximum distance at vehicles must not be set, otherwise an exception is thrown. Is infinite if it is not set. This restriction is ignored for ToursInExecutionRequests.
     *
     * @return $this
     */
    public function setMaximumDistancePerTour($maximum_distance_per_tour)
    {
        $this->container['maximum_distance_per_tour'] = $maximum_distance_per_tour;

        return $this;
    }

    /**
     * Gets maximum_travel_time_per_tour
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumTravelTimePerTour()
    {
        return $this->container['maximum_travel_time_per_tour'];
    }

    /**
     * Sets maximum_travel_time_per_tour
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_travel_time_per_tour maximum_travel_time_per_tour
     *
     * @return $this
     */
    public function setMaximumTravelTimePerTour($maximum_travel_time_per_tour)
    {
        $this->container['maximum_travel_time_per_tour'] = $maximum_travel_time_per_tour;

        return $this;
    }

    /**
     * Gets maximum_driving_time_per_tour
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumDrivingTimePerTour()
    {
        return $this->container['maximum_driving_time_per_tour'];
    }

    /**
     * Sets maximum_driving_time_per_tour
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_driving_time_per_tour maximum_driving_time_per_tour
     *
     * @return $this
     */
    public function setMaximumDrivingTimePerTour($maximum_driving_time_per_tour)
    {
        $this->container['maximum_driving_time_per_tour'] = $maximum_driving_time_per_tour;

        return $this;
    }

    /**
     * Gets working_hours
     *
     * @return \ithings\ptvxserver\model\WorkingHours
     */
    public function getWorkingHours()
    {
        return $this->container['working_hours'];
    }

    /**
     * Sets working_hours
     *
     * @param \ithings\ptvxserver\model\WorkingHours $working_hours working_hours
     *
     * @return $this
     */
    public function setWorkingHours($working_hours)
    {
        $this->container['working_hours'] = $working_hours;

        return $this;
    }

    /**
     * Gets mixed_loading_prohibitions
     *
     * @return \ithings\ptvxserver\model\MixedLoadingProhibition[]
     */
    public function getMixedLoadingProhibitions()
    {
        return $this->container['mixed_loading_prohibitions'];
    }

    /**
     * Sets mixed_loading_prohibitions
     *
     * @param \ithings\ptvxserver\model\MixedLoadingProhibition[] $mixed_loading_prohibitions mixed_loading_prohibitions
     *
     * @return $this
     */
    public function setMixedLoadingProhibitions($mixed_loading_prohibitions)
    {
        $this->container['mixed_loading_prohibitions'] = $mixed_loading_prohibitions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
