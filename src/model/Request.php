<?php
/**
 * Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Request Class Doc Comment
 *
 * @category Class
 * @description Represents a single request that is currently executed or has been executed on this xserver. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xruntime.Request
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Request implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'request_id' => 'string',
'service_name' => 'string',
'method_name' => 'string',
'status' => '\ithings\ptvxserver\model\JobStatus',
'request_information' => '\ithings\ptvxserver\model\RequestInformation[]',
'finished' => '\DateTime',
'finished_at' => '\DateTime',
'calculation_time' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'request_id' => null,
'service_name' => null,
'method_name' => null,
'status' => null,
'request_information' => null,
'finished' => 'date',
'finished_at' => 'date-time',
'calculation_time' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'request_id' => 'requestId',
'service_name' => 'serviceName',
'method_name' => 'methodName',
'status' => 'status',
'request_information' => 'requestInformation',
'finished' => 'finished',
'finished_at' => 'finishedAt',
'calculation_time' => 'calculationTime'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'request_id' => 'setRequestId',
'service_name' => 'setServiceName',
'method_name' => 'setMethodName',
'status' => 'setStatus',
'request_information' => 'setRequestInformation',
'finished' => 'setFinished',
'finished_at' => 'setFinishedAt',
'calculation_time' => 'setCalculationTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'request_id' => 'getRequestId',
'service_name' => 'getServiceName',
'method_name' => 'getMethodName',
'status' => 'getStatus',
'request_information' => 'getRequestInformation',
'finished' => 'getFinished',
'finished_at' => 'getFinishedAt',
'calculation_time' => 'getCalculationTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['service_name'] = isset($data['service_name']) ? $data['service_name'] : null;
        $this->container['method_name'] = isset($data['method_name']) ? $data['method_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['request_information'] = isset($data['request_information']) ? $data['request_information'] : null;
        $this->container['finished'] = isset($data['finished']) ? $data['finished'] : null;
        $this->container['finished_at'] = isset($data['finished_at']) ? $data['finished_at'] : null;
        $this->container['calculation_time'] = isset($data['calculation_time']) ? $data['calculation_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['request_id'] === null) {
            $invalidProperties[] = "'request_id' can't be null";
        }
        if ($this->container['service_name'] === null) {
            $invalidProperties[] = "'service_name' can't be null";
        }
        if ($this->container['method_name'] === null) {
            $invalidProperties[] = "'method_name' can't be null";
        }
        if ($this->container['calculation_time'] === null) {
            $invalidProperties[] = "'calculation_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id ID of this request.
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets service_name
     *
     * @return string
     */
    public function getServiceName()
    {
        return $this->container['service_name'];
    }

    /**
     * Sets service_name
     *
     * @param string $service_name The used service.
     *
     * @return $this
     */
    public function setServiceName($service_name)
    {
        $this->container['service_name'] = $service_name;

        return $this;
    }

    /**
     * Gets method_name
     *
     * @return string
     */
    public function getMethodName()
    {
        return $this->container['method_name'];
    }

    /**
     * Sets method_name
     *
     * @param string $method_name The used method.
     *
     * @return $this
     */
    public function setMethodName($method_name)
    {
        $this->container['method_name'] = $method_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \ithings\ptvxserver\model\JobStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \ithings\ptvxserver\model\JobStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets request_information
     *
     * @return \ithings\ptvxserver\model\RequestInformation[]
     */
    public function getRequestInformation()
    {
        return $this->container['request_information'];
    }

    /**
     * Sets request_information
     *
     * @param \ithings\ptvxserver\model\RequestInformation[] $request_information request_information
     *
     * @return $this
     */
    public function setRequestInformation($request_information)
    {
        $this->container['request_information'] = $request_information;

        return $this;
    }

    /**
     * Gets finished
     *
     * @return \DateTime
     */
    public function getFinished()
    {
        return $this->container['finished'];
    }

    /**
     * Sets finished
     *
     * @param \DateTime $finished Deprecated: inaccurate type assigned, use finishedAt instead.
     *
     * @return $this
     */
    public function setFinished($finished)
    {
        $this->container['finished'] = $finished;

        return $this;
    }

    /**
     * Gets finished_at
     *
     * @return \DateTime
     */
    public function getFinishedAt()
    {
        return $this->container['finished_at'];
    }

    /**
     * Sets finished_at
     *
     * @param \DateTime $finished_at Instant of time when the request ended.
     *
     * @return $this
     */
    public function setFinishedAt($finished_at)
    {
        $this->container['finished_at'] = $finished_at;

        return $this;
    }

    /**
     * Gets calculation_time
     *
     * @return int
     */
    public function getCalculationTime()
    {
        return $this->container['calculation_time'];
    }

    /**
     * Sets calculation_time
     *
     * @param int $calculation_time Calculation time of the request.
     *
     * @return $this
     */
    public function setCalculationTime($calculation_time)
    {
        $this->container['calculation_time'] = $calculation_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
