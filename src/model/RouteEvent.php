<?php
/**
 * RouteEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RouteEvent Class Doc Comment
 *
 * @category Class
 * @description Base type for all route events which can appear in the RouteResponse. It contains information common to all event types. See the technical concept for more information. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.RouteEvent
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = '$type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RouteEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'event_type' => '\ithings\ptvxserver\model\RouteEventType',
'starts_at' => '\DateTime',
'coordinate' => '\ithings\ptvxserver\model\Coordinate',
'node_index' => '\ithings\ptvxserver\model\Index',
'distance_from_start' => '\ithings\ptvxserver\model\Distance',
'travel_time_from_start' => '\ithings\ptvxserver\model\Duration',
'type' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'event_type' => null,
'starts_at' => 'date-time',
'coordinate' => null,
'node_index' => null,
'distance_from_start' => null,
'travel_time_from_start' => null,
'type' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'event_type' => 'eventType',
'starts_at' => 'startsAt',
'coordinate' => 'coordinate',
'node_index' => 'nodeIndex',
'distance_from_start' => 'distanceFromStart',
'travel_time_from_start' => 'travelTimeFromStart',
'type' => '$type'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'event_type' => 'setEventType',
'starts_at' => 'setStartsAt',
'coordinate' => 'setCoordinate',
'node_index' => 'setNodeIndex',
'distance_from_start' => 'setDistanceFromStart',
'travel_time_from_start' => 'setTravelTimeFromStart',
'type' => 'setType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'event_type' => 'getEventType',
'starts_at' => 'getStartsAt',
'coordinate' => 'getCoordinate',
'node_index' => 'getNodeIndex',
'distance_from_start' => 'getDistanceFromStart',
'travel_time_from_start' => 'getTravelTimeFromStart',
'type' => 'getType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['starts_at'] = isset($data['starts_at']) ? $data['starts_at'] : null;
        $this->container['coordinate'] = isset($data['coordinate']) ? $data['coordinate'] : null;
        $this->container['node_index'] = isset($data['node_index']) ? $data['node_index'] : null;
        $this->container['distance_from_start'] = isset($data['distance_from_start']) ? $data['distance_from_start'] : null;
        $this->container['travel_time_from_start'] = isset($data['travel_time_from_start']) ? $data['travel_time_from_start'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;

        // Initialize discriminator property with the model name.
        $discriminator = array_search('$type', self::$attributeMap);
        $this->container[$discriminator] = static::$swaggerModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets event_type
     *
     * @return \ithings\ptvxserver\model\RouteEventType
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param \ithings\ptvxserver\model\RouteEventType $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets starts_at
     *
     * @return \DateTime
     */
    public function getStartsAt()
    {
        return $this->container['starts_at'];
    }

    /**
     * Sets starts_at
     *
     * @param \DateTime $starts_at The point in time at which the event starts. This field is only present if a time-consideration scenario with a reference time is given in the request. The time zone is that of the reference time. Use the UTCOffsetEvent to derive the local time.
     *
     * @return $this
     */
    public function setStartsAt($starts_at)
    {
        $this->container['starts_at'] = $starts_at;

        return $this;
    }

    /**
     * Gets coordinate
     *
     * @return \ithings\ptvxserver\model\Coordinate
     */
    public function getCoordinate()
    {
        return $this->container['coordinate'];
    }

    /**
     * Sets coordinate
     *
     * @param \ithings\ptvxserver\model\Coordinate $coordinate coordinate
     *
     * @return $this
     */
    public function setCoordinate($coordinate)
    {
        $this->container['coordinate'] = $coordinate;

        return $this;
    }

    /**
     * Gets node_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getNodeIndex()
    {
        return $this->container['node_index'];
    }

    /**
     * Sets node_index
     *
     * @param \ithings\ptvxserver\model\Index $node_index node_index
     *
     * @return $this
     */
    public function setNodeIndex($node_index)
    {
        $this->container['node_index'] = $node_index;

        return $this;
    }

    /**
     * Gets distance_from_start
     *
     * @return \ithings\ptvxserver\model\Distance
     */
    public function getDistanceFromStart()
    {
        return $this->container['distance_from_start'];
    }

    /**
     * Sets distance_from_start
     *
     * @param \ithings\ptvxserver\model\Distance $distance_from_start distance_from_start
     *
     * @return $this
     */
    public function setDistanceFromStart($distance_from_start)
    {
        $this->container['distance_from_start'] = $distance_from_start;

        return $this;
    }

    /**
     * Gets travel_time_from_start
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTravelTimeFromStart()
    {
        return $this->container['travel_time_from_start'];
    }

    /**
     * Sets travel_time_from_start
     *
     * @param \ithings\ptvxserver\model\Duration $travel_time_from_start travel_time_from_start
     *
     * @return $this
     */
    public function setTravelTimeFromStart($travel_time_from_start)
    {
        $this->container['travel_time_from_start'] = $travel_time_from_start;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
