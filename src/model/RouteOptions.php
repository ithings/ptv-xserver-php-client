<?php
/**
 * RouteOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RouteOptions Class Doc Comment
 *
 * @category Class
 * @description Specifies how to calculate the route and how to fill the ResultFields which are enabled. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.RouteOptions
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RouteOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RouteOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_consideration' => '\ithings\ptvxserver\model\TimeConsideration',
'content_snapshot_id' => 'string',
'high_performance_routing_network_id' => 'string',
'geographic_restrictions' => '\ithings\ptvxserver\model\GeographicRestrictions',
'polyline_options' => '\ithings\ptvxserver\model\PolylineOptions',
'emission_options' => '\ithings\ptvxserver\model\EmissionOptions',
'effective_fuel_consumption' => '\ithings\ptvxserver\model\EffectiveFuelConsumption',
'toll_options' => '\ithings\ptvxserver\model\TollOptions',
'routing_type' => '\ithings\ptvxserver\model\RoutingType',
'tour_restrictions' => '\ithings\ptvxserver\model\RoutingTourRestrictions',
'calculation_criteria' => '\ithings\ptvxserver\model\RouteCalculationCriteria',
'monetary_cost_options' => '\ithings\ptvxserver\model\MonetaryCostOptions',
'binary_feature_layer' => '\ithings\ptvxserver\model\EncodedContent',
'eta_calculation_options' => '\ithings\ptvxserver\model\ETACalculationOptions',
'currency' => '\ithings\ptvxserver\model\CurrencyCode',
'exchange_rates' => '\ithings\ptvxserver\model\ExchangeRates'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_consideration' => null,
'content_snapshot_id' => null,
'high_performance_routing_network_id' => null,
'geographic_restrictions' => null,
'polyline_options' => null,
'emission_options' => null,
'effective_fuel_consumption' => null,
'toll_options' => null,
'routing_type' => null,
'tour_restrictions' => null,
'calculation_criteria' => null,
'monetary_cost_options' => null,
'binary_feature_layer' => null,
'eta_calculation_options' => null,
'currency' => null,
'exchange_rates' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_consideration' => 'timeConsideration',
'content_snapshot_id' => 'contentSnapshotId',
'high_performance_routing_network_id' => 'highPerformanceRoutingNetworkId',
'geographic_restrictions' => 'geographicRestrictions',
'polyline_options' => 'polylineOptions',
'emission_options' => 'emissionOptions',
'effective_fuel_consumption' => 'effectiveFuelConsumption',
'toll_options' => 'tollOptions',
'routing_type' => 'routingType',
'tour_restrictions' => 'tourRestrictions',
'calculation_criteria' => 'calculationCriteria',
'monetary_cost_options' => 'monetaryCostOptions',
'binary_feature_layer' => 'binaryFeatureLayer',
'eta_calculation_options' => 'etaCalculationOptions',
'currency' => 'currency',
'exchange_rates' => 'exchangeRates'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_consideration' => 'setTimeConsideration',
'content_snapshot_id' => 'setContentSnapshotId',
'high_performance_routing_network_id' => 'setHighPerformanceRoutingNetworkId',
'geographic_restrictions' => 'setGeographicRestrictions',
'polyline_options' => 'setPolylineOptions',
'emission_options' => 'setEmissionOptions',
'effective_fuel_consumption' => 'setEffectiveFuelConsumption',
'toll_options' => 'setTollOptions',
'routing_type' => 'setRoutingType',
'tour_restrictions' => 'setTourRestrictions',
'calculation_criteria' => 'setCalculationCriteria',
'monetary_cost_options' => 'setMonetaryCostOptions',
'binary_feature_layer' => 'setBinaryFeatureLayer',
'eta_calculation_options' => 'setEtaCalculationOptions',
'currency' => 'setCurrency',
'exchange_rates' => 'setExchangeRates'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_consideration' => 'getTimeConsideration',
'content_snapshot_id' => 'getContentSnapshotId',
'high_performance_routing_network_id' => 'getHighPerformanceRoutingNetworkId',
'geographic_restrictions' => 'getGeographicRestrictions',
'polyline_options' => 'getPolylineOptions',
'emission_options' => 'getEmissionOptions',
'effective_fuel_consumption' => 'getEffectiveFuelConsumption',
'toll_options' => 'getTollOptions',
'routing_type' => 'getRoutingType',
'tour_restrictions' => 'getTourRestrictions',
'calculation_criteria' => 'getCalculationCriteria',
'monetary_cost_options' => 'getMonetaryCostOptions',
'binary_feature_layer' => 'getBinaryFeatureLayer',
'eta_calculation_options' => 'getEtaCalculationOptions',
'currency' => 'getCurrency',
'exchange_rates' => 'getExchangeRates'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_consideration'] = isset($data['time_consideration']) ? $data['time_consideration'] : null;
        $this->container['content_snapshot_id'] = isset($data['content_snapshot_id']) ? $data['content_snapshot_id'] : null;
        $this->container['high_performance_routing_network_id'] = isset($data['high_performance_routing_network_id']) ? $data['high_performance_routing_network_id'] : null;
        $this->container['geographic_restrictions'] = isset($data['geographic_restrictions']) ? $data['geographic_restrictions'] : null;
        $this->container['polyline_options'] = isset($data['polyline_options']) ? $data['polyline_options'] : null;
        $this->container['emission_options'] = isset($data['emission_options']) ? $data['emission_options'] : null;
        $this->container['effective_fuel_consumption'] = isset($data['effective_fuel_consumption']) ? $data['effective_fuel_consumption'] : null;
        $this->container['toll_options'] = isset($data['toll_options']) ? $data['toll_options'] : null;
        $this->container['routing_type'] = isset($data['routing_type']) ? $data['routing_type'] : null;
        $this->container['tour_restrictions'] = isset($data['tour_restrictions']) ? $data['tour_restrictions'] : null;
        $this->container['calculation_criteria'] = isset($data['calculation_criteria']) ? $data['calculation_criteria'] : null;
        $this->container['monetary_cost_options'] = isset($data['monetary_cost_options']) ? $data['monetary_cost_options'] : null;
        $this->container['binary_feature_layer'] = isset($data['binary_feature_layer']) ? $data['binary_feature_layer'] : null;
        $this->container['eta_calculation_options'] = isset($data['eta_calculation_options']) ? $data['eta_calculation_options'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['exchange_rates'] = isset($data['exchange_rates']) ? $data['exchange_rates'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_consideration
     *
     * @return \ithings\ptvxserver\model\TimeConsideration
     */
    public function getTimeConsideration()
    {
        return $this->container['time_consideration'];
    }

    /**
     * Sets time_consideration
     *
     * @param \ithings\ptvxserver\model\TimeConsideration $time_consideration time_consideration
     *
     * @return $this
     */
    public function setTimeConsideration($time_consideration)
    {
        $this->container['time_consideration'] = $time_consideration;

        return $this;
    }

    /**
     * Gets content_snapshot_id
     *
     * @return string
     */
    public function getContentSnapshotId()
    {
        return $this->container['content_snapshot_id'];
    }

    /**
     * Sets content_snapshot_id
     *
     * @param string $content_snapshot_id Specifies the content snapshot to use. If no snapshot ID is set, the most recent content is used.
     *
     * @return $this
     */
    public function setContentSnapshotId($content_snapshot_id)
    {
        $this->container['content_snapshot_id'] = $content_snapshot_id;

        return $this;
    }

    /**
     * Gets high_performance_routing_network_id
     *
     * @return string
     */
    public function getHighPerformanceRoutingNetworkId()
    {
        return $this->container['high_performance_routing_network_id'];
    }

    /**
     * Sets high_performance_routing_network_id
     *
     * @param string $high_performance_routing_network_id Specifies the high-performance routing network to use. Besides, the routing type must be explicitly set to RoutingType.HIGH\\_PERFORMANCE\\_ROUTING otherwise a exceptions.ParameterConflictException is thrown. The profile and request parameters of the high-performance routing network are used for linking and routing. The stored profile of the service.RequestBase will be ignored. Throws a exceptions.DataNotAvailableException if the high-performance routing network with the given id does not exist.
     *
     * @return $this
     */
    public function setHighPerformanceRoutingNetworkId($high_performance_routing_network_id)
    {
        $this->container['high_performance_routing_network_id'] = $high_performance_routing_network_id;

        return $this;
    }

    /**
     * Gets geographic_restrictions
     *
     * @return \ithings\ptvxserver\model\GeographicRestrictions
     */
    public function getGeographicRestrictions()
    {
        return $this->container['geographic_restrictions'];
    }

    /**
     * Sets geographic_restrictions
     *
     * @param \ithings\ptvxserver\model\GeographicRestrictions $geographic_restrictions geographic_restrictions
     *
     * @return $this
     */
    public function setGeographicRestrictions($geographic_restrictions)
    {
        $this->container['geographic_restrictions'] = $geographic_restrictions;

        return $this;
    }

    /**
     * Gets polyline_options
     *
     * @return \ithings\ptvxserver\model\PolylineOptions
     */
    public function getPolylineOptions()
    {
        return $this->container['polyline_options'];
    }

    /**
     * Sets polyline_options
     *
     * @param \ithings\ptvxserver\model\PolylineOptions $polyline_options polyline_options
     *
     * @return $this
     */
    public function setPolylineOptions($polyline_options)
    {
        $this->container['polyline_options'] = $polyline_options;

        return $this;
    }

    /**
     * Gets emission_options
     *
     * @return \ithings\ptvxserver\model\EmissionOptions
     */
    public function getEmissionOptions()
    {
        return $this->container['emission_options'];
    }

    /**
     * Sets emission_options
     *
     * @param \ithings\ptvxserver\model\EmissionOptions $emission_options emission_options
     *
     * @return $this
     */
    public function setEmissionOptions($emission_options)
    {
        $this->container['emission_options'] = $emission_options;

        return $this;
    }

    /**
     * Gets effective_fuel_consumption
     *
     * @return \ithings\ptvxserver\model\EffectiveFuelConsumption
     */
    public function getEffectiveFuelConsumption()
    {
        return $this->container['effective_fuel_consumption'];
    }

    /**
     * Sets effective_fuel_consumption
     *
     * @param \ithings\ptvxserver\model\EffectiveFuelConsumption $effective_fuel_consumption effective_fuel_consumption
     *
     * @return $this
     */
    public function setEffectiveFuelConsumption($effective_fuel_consumption)
    {
        $this->container['effective_fuel_consumption'] = $effective_fuel_consumption;

        return $this;
    }

    /**
     * Gets toll_options
     *
     * @return \ithings\ptvxserver\model\TollOptions
     */
    public function getTollOptions()
    {
        return $this->container['toll_options'];
    }

    /**
     * Sets toll_options
     *
     * @param \ithings\ptvxserver\model\TollOptions $toll_options toll_options
     *
     * @return $this
     */
    public function setTollOptions($toll_options)
    {
        $this->container['toll_options'] = $toll_options;

        return $this;
    }

    /**
     * Gets routing_type
     *
     * @return \ithings\ptvxserver\model\RoutingType
     */
    public function getRoutingType()
    {
        return $this->container['routing_type'];
    }

    /**
     * Sets routing_type
     *
     * @param \ithings\ptvxserver\model\RoutingType $routing_type routing_type
     *
     * @return $this
     */
    public function setRoutingType($routing_type)
    {
        $this->container['routing_type'] = $routing_type;

        return $this;
    }

    /**
     * Gets tour_restrictions
     *
     * @return \ithings\ptvxserver\model\RoutingTourRestrictions
     */
    public function getTourRestrictions()
    {
        return $this->container['tour_restrictions'];
    }

    /**
     * Sets tour_restrictions
     *
     * @param \ithings\ptvxserver\model\RoutingTourRestrictions $tour_restrictions tour_restrictions
     *
     * @return $this
     */
    public function setTourRestrictions($tour_restrictions)
    {
        $this->container['tour_restrictions'] = $tour_restrictions;

        return $this;
    }

    /**
     * Gets calculation_criteria
     *
     * @return \ithings\ptvxserver\model\RouteCalculationCriteria
     */
    public function getCalculationCriteria()
    {
        return $this->container['calculation_criteria'];
    }

    /**
     * Sets calculation_criteria
     *
     * @param \ithings\ptvxserver\model\RouteCalculationCriteria $calculation_criteria calculation_criteria
     *
     * @return $this
     */
    public function setCalculationCriteria($calculation_criteria)
    {
        $this->container['calculation_criteria'] = $calculation_criteria;

        return $this;
    }

    /**
     * Gets monetary_cost_options
     *
     * @return \ithings\ptvxserver\model\MonetaryCostOptions
     */
    public function getMonetaryCostOptions()
    {
        return $this->container['monetary_cost_options'];
    }

    /**
     * Sets monetary_cost_options
     *
     * @param \ithings\ptvxserver\model\MonetaryCostOptions $monetary_cost_options monetary_cost_options
     *
     * @return $this
     */
    public function setMonetaryCostOptions($monetary_cost_options)
    {
        $this->container['monetary_cost_options'] = $monetary_cost_options;

        return $this;
    }

    /**
     * Gets binary_feature_layer
     *
     * @return \ithings\ptvxserver\model\EncodedContent
     */
    public function getBinaryFeatureLayer()
    {
        return $this->container['binary_feature_layer'];
    }

    /**
     * Sets binary_feature_layer
     *
     * @param \ithings\ptvxserver\model\EncodedContent $binary_feature_layer binary_feature_layer
     *
     * @return $this
     */
    public function setBinaryFeatureLayer($binary_feature_layer)
    {
        $this->container['binary_feature_layer'] = $binary_feature_layer;

        return $this;
    }

    /**
     * Gets eta_calculation_options
     *
     * @return \ithings\ptvxserver\model\ETACalculationOptions
     */
    public function getEtaCalculationOptions()
    {
        return $this->container['eta_calculation_options'];
    }

    /**
     * Sets eta_calculation_options
     *
     * @param \ithings\ptvxserver\model\ETACalculationOptions $eta_calculation_options eta_calculation_options
     *
     * @return $this
     */
    public function setEtaCalculationOptions($eta_calculation_options)
    {
        $this->container['eta_calculation_options'] = $eta_calculation_options;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \ithings\ptvxserver\model\CurrencyCode
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \ithings\ptvxserver\model\CurrencyCode $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets exchange_rates
     *
     * @return \ithings\ptvxserver\model\ExchangeRates
     */
    public function getExchangeRates()
    {
        return $this->container['exchange_rates'];
    }

    /**
     * Sets exchange_rates
     *
     * @param \ithings\ptvxserver\model\ExchangeRates $exchange_rates exchange_rates
     *
     * @return $this
     */
    public function setExchangeRates($exchange_rates)
    {
        $this->container['exchange_rates'] = $exchange_rates;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
