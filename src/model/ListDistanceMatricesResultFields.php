<?php
/**
 * ListDistanceMatricesResultFields
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * ListDistanceMatricesResultFields Class Doc Comment
 *
 * @category Class
 * @description Settings for the result fields of the meta information of distance matrices. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xdima.ListDistanceMatricesResultFields
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ListDistanceMatricesResultFields implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ListDistanceMatricesResultFields';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_locations' => 'bool',
'destination_locations' => 'bool',
'direct_distance_relations' => 'bool',
'distance_matrix_options' => 'bool',
'profiles' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_locations' => null,
'destination_locations' => null,
'direct_distance_relations' => null,
'distance_matrix_options' => null,
'profiles' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_locations' => 'startLocations',
'destination_locations' => 'destinationLocations',
'direct_distance_relations' => 'directDistanceRelations',
'distance_matrix_options' => 'distanceMatrixOptions',
'profiles' => 'profiles'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_locations' => 'setStartLocations',
'destination_locations' => 'setDestinationLocations',
'direct_distance_relations' => 'setDirectDistanceRelations',
'distance_matrix_options' => 'setDistanceMatrixOptions',
'profiles' => 'setProfiles'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_locations' => 'getStartLocations',
'destination_locations' => 'getDestinationLocations',
'direct_distance_relations' => 'getDirectDistanceRelations',
'distance_matrix_options' => 'getDistanceMatrixOptions',
'profiles' => 'getProfiles'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_locations'] = isset($data['start_locations']) ? $data['start_locations'] : null;
        $this->container['destination_locations'] = isset($data['destination_locations']) ? $data['destination_locations'] : null;
        $this->container['direct_distance_relations'] = isset($data['direct_distance_relations']) ? $data['direct_distance_relations'] : null;
        $this->container['distance_matrix_options'] = isset($data['distance_matrix_options']) ? $data['distance_matrix_options'] : null;
        $this->container['profiles'] = isset($data['profiles']) ? $data['profiles'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_locations
     *
     * @return bool
     */
    public function getStartLocations()
    {
        return $this->container['start_locations'];
    }

    /**
     * Sets start_locations
     *
     * @param bool $start_locations Indicates if a list of start locations should be included in the result.
     *
     * @return $this
     */
    public function setStartLocations($start_locations)
    {
        $this->container['start_locations'] = $start_locations;

        return $this;
    }

    /**
     * Gets destination_locations
     *
     * @return bool
     */
    public function getDestinationLocations()
    {
        return $this->container['destination_locations'];
    }

    /**
     * Sets destination_locations
     *
     * @param bool $destination_locations Indicates if a list of destination locations should be included in the result.
     *
     * @return $this
     */
    public function setDestinationLocations($destination_locations)
    {
        $this->container['destination_locations'] = $destination_locations;

        return $this;
    }

    /**
     * Gets direct_distance_relations
     *
     * @return bool
     */
    public function getDirectDistanceRelations()
    {
        return $this->container['direct_distance_relations'];
    }

    /**
     * Sets direct_distance_relations
     *
     * @param bool $direct_distance_relations Indicates if a list of relations that are approximated by direct distance should be included in the result.
     *
     * @return $this
     */
    public function setDirectDistanceRelations($direct_distance_relations)
    {
        $this->container['direct_distance_relations'] = $direct_distance_relations;

        return $this;
    }

    /**
     * Gets distance_matrix_options
     *
     * @return bool
     */
    public function getDistanceMatrixOptions()
    {
        return $this->container['distance_matrix_options'];
    }

    /**
     * Sets distance_matrix_options
     *
     * @param bool $distance_matrix_options Indicates if the options of the distance matrices should be included in the result.
     *
     * @return $this
     */
    public function setDistanceMatrixOptions($distance_matrix_options)
    {
        $this->container['distance_matrix_options'] = $distance_matrix_options;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return bool
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param bool $profiles Indicates if the profiles should be included in the result.
     *
     * @return $this
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
