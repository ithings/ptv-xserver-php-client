<?php
/**
 * SpecialAreas
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * SpecialAreas Class Doc Comment
 *
 * @category Class
 * @description Defines the parameters concerning the special areas, such as urban segments, low emission zones, etc. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.routingprofile.SpecialAreas
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SpecialAreas implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SpecialAreas';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'residents_only_penalty' => '\ithings\ptvxserver\model\Penalty',
'urban_penalty' => '\ithings\ptvxserver\model\Penalty',
'minimum_urban_network_class' => '\ithings\ptvxserver\model\NetworkClass',
'forbidden_low_emission_zone_penalty' => '\ithings\ptvxserver\model\Penalty',
'delivery_only_penalty' => '\ithings\ptvxserver\model\Penalty',
'delivery_only_gate_cost' => '\ithings\ptvxserver\model\MathematicalCost'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'residents_only_penalty' => null,
'urban_penalty' => null,
'minimum_urban_network_class' => null,
'forbidden_low_emission_zone_penalty' => null,
'delivery_only_penalty' => null,
'delivery_only_gate_cost' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'residents_only_penalty' => 'residentsOnlyPenalty',
'urban_penalty' => 'urbanPenalty',
'minimum_urban_network_class' => 'minimumUrbanNetworkClass',
'forbidden_low_emission_zone_penalty' => 'forbiddenLowEmissionZonePenalty',
'delivery_only_penalty' => 'deliveryOnlyPenalty',
'delivery_only_gate_cost' => 'deliveryOnlyGateCost'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'residents_only_penalty' => 'setResidentsOnlyPenalty',
'urban_penalty' => 'setUrbanPenalty',
'minimum_urban_network_class' => 'setMinimumUrbanNetworkClass',
'forbidden_low_emission_zone_penalty' => 'setForbiddenLowEmissionZonePenalty',
'delivery_only_penalty' => 'setDeliveryOnlyPenalty',
'delivery_only_gate_cost' => 'setDeliveryOnlyGateCost'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'residents_only_penalty' => 'getResidentsOnlyPenalty',
'urban_penalty' => 'getUrbanPenalty',
'minimum_urban_network_class' => 'getMinimumUrbanNetworkClass',
'forbidden_low_emission_zone_penalty' => 'getForbiddenLowEmissionZonePenalty',
'delivery_only_penalty' => 'getDeliveryOnlyPenalty',
'delivery_only_gate_cost' => 'getDeliveryOnlyGateCost'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['residents_only_penalty'] = isset($data['residents_only_penalty']) ? $data['residents_only_penalty'] : null;
        $this->container['urban_penalty'] = isset($data['urban_penalty']) ? $data['urban_penalty'] : null;
        $this->container['minimum_urban_network_class'] = isset($data['minimum_urban_network_class']) ? $data['minimum_urban_network_class'] : null;
        $this->container['forbidden_low_emission_zone_penalty'] = isset($data['forbidden_low_emission_zone_penalty']) ? $data['forbidden_low_emission_zone_penalty'] : null;
        $this->container['delivery_only_penalty'] = isset($data['delivery_only_penalty']) ? $data['delivery_only_penalty'] : null;
        $this->container['delivery_only_gate_cost'] = isset($data['delivery_only_gate_cost']) ? $data['delivery_only_gate_cost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets residents_only_penalty
     *
     * @return \ithings\ptvxserver\model\Penalty
     */
    public function getResidentsOnlyPenalty()
    {
        return $this->container['residents_only_penalty'];
    }

    /**
     * Sets residents_only_penalty
     *
     * @param \ithings\ptvxserver\model\Penalty $residents_only_penalty residents_only_penalty
     *
     * @return $this
     */
    public function setResidentsOnlyPenalty($residents_only_penalty)
    {
        $this->container['residents_only_penalty'] = $residents_only_penalty;

        return $this;
    }

    /**
     * Gets urban_penalty
     *
     * @return \ithings\ptvxserver\model\Penalty
     */
    public function getUrbanPenalty()
    {
        return $this->container['urban_penalty'];
    }

    /**
     * Sets urban_penalty
     *
     * @param \ithings\ptvxserver\model\Penalty $urban_penalty urban_penalty
     *
     * @return $this
     */
    public function setUrbanPenalty($urban_penalty)
    {
        $this->container['urban_penalty'] = $urban_penalty;

        return $this;
    }

    /**
     * Gets minimum_urban_network_class
     *
     * @return \ithings\ptvxserver\model\NetworkClass
     */
    public function getMinimumUrbanNetworkClass()
    {
        return $this->container['minimum_urban_network_class'];
    }

    /**
     * Sets minimum_urban_network_class
     *
     * @param \ithings\ptvxserver\model\NetworkClass $minimum_urban_network_class minimum_urban_network_class
     *
     * @return $this
     */
    public function setMinimumUrbanNetworkClass($minimum_urban_network_class)
    {
        $this->container['minimum_urban_network_class'] = $minimum_urban_network_class;

        return $this;
    }

    /**
     * Gets forbidden_low_emission_zone_penalty
     *
     * @return \ithings\ptvxserver\model\Penalty
     */
    public function getForbiddenLowEmissionZonePenalty()
    {
        return $this->container['forbidden_low_emission_zone_penalty'];
    }

    /**
     * Sets forbidden_low_emission_zone_penalty
     *
     * @param \ithings\ptvxserver\model\Penalty $forbidden_low_emission_zone_penalty forbidden_low_emission_zone_penalty
     *
     * @return $this
     */
    public function setForbiddenLowEmissionZonePenalty($forbidden_low_emission_zone_penalty)
    {
        $this->container['forbidden_low_emission_zone_penalty'] = $forbidden_low_emission_zone_penalty;

        return $this;
    }

    /**
     * Gets delivery_only_penalty
     *
     * @return \ithings\ptvxserver\model\Penalty
     */
    public function getDeliveryOnlyPenalty()
    {
        return $this->container['delivery_only_penalty'];
    }

    /**
     * Sets delivery_only_penalty
     *
     * @param \ithings\ptvxserver\model\Penalty $delivery_only_penalty delivery_only_penalty
     *
     * @return $this
     */
    public function setDeliveryOnlyPenalty($delivery_only_penalty)
    {
        $this->container['delivery_only_penalty'] = $delivery_only_penalty;

        return $this;
    }

    /**
     * Gets delivery_only_gate_cost
     *
     * @return \ithings\ptvxserver\model\MathematicalCost
     */
    public function getDeliveryOnlyGateCost()
    {
        return $this->container['delivery_only_gate_cost'];
    }

    /**
     * Sets delivery_only_gate_cost
     *
     * @param \ithings\ptvxserver\model\MathematicalCost $delivery_only_gate_cost delivery_only_gate_cost
     *
     * @return $this
     */
    public function setDeliveryOnlyGateCost($delivery_only_gate_cost)
    {
        $this->container['delivery_only_gate_cost'] = $delivery_only_gate_cost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
