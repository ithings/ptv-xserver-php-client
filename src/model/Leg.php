<?php
/**
 * Leg
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Leg Class Doc Comment
 *
 * @category Class
 * @description A leg is defined by a start- and an end-waypoint and the segment (s) between them. It is guaranteed that a leg consists of at least one segment. It is also guaranteed that the leg of index *n* connects waypoints of indices *n* and *n+1*, i.e. the number of response waypoints equals the number of the list of legs plus 1. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.Leg
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Leg implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Leg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_waypoint_name' => 'string',
'end_waypoint_name' => 'string',
'start_segment_index' => '\ithings\ptvxserver\model\Index',
'end_segment_index' => '\ithings\ptvxserver\model\Index',
'start_node_index' => '\ithings\ptvxserver\model\Index',
'end_node_index' => '\ithings\ptvxserver\model\Index',
'start_toll_section_index' => '\ithings\ptvxserver\model\Index',
'end_toll_section_index' => '\ithings\ptvxserver\model\Index',
'distance' => '\ithings\ptvxserver\model\Distance',
'travel_time' => '\ithings\ptvxserver\model\Duration',
'traffic_delay' => '\ithings\ptvxserver\model\Duration',
'toll_summary' => '\ithings\ptvxserver\model\TollSummary',
'emissions' => '\ithings\ptvxserver\model\Emissions',
'polyline' => '\ithings\ptvxserver\model\EncodedGeometry',
'violated' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_waypoint_name' => null,
'end_waypoint_name' => null,
'start_segment_index' => null,
'end_segment_index' => null,
'start_node_index' => null,
'end_node_index' => null,
'start_toll_section_index' => null,
'end_toll_section_index' => null,
'distance' => null,
'travel_time' => null,
'traffic_delay' => null,
'toll_summary' => null,
'emissions' => null,
'polyline' => null,
'violated' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_waypoint_name' => 'startWaypointName',
'end_waypoint_name' => 'endWaypointName',
'start_segment_index' => 'startSegmentIndex',
'end_segment_index' => 'endSegmentIndex',
'start_node_index' => 'startNodeIndex',
'end_node_index' => 'endNodeIndex',
'start_toll_section_index' => 'startTollSectionIndex',
'end_toll_section_index' => 'endTollSectionIndex',
'distance' => 'distance',
'travel_time' => 'travelTime',
'traffic_delay' => 'trafficDelay',
'toll_summary' => 'tollSummary',
'emissions' => 'emissions',
'polyline' => 'polyline',
'violated' => 'violated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_waypoint_name' => 'setStartWaypointName',
'end_waypoint_name' => 'setEndWaypointName',
'start_segment_index' => 'setStartSegmentIndex',
'end_segment_index' => 'setEndSegmentIndex',
'start_node_index' => 'setStartNodeIndex',
'end_node_index' => 'setEndNodeIndex',
'start_toll_section_index' => 'setStartTollSectionIndex',
'end_toll_section_index' => 'setEndTollSectionIndex',
'distance' => 'setDistance',
'travel_time' => 'setTravelTime',
'traffic_delay' => 'setTrafficDelay',
'toll_summary' => 'setTollSummary',
'emissions' => 'setEmissions',
'polyline' => 'setPolyline',
'violated' => 'setViolated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_waypoint_name' => 'getStartWaypointName',
'end_waypoint_name' => 'getEndWaypointName',
'start_segment_index' => 'getStartSegmentIndex',
'end_segment_index' => 'getEndSegmentIndex',
'start_node_index' => 'getStartNodeIndex',
'end_node_index' => 'getEndNodeIndex',
'start_toll_section_index' => 'getStartTollSectionIndex',
'end_toll_section_index' => 'getEndTollSectionIndex',
'distance' => 'getDistance',
'travel_time' => 'getTravelTime',
'traffic_delay' => 'getTrafficDelay',
'toll_summary' => 'getTollSummary',
'emissions' => 'getEmissions',
'polyline' => 'getPolyline',
'violated' => 'getViolated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_waypoint_name'] = isset($data['start_waypoint_name']) ? $data['start_waypoint_name'] : null;
        $this->container['end_waypoint_name'] = isset($data['end_waypoint_name']) ? $data['end_waypoint_name'] : null;
        $this->container['start_segment_index'] = isset($data['start_segment_index']) ? $data['start_segment_index'] : null;
        $this->container['end_segment_index'] = isset($data['end_segment_index']) ? $data['end_segment_index'] : null;
        $this->container['start_node_index'] = isset($data['start_node_index']) ? $data['start_node_index'] : null;
        $this->container['end_node_index'] = isset($data['end_node_index']) ? $data['end_node_index'] : null;
        $this->container['start_toll_section_index'] = isset($data['start_toll_section_index']) ? $data['start_toll_section_index'] : null;
        $this->container['end_toll_section_index'] = isset($data['end_toll_section_index']) ? $data['end_toll_section_index'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['travel_time'] = isset($data['travel_time']) ? $data['travel_time'] : null;
        $this->container['traffic_delay'] = isset($data['traffic_delay']) ? $data['traffic_delay'] : null;
        $this->container['toll_summary'] = isset($data['toll_summary']) ? $data['toll_summary'] : null;
        $this->container['emissions'] = isset($data['emissions']) ? $data['emissions'] : null;
        $this->container['polyline'] = isset($data['polyline']) ? $data['polyline'] : null;
        $this->container['violated'] = isset($data['violated']) ? $data['violated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['distance'] === null) {
            $invalidProperties[] = "'distance' can't be null";
        }
        if ($this->container['travel_time'] === null) {
            $invalidProperties[] = "'travel_time' can't be null";
        }
        if ($this->container['violated'] === null) {
            $invalidProperties[] = "'violated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_waypoint_name
     *
     * @return string
     */
    public function getStartWaypointName()
    {
        return $this->container['start_waypoint_name'];
    }

    /**
     * Sets start_waypoint_name
     *
     * @param string $start_waypoint_name The name of the start waypoint of the leg. This user-defined name is available only if InputWaypoint.name for the corresponding input waypoint is set.
     *
     * @return $this
     */
    public function setStartWaypointName($start_waypoint_name)
    {
        $this->container['start_waypoint_name'] = $start_waypoint_name;

        return $this;
    }

    /**
     * Gets end_waypoint_name
     *
     * @return string
     */
    public function getEndWaypointName()
    {
        return $this->container['end_waypoint_name'];
    }

    /**
     * Sets end_waypoint_name
     *
     * @param string $end_waypoint_name The name of the end waypoint of the leg. This user-defined name is available only if InputWaypoint.name for the corresponding input waypoint is set.
     *
     * @return $this
     */
    public function setEndWaypointName($end_waypoint_name)
    {
        $this->container['end_waypoint_name'] = $end_waypoint_name;

        return $this;
    }

    /**
     * Gets start_segment_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getStartSegmentIndex()
    {
        return $this->container['start_segment_index'];
    }

    /**
     * Sets start_segment_index
     *
     * @param \ithings\ptvxserver\model\Index $start_segment_index start_segment_index
     *
     * @return $this
     */
    public function setStartSegmentIndex($start_segment_index)
    {
        $this->container['start_segment_index'] = $start_segment_index;

        return $this;
    }

    /**
     * Gets end_segment_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getEndSegmentIndex()
    {
        return $this->container['end_segment_index'];
    }

    /**
     * Sets end_segment_index
     *
     * @param \ithings\ptvxserver\model\Index $end_segment_index end_segment_index
     *
     * @return $this
     */
    public function setEndSegmentIndex($end_segment_index)
    {
        $this->container['end_segment_index'] = $end_segment_index;

        return $this;
    }

    /**
     * Gets start_node_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getStartNodeIndex()
    {
        return $this->container['start_node_index'];
    }

    /**
     * Sets start_node_index
     *
     * @param \ithings\ptvxserver\model\Index $start_node_index start_node_index
     *
     * @return $this
     */
    public function setStartNodeIndex($start_node_index)
    {
        $this->container['start_node_index'] = $start_node_index;

        return $this;
    }

    /**
     * Gets end_node_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getEndNodeIndex()
    {
        return $this->container['end_node_index'];
    }

    /**
     * Sets end_node_index
     *
     * @param \ithings\ptvxserver\model\Index $end_node_index end_node_index
     *
     * @return $this
     */
    public function setEndNodeIndex($end_node_index)
    {
        $this->container['end_node_index'] = $end_node_index;

        return $this;
    }

    /**
     * Gets start_toll_section_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getStartTollSectionIndex()
    {
        return $this->container['start_toll_section_index'];
    }

    /**
     * Sets start_toll_section_index
     *
     * @param \ithings\ptvxserver\model\Index $start_toll_section_index start_toll_section_index
     *
     * @return $this
     */
    public function setStartTollSectionIndex($start_toll_section_index)
    {
        $this->container['start_toll_section_index'] = $start_toll_section_index;

        return $this;
    }

    /**
     * Gets end_toll_section_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getEndTollSectionIndex()
    {
        return $this->container['end_toll_section_index'];
    }

    /**
     * Sets end_toll_section_index
     *
     * @param \ithings\ptvxserver\model\Index $end_toll_section_index end_toll_section_index
     *
     * @return $this
     */
    public function setEndTollSectionIndex($end_toll_section_index)
    {
        $this->container['end_toll_section_index'] = $end_toll_section_index;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return \ithings\ptvxserver\model\Distance
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param \ithings\ptvxserver\model\Distance $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets travel_time
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTravelTime()
    {
        return $this->container['travel_time'];
    }

    /**
     * Sets travel_time
     *
     * @param \ithings\ptvxserver\model\Duration $travel_time travel_time
     *
     * @return $this
     */
    public function setTravelTime($travel_time)
    {
        $this->container['travel_time'] = $travel_time;

        return $this;
    }

    /**
     * Gets traffic_delay
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTrafficDelay()
    {
        return $this->container['traffic_delay'];
    }

    /**
     * Sets traffic_delay
     *
     * @param \ithings\ptvxserver\model\Duration $traffic_delay traffic_delay
     *
     * @return $this
     */
    public function setTrafficDelay($traffic_delay)
    {
        $this->container['traffic_delay'] = $traffic_delay;

        return $this;
    }

    /**
     * Gets toll_summary
     *
     * @return \ithings\ptvxserver\model\TollSummary
     */
    public function getTollSummary()
    {
        return $this->container['toll_summary'];
    }

    /**
     * Sets toll_summary
     *
     * @param \ithings\ptvxserver\model\TollSummary $toll_summary toll_summary
     *
     * @return $this
     */
    public function setTollSummary($toll_summary)
    {
        $this->container['toll_summary'] = $toll_summary;

        return $this;
    }

    /**
     * Gets emissions
     *
     * @return \ithings\ptvxserver\model\Emissions
     */
    public function getEmissions()
    {
        return $this->container['emissions'];
    }

    /**
     * Sets emissions
     *
     * @param \ithings\ptvxserver\model\Emissions $emissions emissions
     *
     * @return $this
     */
    public function setEmissions($emissions)
    {
        $this->container['emissions'] = $emissions;

        return $this;
    }

    /**
     * Gets polyline
     *
     * @return \ithings\ptvxserver\model\EncodedGeometry
     */
    public function getPolyline()
    {
        return $this->container['polyline'];
    }

    /**
     * Sets polyline
     *
     * @param \ithings\ptvxserver\model\EncodedGeometry $polyline polyline
     *
     * @return $this
     */
    public function setPolyline($polyline)
    {
        $this->container['polyline'] = $polyline;

        return $this;
    }

    /**
     * Gets violated
     *
     * @return bool
     */
    public function getViolated()
    {
        return $this->container['violated'];
    }

    /**
     * Sets violated
     *
     * @param bool $violated If set to true, indicates that this leg contains a violation for the chosen vehicle.
     *
     * @return $this
     */
    public function setViolated($violated)
    {
        $this->container['violated'] = $violated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
