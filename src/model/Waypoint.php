<?php
/**
 * Waypoint
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Waypoint Class Doc Comment
 *
 * @category Class
 * @description A waypoint defines the start or destination of a route or a route leg. Every waypoint corresponds to an InputWaypoint, but not every input waypoint corresponds to a waypoint in the route. It is guaranteed that the waypoint of index *n* starts the leg of index *n*. That means that the number of waypoints equals the number of legs plus 1. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xroute.Waypoint
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Waypoint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Waypoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'country' => '\ithings\ptvxserver\model\CountryCode',
'linked_coordinate' => '\ithings\ptvxserver\model\Coordinate',
'reference_coordinate' => '\ithings\ptvxserver\model\Coordinate',
'link_distance' => 'float',
'link_travel_time' => '\ithings\ptvxserver\model\Duration',
'node_index' => '\ithings\ptvxserver\model\Index'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'country' => null,
'linked_coordinate' => null,
'reference_coordinate' => null,
'link_distance' => null,
'link_travel_time' => null,
'node_index' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'country' => 'country',
'linked_coordinate' => 'linkedCoordinate',
'reference_coordinate' => 'referenceCoordinate',
'link_distance' => 'linkDistance',
'link_travel_time' => 'linkTravelTime',
'node_index' => 'nodeIndex'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'country' => 'setCountry',
'linked_coordinate' => 'setLinkedCoordinate',
'reference_coordinate' => 'setReferenceCoordinate',
'link_distance' => 'setLinkDistance',
'link_travel_time' => 'setLinkTravelTime',
'node_index' => 'setNodeIndex'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'country' => 'getCountry',
'linked_coordinate' => 'getLinkedCoordinate',
'reference_coordinate' => 'getReferenceCoordinate',
'link_distance' => 'getLinkDistance',
'link_travel_time' => 'getLinkTravelTime',
'node_index' => 'getNodeIndex'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['linked_coordinate'] = isset($data['linked_coordinate']) ? $data['linked_coordinate'] : null;
        $this->container['reference_coordinate'] = isset($data['reference_coordinate']) ? $data['reference_coordinate'] : null;
        $this->container['link_distance'] = isset($data['link_distance']) ? $data['link_distance'] : null;
        $this->container['link_travel_time'] = isset($data['link_travel_time']) ? $data['link_travel_time'] : null;
        $this->container['node_index'] = isset($data['node_index']) ? $data['node_index'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['linked_coordinate'] === null) {
            $invalidProperties[] = "'linked_coordinate' can't be null";
        }
        if ($this->container['reference_coordinate'] === null) {
            $invalidProperties[] = "'reference_coordinate' can't be null";
        }
        if ($this->container['link_distance'] === null) {
            $invalidProperties[] = "'link_distance' can't be null";
        }
        if ($this->container['link_travel_time'] === null) {
            $invalidProperties[] = "'link_travel_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the corresponding input waypoint. This user-defined name is available only if InputWaypoint.name for the corresponding input waypoint is set.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \ithings\ptvxserver\model\CountryCode
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \ithings\ptvxserver\model\CountryCode $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets linked_coordinate
     *
     * @return \ithings\ptvxserver\model\Coordinate
     */
    public function getLinkedCoordinate()
    {
        return $this->container['linked_coordinate'];
    }

    /**
     * Sets linked_coordinate
     *
     * @param \ithings\ptvxserver\model\Coordinate $linked_coordinate linked_coordinate
     *
     * @return $this
     */
    public function setLinkedCoordinate($linked_coordinate)
    {
        $this->container['linked_coordinate'] = $linked_coordinate;

        return $this;
    }

    /**
     * Gets reference_coordinate
     *
     * @return \ithings\ptvxserver\model\Coordinate
     */
    public function getReferenceCoordinate()
    {
        return $this->container['reference_coordinate'];
    }

    /**
     * Sets reference_coordinate
     *
     * @param \ithings\ptvxserver\model\Coordinate $reference_coordinate reference_coordinate
     *
     * @return $this
     */
    public function setReferenceCoordinate($reference_coordinate)
    {
        $this->container['reference_coordinate'] = $reference_coordinate;

        return $this;
    }

    /**
     * Gets link_distance
     *
     * @return float
     */
    public function getLinkDistance()
    {
        return $this->container['link_distance'];
    }

    /**
     * Sets link_distance
     *
     * @param float $link_distance Distance as the crow flies from the input coordinate to the linked coordinate.
     *
     * @return $this
     */
    public function setLinkDistance($link_distance)
    {
        $this->container['link_distance'] = $link_distance;

        return $this;
    }

    /**
     * Gets link_travel_time
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getLinkTravelTime()
    {
        return $this->container['link_travel_time'];
    }

    /**
     * Sets link_travel_time
     *
     * @param \ithings\ptvxserver\model\Duration $link_travel_time link_travel_time
     *
     * @return $this
     */
    public function setLinkTravelTime($link_travel_time)
    {
        $this->container['link_travel_time'] = $link_travel_time;

        return $this;
    }

    /**
     * Gets node_index
     *
     * @return \ithings\ptvxserver\model\Index
     */
    public function getNodeIndex()
    {
        return $this->container['node_index'];
    }

    /**
     * Sets node_index
     *
     * @param \ithings\ptvxserver\model\Index $node_index node_index
     *
     * @return $this
     */
    public function setNodeIndex($node_index)
    {
        $this->container['node_index'] = $node_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
