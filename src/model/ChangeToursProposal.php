<?php
/**
 * ChangeToursProposal
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * ChangeToursProposal Class Doc Comment
 *
 * @category Class
 * @description A ChangeToursProposal contains a ChangeToursAction with information about the resulting ToursResponse if the change would be applied to the tour plan. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xtour.ChangeToursProposal
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangeToursProposal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChangeToursProposal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'change_tours_action' => '\ithings\ptvxserver\model\ChangeToursAction',
'tours' => '\ithings\ptvxserver\model\Tour[]',
'tour_reports' => '\ithings\ptvxserver\model\TourReport[]',
'vehicle_ids_not_planned' => 'string[]',
'violated' => 'bool',
'preferences_respected' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'change_tours_action' => null,
'tours' => null,
'tour_reports' => null,
'vehicle_ids_not_planned' => null,
'violated' => null,
'preferences_respected' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'change_tours_action' => 'changeToursAction',
'tours' => 'tours',
'tour_reports' => 'tourReports',
'vehicle_ids_not_planned' => 'vehicleIdsNotPlanned',
'violated' => 'violated',
'preferences_respected' => 'preferencesRespected'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'change_tours_action' => 'setChangeToursAction',
'tours' => 'setTours',
'tour_reports' => 'setTourReports',
'vehicle_ids_not_planned' => 'setVehicleIdsNotPlanned',
'violated' => 'setViolated',
'preferences_respected' => 'setPreferencesRespected'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'change_tours_action' => 'getChangeToursAction',
'tours' => 'getTours',
'tour_reports' => 'getTourReports',
'vehicle_ids_not_planned' => 'getVehicleIdsNotPlanned',
'violated' => 'getViolated',
'preferences_respected' => 'getPreferencesRespected'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['change_tours_action'] = isset($data['change_tours_action']) ? $data['change_tours_action'] : null;
        $this->container['tours'] = isset($data['tours']) ? $data['tours'] : null;
        $this->container['tour_reports'] = isset($data['tour_reports']) ? $data['tour_reports'] : null;
        $this->container['vehicle_ids_not_planned'] = isset($data['vehicle_ids_not_planned']) ? $data['vehicle_ids_not_planned'] : null;
        $this->container['violated'] = isset($data['violated']) ? $data['violated'] : null;
        $this->container['preferences_respected'] = isset($data['preferences_respected']) ? $data['preferences_respected'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets change_tours_action
     *
     * @return \ithings\ptvxserver\model\ChangeToursAction
     */
    public function getChangeToursAction()
    {
        return $this->container['change_tours_action'];
    }

    /**
     * Sets change_tours_action
     *
     * @param \ithings\ptvxserver\model\ChangeToursAction $change_tours_action change_tours_action
     *
     * @return $this
     */
    public function setChangeToursAction($change_tours_action)
    {
        $this->container['change_tours_action'] = $change_tours_action;

        return $this;
    }

    /**
     * Gets tours
     *
     * @return \ithings\ptvxserver\model\Tour[]
     */
    public function getTours()
    {
        return $this->container['tours'];
    }

    /**
     * Sets tours
     *
     * @param \ithings\ptvxserver\model\Tour[] $tours tours
     *
     * @return $this
     */
    public function setTours($tours)
    {
        $this->container['tours'] = $tours;

        return $this;
    }

    /**
     * Gets tour_reports
     *
     * @return \ithings\ptvxserver\model\TourReport[]
     */
    public function getTourReports()
    {
        return $this->container['tour_reports'];
    }

    /**
     * Sets tour_reports
     *
     * @param \ithings\ptvxserver\model\TourReport[] $tour_reports tour_reports
     *
     * @return $this
     */
    public function setTourReports($tour_reports)
    {
        $this->container['tour_reports'] = $tour_reports;

        return $this;
    }

    /**
     * Gets vehicle_ids_not_planned
     *
     * @return string[]
     */
    public function getVehicleIdsNotPlanned()
    {
        return $this->container['vehicle_ids_not_planned'];
    }

    /**
     * Sets vehicle_ids_not_planned
     *
     * @param string[] $vehicle_ids_not_planned vehicle_ids_not_planned
     *
     * @return $this
     */
    public function setVehicleIdsNotPlanned($vehicle_ids_not_planned)
    {
        $this->container['vehicle_ids_not_planned'] = $vehicle_ids_not_planned;

        return $this;
    }

    /**
     * Gets violated
     *
     * @return bool
     */
    public function getViolated()
    {
        return $this->container['violated'];
    }

    /**
     * Sets violated
     *
     * @param bool $violated True if there is any tour violation.
     *
     * @return $this
     */
    public function setViolated($violated)
    {
        $this->container['violated'] = $violated;

        return $this;
    }

    /**
     * Gets preferences_respected
     *
     * @return bool
     */
    public function getPreferencesRespected()
    {
        return $this->container['preferences_respected'];
    }

    /**
     * Sets preferences_respected
     *
     * @param bool $preferences_respected True if all preferences for order group consideration and single stop per customer are respected.
     *
     * @return $this
     */
    public function setPreferencesRespected($preferences_respected)
    {
        $this->container['preferences_respected'] = $preferences_respected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
