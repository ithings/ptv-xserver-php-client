<?php
/**
 * RuntimeInformation
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * RuntimeInformation Class Doc Comment
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuntimeInformation extends ResponseBase 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuntimeInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'service_information' => '\ithings\ptvxserver\model\ServiceInformation[]',
'memory_statistics' => '\ithings\ptvxserver\model\MemoryStatistics',
'version_information' => '\ithings\ptvxserver\model\VersionInformation',
'environment' => '\ithings\ptvxserver\model\Environment',
'module_instances' => '\ithings\ptvxserver\model\ModuleInstance[]',
'active_requests' => '\ithings\ptvxserver\model\Request[]',
'uptime' => '\ithings\ptvxserver\model\Nanoseconds',
'client_is_admin' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'service_information' => null,
'memory_statistics' => null,
'version_information' => null,
'environment' => null,
'module_instances' => null,
'active_requests' => null,
'uptime' => null,
'client_is_admin' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'service_information' => 'serviceInformation',
'memory_statistics' => 'memoryStatistics',
'version_information' => 'versionInformation',
'environment' => 'environment',
'module_instances' => 'moduleInstances',
'active_requests' => 'activeRequests',
'uptime' => 'uptime',
'client_is_admin' => 'clientIsAdmin'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'service_information' => 'setServiceInformation',
'memory_statistics' => 'setMemoryStatistics',
'version_information' => 'setVersionInformation',
'environment' => 'setEnvironment',
'module_instances' => 'setModuleInstances',
'active_requests' => 'setActiveRequests',
'uptime' => 'setUptime',
'client_is_admin' => 'setClientIsAdmin'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'service_information' => 'getServiceInformation',
'memory_statistics' => 'getMemoryStatistics',
'version_information' => 'getVersionInformation',
'environment' => 'getEnvironment',
'module_instances' => 'getModuleInstances',
'active_requests' => 'getActiveRequests',
'uptime' => 'getUptime',
'client_is_admin' => 'getClientIsAdmin'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['service_information'] = isset($data['service_information']) ? $data['service_information'] : null;
        $this->container['memory_statistics'] = isset($data['memory_statistics']) ? $data['memory_statistics'] : null;
        $this->container['version_information'] = isset($data['version_information']) ? $data['version_information'] : null;
        $this->container['environment'] = isset($data['environment']) ? $data['environment'] : null;
        $this->container['module_instances'] = isset($data['module_instances']) ? $data['module_instances'] : null;
        $this->container['active_requests'] = isset($data['active_requests']) ? $data['active_requests'] : null;
        $this->container['uptime'] = isset($data['uptime']) ? $data['uptime'] : null;
        $this->container['client_is_admin'] = isset($data['client_is_admin']) ? $data['client_is_admin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['uptime'] === null) {
            $invalidProperties[] = "'uptime' can't be null";
        }
        if ($this->container['client_is_admin'] === null) {
            $invalidProperties[] = "'client_is_admin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets service_information
     *
     * @return \ithings\ptvxserver\model\ServiceInformation[]
     */
    public function getServiceInformation()
    {
        return $this->container['service_information'];
    }

    /**
     * Sets service_information
     *
     * @param \ithings\ptvxserver\model\ServiceInformation[] $service_information service_information
     *
     * @return $this
     */
    public function setServiceInformation($service_information)
    {
        $this->container['service_information'] = $service_information;

        return $this;
    }

    /**
     * Gets memory_statistics
     *
     * @return \ithings\ptvxserver\model\MemoryStatistics
     */
    public function getMemoryStatistics()
    {
        return $this->container['memory_statistics'];
    }

    /**
     * Sets memory_statistics
     *
     * @param \ithings\ptvxserver\model\MemoryStatistics $memory_statistics memory_statistics
     *
     * @return $this
     */
    public function setMemoryStatistics($memory_statistics)
    {
        $this->container['memory_statistics'] = $memory_statistics;

        return $this;
    }

    /**
     * Gets version_information
     *
     * @return \ithings\ptvxserver\model\VersionInformation
     */
    public function getVersionInformation()
    {
        return $this->container['version_information'];
    }

    /**
     * Sets version_information
     *
     * @param \ithings\ptvxserver\model\VersionInformation $version_information version_information
     *
     * @return $this
     */
    public function setVersionInformation($version_information)
    {
        $this->container['version_information'] = $version_information;

        return $this;
    }

    /**
     * Gets environment
     *
     * @return \ithings\ptvxserver\model\Environment
     */
    public function getEnvironment()
    {
        return $this->container['environment'];
    }

    /**
     * Sets environment
     *
     * @param \ithings\ptvxserver\model\Environment $environment environment
     *
     * @return $this
     */
    public function setEnvironment($environment)
    {
        $this->container['environment'] = $environment;

        return $this;
    }

    /**
     * Gets module_instances
     *
     * @return \ithings\ptvxserver\model\ModuleInstance[]
     */
    public function getModuleInstances()
    {
        return $this->container['module_instances'];
    }

    /**
     * Sets module_instances
     *
     * @param \ithings\ptvxserver\model\ModuleInstance[] $module_instances module_instances
     *
     * @return $this
     */
    public function setModuleInstances($module_instances)
    {
        $this->container['module_instances'] = $module_instances;

        return $this;
    }

    /**
     * Gets active_requests
     *
     * @return \ithings\ptvxserver\model\Request[]
     */
    public function getActiveRequests()
    {
        return $this->container['active_requests'];
    }

    /**
     * Sets active_requests
     *
     * @param \ithings\ptvxserver\model\Request[] $active_requests active_requests
     *
     * @return $this
     */
    public function setActiveRequests($active_requests)
    {
        $this->container['active_requests'] = $active_requests;

        return $this;
    }

    /**
     * Gets uptime
     *
     * @return \ithings\ptvxserver\model\Nanoseconds
     */
    public function getUptime()
    {
        return $this->container['uptime'];
    }

    /**
     * Sets uptime
     *
     * @param \ithings\ptvxserver\model\Nanoseconds $uptime uptime
     *
     * @return $this
     */
    public function setUptime($uptime)
    {
        $this->container['uptime'] = $uptime;

        return $this;
    }

    /**
     * Gets client_is_admin
     *
     * @return bool
     */
    public function getClientIsAdmin()
    {
        return $this->container['client_is_admin'];
    }

    /**
     * Sets client_is_admin
     *
     * @param bool $client_is_admin Specifies if the current client has admin privileges.
     *
     * @return $this
     */
    public function setClientIsAdmin($client_is_admin)
    {
        $this->container['client_is_admin'] = $client_is_admin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
