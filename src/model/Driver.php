<?php
/**
 * Driver
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * Driver Class Doc Comment
 *
 * @category Class
 * @description A driver is always assigned to a specific vehicle instance and may not always be available to operate it. To be precise, a driver can only operate the corresponding vehicle instance within given time intervals. In addition, it may be specified how long the driver has already worked. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xtour.Driver
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Driver implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Driver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'operating_intervals' => '\ithings\ptvxserver\model\Interval[]',
'break_intervals' => '\ithings\ptvxserver\model\BreakInterval[]',
'vehicle_id' => 'string',
'work_logbook_summary' => '\ithings\ptvxserver\model\WorkLogbookSummary'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'operating_intervals' => null,
'break_intervals' => null,
'vehicle_id' => null,
'work_logbook_summary' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'operating_intervals' => 'operatingIntervals',
'break_intervals' => 'breakIntervals',
'vehicle_id' => 'vehicleId',
'work_logbook_summary' => 'workLogbookSummary'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'operating_intervals' => 'setOperatingIntervals',
'break_intervals' => 'setBreakIntervals',
'vehicle_id' => 'setVehicleId',
'work_logbook_summary' => 'setWorkLogbookSummary'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'operating_intervals' => 'getOperatingIntervals',
'break_intervals' => 'getBreakIntervals',
'vehicle_id' => 'getVehicleId',
'work_logbook_summary' => 'getWorkLogbookSummary'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['operating_intervals'] = isset($data['operating_intervals']) ? $data['operating_intervals'] : null;
        $this->container['break_intervals'] = isset($data['break_intervals']) ? $data['break_intervals'] : null;
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
        $this->container['work_logbook_summary'] = isset($data['work_logbook_summary']) ? $data['work_logbook_summary'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['vehicle_id'] === null) {
            $invalidProperties[] = "'vehicle_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID of the driver.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets operating_intervals
     *
     * @return \ithings\ptvxserver\model\Interval[]
     */
    public function getOperatingIntervals()
    {
        return $this->container['operating_intervals'];
    }

    /**
     * Sets operating_intervals
     *
     * @param \ithings\ptvxserver\model\Interval[] $operating_intervals operating_intervals
     *
     * @return $this
     */
    public function setOperatingIntervals($operating_intervals)
    {
        $this->container['operating_intervals'] = $operating_intervals;

        return $this;
    }

    /**
     * Gets break_intervals
     *
     * @return \ithings\ptvxserver\model\BreakInterval[]
     */
    public function getBreakIntervals()
    {
        return $this->container['break_intervals'];
    }

    /**
     * Sets break_intervals
     *
     * @param \ithings\ptvxserver\model\BreakInterval[] $break_intervals break_intervals
     *
     * @return $this
     */
    public function setBreakIntervals($break_intervals)
    {
        $this->container['break_intervals'] = $break_intervals;

        return $this;
    }

    /**
     * Gets vehicle_id
     *
     * @return string
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param string $vehicle_id ID of the driver's vehicle.
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }

    /**
     * Gets work_logbook_summary
     *
     * @return \ithings\ptvxserver\model\WorkLogbookSummary
     */
    public function getWorkLogbookSummary()
    {
        return $this->container['work_logbook_summary'];
    }

    /**
     * Sets work_logbook_summary
     *
     * @param \ithings\ptvxserver\model\WorkLogbookSummary $work_logbook_summary work_logbook_summary
     *
     * @return $this
     */
    public function setWorkLogbookSummary($work_logbook_summary)
    {
        $this->container['work_logbook_summary'] = $work_logbook_summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
