<?php
/**
 * TourViolationReport
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * TourViolationReport Class Doc Comment
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TourViolationReport extends ViolationReport 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TourViolationReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'planning_horizon_exceedance' => '\ithings\ptvxserver\model\Duration',
'operating_interval_exceedance' => '\ithings\ptvxserver\model\Duration',
'tour_start_interval_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_driving_time_per_tour_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_travel_time_per_tour_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_driving_time_per_driver_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_travel_time_per_driver_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_trip_start_interval_exceedance' => '\ithings\ptvxserver\model\Duration',
'maximum_number_of_customer_stops_exceedance' => '\ithings\ptvxserver\model\PositiveInteger',
'maximum_distance_exceedance' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'planning_horizon_exceedance' => null,
'operating_interval_exceedance' => null,
'tour_start_interval_exceedance' => null,
'maximum_driving_time_per_tour_exceedance' => null,
'maximum_travel_time_per_tour_exceedance' => null,
'maximum_driving_time_per_driver_exceedance' => null,
'maximum_travel_time_per_driver_exceedance' => null,
'maximum_trip_start_interval_exceedance' => null,
'maximum_number_of_customer_stops_exceedance' => null,
'maximum_distance_exceedance' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'planning_horizon_exceedance' => 'planningHorizonExceedance',
'operating_interval_exceedance' => 'operatingIntervalExceedance',
'tour_start_interval_exceedance' => 'tourStartIntervalExceedance',
'maximum_driving_time_per_tour_exceedance' => 'maximumDrivingTimePerTourExceedance',
'maximum_travel_time_per_tour_exceedance' => 'maximumTravelTimePerTourExceedance',
'maximum_driving_time_per_driver_exceedance' => 'maximumDrivingTimePerDriverExceedance',
'maximum_travel_time_per_driver_exceedance' => 'maximumTravelTimePerDriverExceedance',
'maximum_trip_start_interval_exceedance' => 'maximumTripStartIntervalExceedance',
'maximum_number_of_customer_stops_exceedance' => 'maximumNumberOfCustomerStopsExceedance',
'maximum_distance_exceedance' => 'maximumDistanceExceedance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'planning_horizon_exceedance' => 'setPlanningHorizonExceedance',
'operating_interval_exceedance' => 'setOperatingIntervalExceedance',
'tour_start_interval_exceedance' => 'setTourStartIntervalExceedance',
'maximum_driving_time_per_tour_exceedance' => 'setMaximumDrivingTimePerTourExceedance',
'maximum_travel_time_per_tour_exceedance' => 'setMaximumTravelTimePerTourExceedance',
'maximum_driving_time_per_driver_exceedance' => 'setMaximumDrivingTimePerDriverExceedance',
'maximum_travel_time_per_driver_exceedance' => 'setMaximumTravelTimePerDriverExceedance',
'maximum_trip_start_interval_exceedance' => 'setMaximumTripStartIntervalExceedance',
'maximum_number_of_customer_stops_exceedance' => 'setMaximumNumberOfCustomerStopsExceedance',
'maximum_distance_exceedance' => 'setMaximumDistanceExceedance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'planning_horizon_exceedance' => 'getPlanningHorizonExceedance',
'operating_interval_exceedance' => 'getOperatingIntervalExceedance',
'tour_start_interval_exceedance' => 'getTourStartIntervalExceedance',
'maximum_driving_time_per_tour_exceedance' => 'getMaximumDrivingTimePerTourExceedance',
'maximum_travel_time_per_tour_exceedance' => 'getMaximumTravelTimePerTourExceedance',
'maximum_driving_time_per_driver_exceedance' => 'getMaximumDrivingTimePerDriverExceedance',
'maximum_travel_time_per_driver_exceedance' => 'getMaximumTravelTimePerDriverExceedance',
'maximum_trip_start_interval_exceedance' => 'getMaximumTripStartIntervalExceedance',
'maximum_number_of_customer_stops_exceedance' => 'getMaximumNumberOfCustomerStopsExceedance',
'maximum_distance_exceedance' => 'getMaximumDistanceExceedance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['planning_horizon_exceedance'] = isset($data['planning_horizon_exceedance']) ? $data['planning_horizon_exceedance'] : null;
        $this->container['operating_interval_exceedance'] = isset($data['operating_interval_exceedance']) ? $data['operating_interval_exceedance'] : null;
        $this->container['tour_start_interval_exceedance'] = isset($data['tour_start_interval_exceedance']) ? $data['tour_start_interval_exceedance'] : null;
        $this->container['maximum_driving_time_per_tour_exceedance'] = isset($data['maximum_driving_time_per_tour_exceedance']) ? $data['maximum_driving_time_per_tour_exceedance'] : null;
        $this->container['maximum_travel_time_per_tour_exceedance'] = isset($data['maximum_travel_time_per_tour_exceedance']) ? $data['maximum_travel_time_per_tour_exceedance'] : null;
        $this->container['maximum_driving_time_per_driver_exceedance'] = isset($data['maximum_driving_time_per_driver_exceedance']) ? $data['maximum_driving_time_per_driver_exceedance'] : null;
        $this->container['maximum_travel_time_per_driver_exceedance'] = isset($data['maximum_travel_time_per_driver_exceedance']) ? $data['maximum_travel_time_per_driver_exceedance'] : null;
        $this->container['maximum_trip_start_interval_exceedance'] = isset($data['maximum_trip_start_interval_exceedance']) ? $data['maximum_trip_start_interval_exceedance'] : null;
        $this->container['maximum_number_of_customer_stops_exceedance'] = isset($data['maximum_number_of_customer_stops_exceedance']) ? $data['maximum_number_of_customer_stops_exceedance'] : null;
        $this->container['maximum_distance_exceedance'] = isset($data['maximum_distance_exceedance']) ? $data['maximum_distance_exceedance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets planning_horizon_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getPlanningHorizonExceedance()
    {
        return $this->container['planning_horizon_exceedance'];
    }

    /**
     * Sets planning_horizon_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $planning_horizon_exceedance planning_horizon_exceedance
     *
     * @return $this
     */
    public function setPlanningHorizonExceedance($planning_horizon_exceedance)
    {
        $this->container['planning_horizon_exceedance'] = $planning_horizon_exceedance;

        return $this;
    }

    /**
     * Gets operating_interval_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getOperatingIntervalExceedance()
    {
        return $this->container['operating_interval_exceedance'];
    }

    /**
     * Sets operating_interval_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $operating_interval_exceedance operating_interval_exceedance
     *
     * @return $this
     */
    public function setOperatingIntervalExceedance($operating_interval_exceedance)
    {
        $this->container['operating_interval_exceedance'] = $operating_interval_exceedance;

        return $this;
    }

    /**
     * Gets tour_start_interval_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTourStartIntervalExceedance()
    {
        return $this->container['tour_start_interval_exceedance'];
    }

    /**
     * Sets tour_start_interval_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $tour_start_interval_exceedance tour_start_interval_exceedance
     *
     * @return $this
     */
    public function setTourStartIntervalExceedance($tour_start_interval_exceedance)
    {
        $this->container['tour_start_interval_exceedance'] = $tour_start_interval_exceedance;

        return $this;
    }

    /**
     * Gets maximum_driving_time_per_tour_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumDrivingTimePerTourExceedance()
    {
        return $this->container['maximum_driving_time_per_tour_exceedance'];
    }

    /**
     * Sets maximum_driving_time_per_tour_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_driving_time_per_tour_exceedance maximum_driving_time_per_tour_exceedance
     *
     * @return $this
     */
    public function setMaximumDrivingTimePerTourExceedance($maximum_driving_time_per_tour_exceedance)
    {
        $this->container['maximum_driving_time_per_tour_exceedance'] = $maximum_driving_time_per_tour_exceedance;

        return $this;
    }

    /**
     * Gets maximum_travel_time_per_tour_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumTravelTimePerTourExceedance()
    {
        return $this->container['maximum_travel_time_per_tour_exceedance'];
    }

    /**
     * Sets maximum_travel_time_per_tour_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_travel_time_per_tour_exceedance maximum_travel_time_per_tour_exceedance
     *
     * @return $this
     */
    public function setMaximumTravelTimePerTourExceedance($maximum_travel_time_per_tour_exceedance)
    {
        $this->container['maximum_travel_time_per_tour_exceedance'] = $maximum_travel_time_per_tour_exceedance;

        return $this;
    }

    /**
     * Gets maximum_driving_time_per_driver_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumDrivingTimePerDriverExceedance()
    {
        return $this->container['maximum_driving_time_per_driver_exceedance'];
    }

    /**
     * Sets maximum_driving_time_per_driver_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_driving_time_per_driver_exceedance maximum_driving_time_per_driver_exceedance
     *
     * @return $this
     */
    public function setMaximumDrivingTimePerDriverExceedance($maximum_driving_time_per_driver_exceedance)
    {
        $this->container['maximum_driving_time_per_driver_exceedance'] = $maximum_driving_time_per_driver_exceedance;

        return $this;
    }

    /**
     * Gets maximum_travel_time_per_driver_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumTravelTimePerDriverExceedance()
    {
        return $this->container['maximum_travel_time_per_driver_exceedance'];
    }

    /**
     * Sets maximum_travel_time_per_driver_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_travel_time_per_driver_exceedance maximum_travel_time_per_driver_exceedance
     *
     * @return $this
     */
    public function setMaximumTravelTimePerDriverExceedance($maximum_travel_time_per_driver_exceedance)
    {
        $this->container['maximum_travel_time_per_driver_exceedance'] = $maximum_travel_time_per_driver_exceedance;

        return $this;
    }

    /**
     * Gets maximum_trip_start_interval_exceedance
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getMaximumTripStartIntervalExceedance()
    {
        return $this->container['maximum_trip_start_interval_exceedance'];
    }

    /**
     * Sets maximum_trip_start_interval_exceedance
     *
     * @param \ithings\ptvxserver\model\Duration $maximum_trip_start_interval_exceedance maximum_trip_start_interval_exceedance
     *
     * @return $this
     */
    public function setMaximumTripStartIntervalExceedance($maximum_trip_start_interval_exceedance)
    {
        $this->container['maximum_trip_start_interval_exceedance'] = $maximum_trip_start_interval_exceedance;

        return $this;
    }

    /**
     * Gets maximum_number_of_customer_stops_exceedance
     *
     * @return \ithings\ptvxserver\model\PositiveInteger
     */
    public function getMaximumNumberOfCustomerStopsExceedance()
    {
        return $this->container['maximum_number_of_customer_stops_exceedance'];
    }

    /**
     * Sets maximum_number_of_customer_stops_exceedance
     *
     * @param \ithings\ptvxserver\model\PositiveInteger $maximum_number_of_customer_stops_exceedance maximum_number_of_customer_stops_exceedance
     *
     * @return $this
     */
    public function setMaximumNumberOfCustomerStopsExceedance($maximum_number_of_customer_stops_exceedance)
    {
        $this->container['maximum_number_of_customer_stops_exceedance'] = $maximum_number_of_customer_stops_exceedance;

        return $this;
    }

    /**
     * Gets maximum_distance_exceedance
     *
     * @return float
     */
    public function getMaximumDistanceExceedance()
    {
        return $this->container['maximum_distance_exceedance'];
    }

    /**
     * Sets maximum_distance_exceedance
     *
     * @param float $maximum_distance_exceedance The distance by which the the specified maximum distance per tour is exceeded. The limit is either specified by maximum distance of tour restrictions or maximum distance of vehicle. Corresponds to tour events with violation type MAXIMUM\\_DISTANCE.
     *
     * @return $this
     */
    public function setMaximumDistanceExceedance($maximum_distance_exceedance)
    {
        $this->container['maximum_distance_exceedance'] = $maximum_distance_exceedance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
