<?php
/**
 * VisitWeek
 *
 * PHP version 5
 *
 * @category Class
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * xServer
 *
 * PTV xServer 2.26.1 - 2.26 API document
 *
 * OpenAPI spec version: 2.26
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace ithings\ptvxserver\model;

use \ArrayAccess;
use \ithings\ptvxserver\ObjectSerializer;

/**
 * VisitWeek Class Doc Comment
 *
 * @category Class
 * @description Represents a visit week. If determineShortestVisitSequencePerDay is true, the sequence of visits is optimal. Otherwise, visits are sorted by visit day but the sequence of visits within a visit day has no special meaning. Hint: Corresponding type in xServer API documentation - com.ptvgroup.xserver.xcluster.VisitWeek
 * @package  ithings\ptvxserver
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VisitWeek implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VisitWeek';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visit_days' => '\ithings\ptvxserver\model\VisitDay[]',
'visit_order_ids_skipped' => 'string[]',
'travel_time' => '\ithings\ptvxserver\model\Duration',
'service_time' => '\ithings\ptvxserver\model\Duration'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visit_days' => null,
'visit_order_ids_skipped' => null,
'travel_time' => null,
'service_time' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'visit_days' => 'visitDays',
'visit_order_ids_skipped' => 'visitOrderIdsSkipped',
'travel_time' => 'travelTime',
'service_time' => 'serviceTime'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'visit_days' => 'setVisitDays',
'visit_order_ids_skipped' => 'setVisitOrderIdsSkipped',
'travel_time' => 'setTravelTime',
'service_time' => 'setServiceTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'visit_days' => 'getVisitDays',
'visit_order_ids_skipped' => 'getVisitOrderIdsSkipped',
'travel_time' => 'getTravelTime',
'service_time' => 'getServiceTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visit_days'] = isset($data['visit_days']) ? $data['visit_days'] : null;
        $this->container['visit_order_ids_skipped'] = isset($data['visit_order_ids_skipped']) ? $data['visit_order_ids_skipped'] : null;
        $this->container['travel_time'] = isset($data['travel_time']) ? $data['travel_time'] : null;
        $this->container['service_time'] = isset($data['service_time']) ? $data['service_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets visit_days
     *
     * @return \ithings\ptvxserver\model\VisitDay[]
     */
    public function getVisitDays()
    {
        return $this->container['visit_days'];
    }

    /**
     * Sets visit_days
     *
     * @param \ithings\ptvxserver\model\VisitDay[] $visit_days visit_days
     *
     * @return $this
     */
    public function setVisitDays($visit_days)
    {
        $this->container['visit_days'] = $visit_days;

        return $this;
    }

    /**
     * Gets visit_order_ids_skipped
     *
     * @return string[]
     */
    public function getVisitOrderIdsSkipped()
    {
        return $this->container['visit_order_ids_skipped'];
    }

    /**
     * Sets visit_order_ids_skipped
     *
     * @param string[] $visit_order_ids_skipped visit_order_ids_skipped
     *
     * @return $this
     */
    public function setVisitOrderIdsSkipped($visit_order_ids_skipped)
    {
        $this->container['visit_order_ids_skipped'] = $visit_order_ids_skipped;

        return $this;
    }

    /**
     * Gets travel_time
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getTravelTime()
    {
        return $this->container['travel_time'];
    }

    /**
     * Sets travel_time
     *
     * @param \ithings\ptvxserver\model\Duration $travel_time travel_time
     *
     * @return $this
     */
    public function setTravelTime($travel_time)
    {
        $this->container['travel_time'] = $travel_time;

        return $this;
    }

    /**
     * Gets service_time
     *
     * @return \ithings\ptvxserver\model\Duration
     */
    public function getServiceTime()
    {
        return $this->container['service_time'];
    }

    /**
     * Sets service_time
     *
     * @param \ithings\ptvxserver\model\Duration $service_time service_time
     *
     * @return $this
     */
    public function setServiceTime($service_time)
    {
        $this->container['service_time'] = $service_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
